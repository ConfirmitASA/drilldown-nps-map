/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _DrilldownMap = __webpack_require__(2);\n\nvar _DrilldownMap2 = _interopRequireDefault(_DrilldownMap);\n\nvar _rReportalBase = __webpack_require__(1);\n\nvar _rReportalBase2 = _interopRequireDefault(_rReportalBase);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nwindow.Reportal = window.Reportal || {};\n_rReportalBase2.default.mixin(window.Reportal, {\n  DrilldownMap: _DrilldownMap2.default\n});\n\nexports.default = Reportal;\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcz8zNDc5Il0sIm5hbWVzIjpbIndpbmRvdyIsIlJlcG9ydGFsIiwibWl4aW4iLCJEcmlsbGRvd25NYXAiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBQSxPQUFPQyxRQUFQLEdBQWtCRCxPQUFPQyxRQUFQLElBQW1CLEVBQXJDO0FBQ0Esd0JBQWFDLEtBQWIsQ0FBbUJGLE9BQU9DLFFBQTFCLEVBQW1DO0FBQ2pDRTtBQURpQyxDQUFuQzs7a0JBSWVGLFEiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IERyaWxsZG93bk1hcCBmcm9tIFwiLi9EcmlsbGRvd25NYXBcIjtcbmltcG9ydCBSZXBvcnRhbEJhc2UgZnJvbSBcInItcmVwb3J0YWwtYmFzZVwiO1xuXG53aW5kb3cuUmVwb3J0YWwgPSB3aW5kb3cuUmVwb3J0YWwgfHwge31cblJlcG9ydGFsQmFzZS5taXhpbih3aW5kb3cuUmVwb3J0YWwse1xuICBEcmlsbGRvd25NYXBcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBSZXBvcnRhbFxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21haW4uanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 1 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ReportalBase = function () {\n  function ReportalBase() {\n    _classCallCheck(this, ReportalBase);\n  }\n\n  _createClass(ReportalBase, null, [{\n    key: 'mixin',\n\n\n    /**\r\n     * Copies props from a source object to a target object.\r\n     *\r\n     * Note, this method uses a simple `for...in` strategy for enumerating\r\n     * properties.  To ensure only `ownProperties` are copied from source\r\n     * to target and that accessor implementations are copied, use `extend`.\r\n     *\r\n     * @method mixin\r\n     * @param {Object} target Target object to copy properties to.\r\n     * @param {Object} source Source object to copy properties from.\r\n     * @return {Object} Target object that was passed as first argument.\r\n     */\n    value: function mixin(target, source) {\n      for (var i in source) {\n        target[i] = source[i];\n      }\n      return target;\n    }\n  }, {\n    key: '_logger',\n    value: function _logger(level, args) {\n      // accept ['foo', 'bar'] and [['foo', 'bar']]\n      if (args.length === 1 && Array.isArray(args[0])) {\n        args = args[0];\n      }\n      // only accept logging functions\n      switch (level) {\n        case 'log':\n        case 'warn':\n        case 'error':\n          console[level].apply(console, args);\n          break;\n      }\n    }\n  }, {\n    key: '_log',\n    value: function _log() {\n      var args = Array.prototype.slice.call(arguments, 0);\n      this._logger('log', args);\n    }\n  }, {\n    key: '_warn',\n    value: function _warn() {\n      var args = Array.prototype.slice.call(arguments, 0);\n      this._logger('warn', args);\n    }\n  }, {\n    key: '_error',\n    value: function _error() {\n      var args = Array.prototype.slice.call(arguments, 0);\n      this._logger('error', args);\n    }\n\n    /**\r\n     * Creates a named event with `name`\r\n     * @param {String} name - name of the event\r\n     * @return {Event} Returns a created event\r\n     * */\n\n  }, {\n    key: 'newEvent',\n    value: function newEvent(name) {\n      var event = document.createEvent('Event');\n      event.initEvent(name, true, true);\n      return event;\n    }\n\n    /**\r\n     * Inspects if the current string might be converted to number and renders it as number. If string length is 0, returns `null`. If none applies returns the string as is.\r\n     * @param {String} str - value of the cell if not HTML contents\r\n     * @return {Number|null|String}\r\n     * */\n\n  }, {\n    key: 'isNumber',\n    value: function isNumber(str) {\n      if (!isNaN(parseFloat(str))) {\n        str = str.replace(/,/i, ''); // remove unnecessary comma as a delimiter for thousands from data.\n        return parseFloat(str);\n      } else if (str.length == 0) {\n        return null;\n      } else {\n        return str;\n      }\n    }\n\n    /**\r\n     * Creates an XHR wrapped in a Promise\r\n     * @param {!String} URL - url to send a `GET` request to\r\n     * @return {Promise} Returns a then-able promise with `XMLHttpRequest.responseText`\r\n     * */\n\n  }, {\n    key: 'promiseRequest',\n    value: function promiseRequest(URL) {\n      return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', URL, true);\n        xhr.onload = function () {\n          xhr.status == 200 ? resolve(xhr.responseText) : reject(Error(xhr.status + ': ' + xhr.statusText));\n        };\n        xhr.onerror = function () {\n          reject(Error(\"Network Error\"));\n        };\n        xhr.send();\n      });\n    }\n\n    /**\r\n     * Gets a variable listed in query string\r\n     * @param {!String} variable - variable name to get value for\r\n     * @param {String=} [query=window.location.search.substring(1)] - the query string to search variable for in\r\n     * @return {String} Returns value for the variable\r\n     * */\n\n  }, {\n    key: 'getQueryVariable',\n    value: function getQueryVariable(variable) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.location.search.substring(1);\n\n      var vars = query.split(\"&\");\n      for (var i = 0; i < vars.length; i++) {\n        var pair = vars[i].split(\"=\");\n        if (pair[0].toLowerCase() == variable.toLowerCase()) {\n          return pair[1];\n        }\n      }\n      return null;\n    }\n  }]);\n\n  return ReportalBase;\n}();\n\nexports.default = ReportalBase;\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 2 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar DrilldownMap = function () {\n  function DrilldownMap() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        hierarchy = _ref.hierarchy,\n        containerID = _ref.containerID,\n        _ref$dataClasses = _ref.dataClasses,\n        dataClasses = _ref$dataClasses === undefined ? [{\n      from: 80,\n      to: 100,\n      color: '#8bc34a',\n      name: 'Promoter'\n    }, {\n      from: 60,\n      to: 80,\n      color: '#ffc107',\n      name: 'Passive'\n    }, {\n      from: 0,\n      to: 60,\n      color: '#f44336',\n      name: 'Detractor'\n    }] : _ref$dataClasses,\n        options = _ref.options;\n\n    _classCallCheck(this, DrilldownMap);\n\n    if ((typeof Highcharts === 'undefined' ? 'undefined' : _typeof(Highcharts)) == undefined) {\n      throw new Error('Highcharts must be declared. Probably they are missing');\n    };\n    if (_typeof(Highcharts.maps) == undefined) {\n      throw new Error('HighMaps must be loaded. Probably they are missing');\n    };\n    this.constructor.addMapIDsToHierarchyLevel(hierarchy);\n    this.constructor.drawMap(hierarchy, containerID, dataClasses);\n  }\n\n  _createClass(DrilldownMap, null, [{\n    key: 'createCustomGeoJSON',\n    value: function createCustomGeoJSON(sourceMap, countriesList, mapName) {\n      var geojson = {\n        title: \"\",\n        version: \"0.1.0\",\n        type: \"FeatureCollection\",\n        copyright: \"Copyright (c) 2015 Highsoft AS, Based on data from Natural Earth\",\n        copyrightShort: \"Natural Earth\",\n        copyrightUrl: \"http://www.naturalearthdata.com\",\n        crs: {\n          type: \"name\",\n          properties: {\n            name: \"urn:ogc:def:crs:EPSG:54003\"\n          }\n        },\n        \"hc-transform\": {\n          default: {\n            crs: \"+proj=mill +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 +R_A +datum=WGS84 +units=m +no_defs\",\n            scale: 1.72182781654e-05,\n            jsonres: 15.5,\n            jsonmarginX: -999,\n            jsonmarginY: 9851.0,\n            xoffset: -19495356.3693,\n            yoffset: 12635908.1982\n          }\n        },\n        features: []\n      };\n      geojson.title = mapName;\n      if (typeof countriesList === 'string') {\n        sourceMap.features.reverse().forEach(function (feature) {\n          if (feature.properties[\"hc-key\"] === countriesList) {\n            geojson.features.push(feature);\n          }\n        });\n      } else if (Array.isArray(countriesList)) {\n        countriesList.forEach(function (id) {\n          sourceMap.features.reverse().forEach(function (feature) {\n            if (feature.properties[\"hc-key\"] === id) {\n              geojson.features.push(feature);\n            }\n          });\n        });\n      }\n      return geojson;\n    }\n  }, {\n    key: 'initMap',\n    value: function initMap(obj) {\n      var series = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n      obj.subcells.forEach(function (el) {\n        if (el.mapID) {\n          var s = DrilldownMap.composeSeries(el);\n          series.push(s);\n        }\n      });\n      return series;\n    }\n  }, {\n    key: 'addMapIDsToHierarchyLevel',\n    value: function addMapIDsToHierarchyLevel(hierarchy) {\n      var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      hierarchy.forEach(function (el) {\n        el.parent = parent;\n        el.value = Math.random() * 100;\n        if (el.parent && el.parent.map) {\n          el.map = el.parent.map;\n        }\n        if (el.subcells) {\n          DrilldownMap.addMapIDsToHierarchyLevel(el.subcells, el);\n        }\n        if (el.parent && el.mapID && !el.parent.map) {\n          if (!el.parent.mapID) el.parent.mapID = [];\n          el.parent.mapID = el.parent.mapID.concat(el.mapID);\n        }\n      });\n    }\n  }, {\n    key: 'loadMap',\n    value: function loadMap(source) {\n      var map = new Promise(function (resolve, reject) {\n        jQuery.getScript('https://code.highcharts.com/mapdata/' + source + '.js', function () {\n          resolve(Highcharts.maps[source]);\n        });\n      });\n      return map;\n    }\n  }, {\n    key: 'getSeriesData',\n    value: function getSeriesData(el) {\n      var drilldown = void 0;\n      el.subcells ? drilldown = el.text : drilldown = null;\n      if (typeof el.mapID === 'string') {\n        return [{\n          'drilldown': drilldown,\n          'code': el.mapID,\n          'value': el.value\n        }];\n      } else if (Array.isArray(el.mapID)) {\n        return el.mapID.map(function (id) {\n          return {\n            'drilldown': drilldown,\n            'code': id,\n            'value': el.value\n          };\n        });\n      } else {\n        throw new Error(\"Data element is corrupted\");\n      }\n    }\n  }, {\n    key: 'getColor',\n    value: function getColor(val) {\n      if (val < 60) return '#f44336';else if (val < 80) return '#ffc107';else return '#8bc34a';\n    }\n  }, {\n    key: 'composeSeries',\n    value: function composeSeries(el, mapData, chart) {\n      if (el.coordinates) {\n        mapData ? chart.mapTransforms = mapData[\"hc-transform\"] : chart.mapTransforms = Highcharts.maps[\"custom/world-highres2\"][\"hc-transform\"];\n        var pos = chart.fromLatLonToPoint({ lat: el.coordinates[0], lon: el.coordinates[1] });\n        return {\n          events: {\n            // click: onclick function\n          },\n          type: \"mappoint\", // or mapbubble\n          name: el.text,\n          marker: {\n            lineColor: \"black\",\n            lineWidth: 1,\n            radius: 4,\n            symbol: \"circle\"\n          },\n          data: [{\n            color: DrilldownMap.getColor(el.value),\n            name: el.text,\n            value: el.value,\n            x: pos.x,\n            y: pos.y\n          }]\n        };\n      } else {\n        mapData ? mapData = Highcharts.geojson(DrilldownMap.createCustomGeoJSON(mapData, el.mapID, el.text)) : mapData = Highcharts.geojson(DrilldownMap.createCustomGeoJSON(Highcharts.maps['custom/world-highres2'], el.mapID, el.text));\n        if (el.mapID) {\n          var s = {\n            name: el.text,\n            tooltip: {\n              pointFormat: 'NPS : {point.value}'\n            },\n            allAreas: false,\n            parent: el.parent.text,\n            mapData: mapData,\n            joinBy: ['hc-key', 'code'],\n            data: DrilldownMap.getSeriesData(el)\n          };\n          return s;\n        }\n      }\n    }\n  }, {\n    key: 'updateMap',\n    value: function updateMap(curLVL, chart, e) {\n      curLVL = curLVL.subcells.filter(function (el) {\n        return el.text == e.point.series.name;\n      })[0];\n      if (curLVL && curLVL.map) {\n        // if we have another map to load\n        var map = DrilldownMap.loadMap(curLVL.map);\n        map.then(function (mapData) {\n          DrilldownMap.addSeries(curLVL, chart, e, mapData);\n        });\n      } else if (curLVL && !curLVL.map) {\n        DrilldownMap.addSeries(curLVL, chart, e);\n      }\n      return curLVL;\n    }\n  }, {\n    key: 'addSeries',\n    value: function addSeries(curLVL, chart, e, mapData) {\n      if (curLVL.subcells && curLVL.isGlobal) {\n        if (!curLVL.subcells[0].isGlobal) {\n          var a = DrilldownMap.composeSeries(curLVL, mapData, chart);\n          a.data.map(function (el) {\n            el.drilldown = null, el.value = null;\n          });\n          chart.addSingleSeriesAsDrilldown(e.point, a);\n        }\n        curLVL.subcells.forEach(function (el) {\n          if (!el.mapID && !el.coordinates) return;\n          var a = DrilldownMap.composeSeries(el, mapData, chart);\n          chart.addSingleSeriesAsDrilldown(e.point, a);\n        });\n        chart.applyDrilldown();\n      } else {\n        var _a = DrilldownMap.composeSeries(curLVL, mapData, chart);\n        _a.data.map(function (el) {\n          el.drilldown = null, el.value = null;\n        });\n        chart.addSeriesAsDrilldown(e.point, _a);\n      }\n    }\n  }, {\n    key: 'drawMap',\n    value: function drawMap(hierarchy, containerID, dataClasses) {\n      var curLVL = hierarchy[0];\n      Highcharts.mapChart(containerID, {\n        lang: {\n          drillUpText: 'Back to {series.parent}'\n        },\n        tooltip: {\n          pointFormat: 'NPS : {point.value}'\n        },\n        title: {\n          text: 'Drilldown map'\n        },\n        legend: {\n          enabled: false\n        },\n        colorAxis: {\n          dataClasses: dataClasses\n        },\n        mapNavigation: {\n          enabled: true\n        },\n        subtitle: {\n          align: 'right',\n          text: 'Current level: ' + curLVL.text\n        },\n        chart: {\n          events: {\n            drilldown: function drilldown(e) {\n              var chart = this;\n              curLVL = DrilldownMap.updateMap(curLVL, chart, e);\n              chart.subtitle.update({ text: 'Current region: ' + curLVL.text + '<br> Region NPS: ' + curLVL.value });\n            },\n            drillupall: function drillupall(e) {\n              curLVL = curLVL.parent;\n              this.subtitle.update({ text: 'Current level: ' + curLVL.text });\n            }\n          }\n        },\n        series: DrilldownMap.initMap(curLVL, [{\n          mapData: Highcharts.maps[\"custom/world-highres2\"]\n        }])\n      });\n    }\n  }]);\n\n  return DrilldownMap;\n}();\n\nexports.default = DrilldownMap;\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }
/******/ ]);