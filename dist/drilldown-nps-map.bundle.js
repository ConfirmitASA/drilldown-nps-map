/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _DrilldownMap = __webpack_require__(13);\n\nvar _DrilldownMap2 = _interopRequireDefault(_DrilldownMap);\n\nvar _rReportalBase = __webpack_require__(1);\n\nvar _rReportalBase2 = _interopRequireDefault(_rReportalBase);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nwindow.Reportal = window.Reportal || {};\n_rReportalBase2.default.mixin(window.Reportal, {\n  DrilldownMap: _DrilldownMap2.default,\n  ReportalBase: _rReportalBase2.default\n});\n\nexports.default = _DrilldownMap2.default;\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcz8zNDc5Il0sIm5hbWVzIjpbIndpbmRvdyIsIlJlcG9ydGFsIiwibWl4aW4iLCJEcmlsbGRvd25NYXAiLCJSZXBvcnRhbEJhc2UiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBQSxPQUFPQyxRQUFQLEdBQWtCRCxPQUFPQyxRQUFQLElBQW1CLEVBQXJDO0FBQ0Esd0JBQWFDLEtBQWIsQ0FBbUJGLE9BQU9DLFFBQTFCLEVBQW1DO0FBQ2pDRSxzQ0FEaUM7QUFFakNDO0FBRmlDLENBQW5DIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBEcmlsbGRvd25NYXAgZnJvbSBcIi4vRHJpbGxkb3duTWFwXCI7XG5pbXBvcnQgUmVwb3J0YWxCYXNlIGZyb20gXCJyLXJlcG9ydGFsLWJhc2VcIjtcblxud2luZG93LlJlcG9ydGFsID0gd2luZG93LlJlcG9ydGFsIHx8IHt9O1xuUmVwb3J0YWxCYXNlLm1peGluKHdpbmRvdy5SZXBvcnRhbCx7XG4gIERyaWxsZG93bk1hcCxcbiAgUmVwb3J0YWxCYXNlXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgRHJpbGxkb3duTWFwXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbWFpbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 1 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ReportalBase = function () {\n  function ReportalBase() {\n    _classCallCheck(this, ReportalBase);\n  }\n\n  _createClass(ReportalBase, null, [{\n    key: 'mixin',\n\n\n    /**\n     * Copies props from a source object to a target object.\n     *\n     * Note, this method uses a simple `for...in` strategy for enumerating\n     * properties.  To ensure only `ownProperties` are copied from source\n     * to target and that accessor implementations are copied, use `extend`.\n     *\n     * @method mixin\n     * @param {Object} target Target object to copy properties to.\n     * @param {Object} source Source object to copy properties from.\n     * @return {Object} Target object that was passed as first argument.\n     */\n    value: function mixin(target, source) {\n      for (var i in source) {\n        target[i] = source[i];\n      }\n      return target;\n    }\n  }, {\n    key: '_logger',\n    value: function _logger(level, args) {\n      // accept ['foo', 'bar'] and [['foo', 'bar']]\n      if (args.length === 1 && Array.isArray(args[0])) {\n        args = args[0];\n      }\n      // only accept logging functions\n      switch (level) {\n        case 'log':\n        case 'warn':\n        case 'error':\n          console[level].apply(console, args);\n          break;\n      }\n    }\n  }, {\n    key: '_log',\n    value: function _log() {\n      var args = Array.prototype.slice.call(arguments, 0);\n      this._logger('log', args);\n    }\n  }, {\n    key: '_warn',\n    value: function _warn() {\n      var args = Array.prototype.slice.call(arguments, 0);\n      this._logger('warn', args);\n    }\n  }, {\n    key: '_error',\n    value: function _error() {\n      var args = Array.prototype.slice.call(arguments, 0);\n      this._logger('error', args);\n    }\n\n    /**\n     * Creates a named event with `name`\n     * @param {String} name - name of the event\n     * @return {Event} Returns a created event\n     * */\n\n  }, {\n    key: 'newEvent',\n    value: function newEvent(name) {\n      var event = document.createEvent('Event');\n      event.initEvent(name, true, true);\n      return event;\n    }\n\n    /**\n     * Inspects if the current string might be converted to number and renders it as number. If string length is 0, returns `null`. If none applies returns the string as is.\n     * @param {String} str - value of the cell if not HTML contents\n     * @return {Number|null|String}\n     * */\n\n  }, {\n    key: 'isNumber',\n    value: function isNumber(str) {\n      if (!isNaN(parseFloat(str))) {\n        str = str.replace(/,/i, ''); // remove unnecessary comma as a delimiter for thousands from data.\n        return parseFloat(str);\n      } else if (str.length == 0) {\n        return null;\n      } else {\n        return str;\n      }\n    }\n\n    /**\n     * Creates an XHR wrapped in a Promise\n     * @param {!String} URL - url to send a `GET` request to\n     * @return {Promise} Returns a then-able promise with `XMLHttpRequest.responseText`\n     * */\n\n  }, {\n    key: 'promiseRequest',\n    value: function promiseRequest(URL) {\n      return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', URL, true);\n        xhr.onload = function (e) {\n          xhr.status == 200 ? resolve(xhr.responseText) : reject(Error(xhr.status + ': ' + xhr.statusText));\n        };\n        xhr.onerror = function (e) {\n          reject(e);\n        };\n        xhr.send();\n      });\n    }\n\n    /**\n     * Gets a variable listed in query string\n     * @param {!String} variable - variable name to get value for\n     * @param {String=} [query=window.location.search.substring(1)] - the query string to search variable for in\n     * @return {String} Returns value for the variable\n     * */\n\n  }, {\n    key: 'getQueryVariable',\n    value: function getQueryVariable(variable) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.location.search.substring(1);\n\n      var vars = query.split(\"&\");\n      for (var i = 0; i < vars.length; i++) {\n        var pair = vars[i].split(\"=\");\n        if (pair[0].toLowerCase() == variable.toLowerCase()) {\n          return pair[1];\n        }\n      }\n      return null;\n    }\n  }]);\n\n  return ReportalBase;\n}();\n\nexports.default = ReportalBase;\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\r\nreated by IvanP on 21.09.2016.\r\nn\n\nvar _rReportalBase = __webpack_require__(1);\n\nvar _rReportalBase2 = _interopRequireDefault(_rReportalBase);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n//import TableDataRowMeta from \"./TableDataRowMeta\";\n\n/**\r\n * A base class for stripping data from HTML tables\r\n * */\nvar TableData = function () {\n  function TableData() {\n    _classCallCheck(this, TableData);\n  }\n\n  _createClass(TableData, null, [{\n    key: 'detectMultidimensional',\n\n    /**\r\n     * Detects if the dataset is multi-dimentional and sets classes on items: a rowspanning cell gets a `.blockCell` and the row containing it a `.firstInBlock`\r\n     * __Doesn't work with `Horizontal Percents` enabled!__\r\n     * @param {HTMLTableElement} source - source table\r\n     * @return {Boolean} Returns if the data in table is multi-dimentional\r\n     * */\n    value: function detectMultidimensional(source) {\n      var multidimensional = false;\n      var blocks = source.parentNode.querySelectorAll('table#' + source.id + '>tbody>tr>td:nth-child(1)[rowspan]');\n      if (blocks.length > 0) {\n        multidimensional = true;\n        [].slice.call(blocks).forEach(function (blockCell) {\n          blockCell.classList.add('blockCell');\n          blockCell.parentNode.classList.add('firstInBlock');\n        });\n      }\n      return multidimensional;\n    }\n\n    /**\r\n     * Extracts data from a given cell. Override in an inherited class if you need to add any metadata to it.\r\n     * @param {HTMLTableCellElement} cell - cell element to have data stripped off it\r\n     * @param {HTMLTableCellElement} rowIndex - index of the row it's in\r\n     * @param {HTMLTableCellElement} columnIndex - index of the column it's in\r\n     * @returns {?String|?Number} Returns a `String`, a `Number` or a `null` (if data is absent in the cell or its text content boils down to an empty string - i.e. there are no characters in the cell, only HTML tags)\r\n     * */\n\n  }, {\n    key: 'prepareDataCell',\n    value: function prepareDataCell(cell, rowIndex, columnIndex) {\n      return _rReportalBase2.default.isNumber(cell.textContent.trim());\n      /*return {\r\n          cell,\r\n          data: ReportalBase.isNumber(cell.textContent.trim()),\r\n          rowIndex,\r\n          columnIndex\r\n        }*/\n    }\n\n    /**\r\n     * A universal data-extraction function. It strips data from a table's body. Data can be stripped by rows (horizontally) or by columns (vertically) which is controlled by `direction`. It accounts for a spanning block cell and may exclude it.\r\n     * @param {Object} options - options to configure the way data is stripped off the table\r\n     * @param {HTMLTableElement} options.source - source table that will be an input for data stripping\r\n     * @param {String=} options.direction='row' - direction in which data stripping will occur: `row` strips across rows and presents an array where each array item is an array of cell values. `column` strips values verticaly in a column, the resulting array will contain arrays (per column) with values resembling normalized data for cells in the column\r\n     * @param {Boolean=} [options.excludeBlock=true] - if table contains block cells that rowspan across several rows, we might need to exclude those from actual data\r\n     * @param {Array|Number} [options.excludeColumns] - if table contains columns that are not to be in data, then pass a single index or an array of cell indices (0-based). You need to count columns not by headers but by the cells in rows.\r\n     * @param {Array|Number} [options.excludeRows] - if table contains rows that are not to be in data, then pass a single index or an array of row indices (0-based). You need to count only rows that contain data, not the table-header rows.\r\n     * @param {Boolean=} options.multidimensional=false - whether the table has aggregating cells that aggregate rowheaders. Result of {@link TableData#detectMultidimensional} may be passed here to automatically calculate if it has aggregating cells.\r\n     * @returns {Array} returns data array.\r\n     * */\n\n  }, {\n    key: 'getData',\n    value: function getData(options) {\n      var _this = this;\n\n      var source = options.source,\n          _options$excludeBlock = options.excludeBlock,\n          excludeBlock = _options$excludeBlock === undefined ? true : _options$excludeBlock,\n          excludeColumns = options.excludeColumns,\n          excludeRows = options.excludeRows,\n          _options$direction = options.direction,\n          direction = _options$direction === undefined ? 'row' : _options$direction,\n          _options$multidimensi = options.multidimensional,\n          multidimensional = _options$multidimensi === undefined ? false : _options$multidimensi;\n\n      var data = [];\n      if (source && source.tagName == 'TABLE') {\n        (function () {\n          var rows = [].slice.call(source.parentNode.querySelectorAll('table#' + source.id + '>tbody>tr'));\n          if (rows.length > 0) {\n            (function () {\n              var tempArray = [];\n              // account for a negative row number (`-1`) meaning last row\n              if ((typeof excludeRows === 'undefined' ? 'undefined' : _typeof(excludeRows)) != undefined) {\n                if (typeof excludeRows == 'number') {\n                  // for non-block rows in multidimensional\n                  if (excludeRows < 0) {\n                    // account for a negative column number (e.g.`-1`) meaning last column\n                    excludeRows = rows.length + excludeRows;\n                  }\n                  rows.splice(excludeRows, 1);\n                }\n                if (Array.isArray(excludeRows)) {\n                  excludeRows.sort(function (a, b) {\n                    return a > b ? 1 : -1;\n                  }).reverse(); //sort to splice from the end of the array\n                  excludeRows.forEach(function (i) {\n                    if (i >= 0) {\n                      rows.splice(i, 1);\n                    } else {\n                      rows.splice(rows.length + i, 1);\n                    }\n                  });\n                }\n              }\n              rows.forEach(function (row, rowIndex) {\n                if (multidimensional) {\n                  // we need to check if the `tempArray` is not empty and push it to the `data` array, because we've encountered a new block, so the old block has to be pushed to data. Then we need to create a new block array and push there\n                  if (row.classList.contains('firstInBlock')) {\n                    if (Array.isArray(tempArray) && tempArray.length > 0) {\n                      data.push(tempArray);\n                    }\n                    tempArray = [];\n                  }\n                }\n\n                if (direction == 'row' && !Array.isArray(tempArray[tempArray.length])) {\n                  // if a row in an array doesn't exist create it\n                  tempArray[tempArray.length] = [];\n                }\n\n                // calculate which cells to exclude\n                var cells = [].slice.call(row.children);\n                var temp_excludeColumns = excludeColumns;\n                if ((typeof temp_excludeColumns === 'undefined' ? 'undefined' : _typeof(temp_excludeColumns)) != undefined) {\n                  if (typeof temp_excludeColumns == 'number') {\n                    // for non-block rows in multidimensional\n                    if (multidimensional && !row.classList.contains('firstInBlock') && !temp_excludeColumns < 0) {\n                      temp_excludeColumns = temp_excludeColumns + 1;\n                    }\n                    if (temp_excludeColumns < 0) {\n                      // account for a negative column number (e.g.`-1`) meaning last column\n                      temp_excludeColumns = cells.length + temp_excludeColumns;\n                    }\n                    cells.splice(temp_excludeColumns, 1);\n                  }\n                  if (Array.isArray(temp_excludeColumns)) {\n                    temp_excludeColumns.sort(function (a, b) {\n                      return a > b ? 1 : -1;\n                    }).reverse();\n                    temp_excludeColumns.forEach(function (i) {\n                      if (i >= 0) {\n                        cells.splice(multidimensional && !row.classList.contains('firstInBlock') ? i + 1 : i, 1);\n                      } else {\n                        cells.splice(cells.length + i, 1);\n                      }\n                    });\n                  }\n                }\n\n                cells.forEach(function (cell, index) {\n\n                  // we want to run this every row because number of cells in each row may differ and we want to exclude the last one\n                  if (typeof direction == 'string' && direction == 'row') {\n                    //if we strip data horizontally by row\n                    if (!(multidimensional && excludeBlock && cell.rowSpan > 1)) {\n                      // if it's a block cell we'd exclude it from data\n                      tempArray[tempArray.length - 1].push(_this.prepareDataCell(cell, rowIndex, index));\n                    }\n                  } else if (typeof direction == 'string' && direction == 'column') {\n                    //if we strip data vertically by column\n                    var realIndex = index;\n                    if (!(multidimensional && excludeBlock && cell.rowSpan > 1)) {\n                      //exclude block cell\n                      realIndex += !row.classList.contains('firstInBlock') ? 0 : -1; // offset cell that follows block cell one position back\n                      if (!Array.isArray(tempArray[realIndex])) {\n                        //create column array for current column if not available\n                        tempArray[realIndex] = [];\n                      }\n                      tempArray[realIndex].push(_this.prepareDataCell(cell, rowIndex, realIndex));\n                    }\n                  } else {\n                    throw new TypeError('direction has tobe a String==`row | column`, not a ${direction}');\n                  }\n                });\n              });\n              //we need to push the last block Array because there'll be no `.firstInBlock` anymore to do that\n              if (multidimensional && Array.isArray(tempArray) && tempArray.length > 0) {\n                data.push(tempArray);\n              } else {\n                data = tempArray;\n              }\n            })();\n          } else {\n            throw new Error('table#' + source.id + '\\'s body must contain rows');\n          }\n        })();\n      } else {\n        throw new TypeError('source must be defined and be a table');\n      }\n      return data;\n    }\n  }]);\n\n  return TableData;\n}();\n\nexports.default = TableData;\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 3 */
/***/ function(module, exports) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * Created by IvanP on 17.08.2016.\r\n */\n/**\r\n * @property {HTMLTableRowElement} row - reference to the `<tr>` element\r\n * @property {?String} id - internal Reportal id for the rowheader in the row\r\n * @property {!HTMLTableCellElement} nameCell - reference to the `<td>` element that contains the rowheader label/name\r\n * @property {String} [name=nameCell.textContent] - label of the rowheader.\r\n * @property {?Object} [block=null] - the block the row belongs to\r\n * @property {Boolean} firstInBlock - this `row` is first in the `block`, which means it contains the first cell as a block cell\r\n * */\nvar AggregatedTableRowMeta =\n/**\r\n * Builds a prototype for each row of an Aggregated Table\r\n * @param {HTMLTableRowElement} row - reference to the `<tr>` element\r\n * @param {?String} id - internal Reportal id for the rowheader in the row\r\n * @param {!HTMLTableCellElement} nameCell - reference to the `<td>` element that contains the rowheader label/name\r\n * @param {String=} [name=nameCell.textContent] - label of the rowheader.\r\n * @param {?Object} [block=null] - the block the row belongs to\r\n * */\nfunction AggregatedTableRowMeta() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      row = _ref.row,\n      _ref$id = _ref.id,\n      id = _ref$id === undefined ? null : _ref$id,\n      nameCell = _ref.nameCell,\n      name = _ref.name,\n      _ref$block = _ref.block,\n      block = _ref$block === undefined ? null : _ref$block;\n\n  _classCallCheck(this, AggregatedTableRowMeta);\n\n  /*** @property {HTMLTableRowElement} row - reference to the `<tr>` element*/\n  this.row = row;\n  this.id = id;\n  this.nameCell = nameCell;\n  this.name = name || nameCell.textContent.trim();\n  this.block = block;\n  this.firstInBlock = block != null && this.row.rowIndex === this.block.cell.parentNode.rowIndex;\n}\n/*get firstInBlock(){\r\n  return this._firstInBlock;\r\n}\r\nset firstInBlock(val){\r\n  this._firstInBlock = val;\r\n  val?this.row.classList.add('firstInBlock'):this.row.classList.remove('firstInBlock');\r\n}*/\n;\n\nexports.default = AggregatedTableRowMeta;\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3ItYWdncmVnYXRlZC10YWJsZS9zcmMvYWdncmVnYXRlZC10YWJsZS1yb3ctbWV0YS5qcz80NmViIl0sIm5hbWVzIjpbIkFnZ3JlZ2F0ZWRUYWJsZVJvd01ldGEiLCJyb3ciLCJpZCIsIm5hbWVDZWxsIiwibmFtZSIsImJsb2NrIiwidGV4dENvbnRlbnQiLCJ0cmltIiwiZmlyc3RJbkJsb2NrIiwicm93SW5kZXgiLCJjZWxsIiwicGFyZW50Tm9kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7O0FBR0E7Ozs7Ozs7O0lBUU1BLHNCO0FBQ0o7Ozs7Ozs7O0FBUUEsa0NBQTBEO0FBQUEsaUZBQUgsRUFBRztBQUFBLE1BQTdDQyxHQUE2QyxRQUE3Q0EsR0FBNkM7QUFBQSxxQkFBeENDLEVBQXdDO0FBQUEsTUFBeENBLEVBQXdDLDJCQUFyQyxJQUFxQztBQUFBLE1BQS9CQyxRQUErQixRQUEvQkEsUUFBK0I7QUFBQSxNQUFyQkMsSUFBcUIsUUFBckJBLElBQXFCO0FBQUEsd0JBQWZDLEtBQWU7QUFBQSxNQUFmQSxLQUFlLDhCQUFULElBQVM7O0FBQUE7O0FBQ3hEO0FBQ0EsT0FBS0osR0FBTCxHQUFXQSxHQUFYO0FBQ0EsT0FBS0MsRUFBTCxHQUFVQSxFQUFWO0FBQ0EsT0FBS0MsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxPQUFLQyxJQUFMLEdBQVlBLFFBQVFELFNBQVNHLFdBQVQsQ0FBcUJDLElBQXJCLEVBQXBCO0FBQ0EsT0FBS0YsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsT0FBS0csWUFBTCxHQUFvQkgsU0FBTyxJQUFQLElBQWUsS0FBS0osR0FBTCxDQUFTUSxRQUFULEtBQXNCLEtBQUtKLEtBQUwsQ0FBV0ssSUFBWCxDQUFnQkMsVUFBaEIsQ0FBMkJGLFFBQXBGO0FBQ0Q7QUFDRDs7Ozs7Ozs7O2tCQVFhVCxzQiIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSXZhblAgb24gMTcuMDguMjAxNi5cclxuICovXHJcbi8qKlxyXG4gKiBAcHJvcGVydHkge0hUTUxUYWJsZVJvd0VsZW1lbnR9IHJvdyAtIHJlZmVyZW5jZSB0byB0aGUgYDx0cj5gIGVsZW1lbnRcclxuICogQHByb3BlcnR5IHs/U3RyaW5nfSBpZCAtIGludGVybmFsIFJlcG9ydGFsIGlkIGZvciB0aGUgcm93aGVhZGVyIGluIHRoZSByb3dcclxuICogQHByb3BlcnR5IHshSFRNTFRhYmxlQ2VsbEVsZW1lbnR9IG5hbWVDZWxsIC0gcmVmZXJlbmNlIHRvIHRoZSBgPHRkPmAgZWxlbWVudCB0aGF0IGNvbnRhaW5zIHRoZSByb3doZWFkZXIgbGFiZWwvbmFtZVxyXG4gKiBAcHJvcGVydHkge1N0cmluZ30gW25hbWU9bmFtZUNlbGwudGV4dENvbnRlbnRdIC0gbGFiZWwgb2YgdGhlIHJvd2hlYWRlci5cclxuICogQHByb3BlcnR5IHs/T2JqZWN0fSBbYmxvY2s9bnVsbF0gLSB0aGUgYmxvY2sgdGhlIHJvdyBiZWxvbmdzIHRvXHJcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZmlyc3RJbkJsb2NrIC0gdGhpcyBgcm93YCBpcyBmaXJzdCBpbiB0aGUgYGJsb2NrYCwgd2hpY2ggbWVhbnMgaXQgY29udGFpbnMgdGhlIGZpcnN0IGNlbGwgYXMgYSBibG9jayBjZWxsXHJcbiAqICovXHJcbmNsYXNzIEFnZ3JlZ2F0ZWRUYWJsZVJvd01ldGEge1xyXG4gIC8qKlxyXG4gICAqIEJ1aWxkcyBhIHByb3RvdHlwZSBmb3IgZWFjaCByb3cgb2YgYW4gQWdncmVnYXRlZCBUYWJsZVxyXG4gICAqIEBwYXJhbSB7SFRNTFRhYmxlUm93RWxlbWVudH0gcm93IC0gcmVmZXJlbmNlIHRvIHRoZSBgPHRyPmAgZWxlbWVudFxyXG4gICAqIEBwYXJhbSB7P1N0cmluZ30gaWQgLSBpbnRlcm5hbCBSZXBvcnRhbCBpZCBmb3IgdGhlIHJvd2hlYWRlciBpbiB0aGUgcm93XHJcbiAgICogQHBhcmFtIHshSFRNTFRhYmxlQ2VsbEVsZW1lbnR9IG5hbWVDZWxsIC0gcmVmZXJlbmNlIHRvIHRoZSBgPHRkPmAgZWxlbWVudCB0aGF0IGNvbnRhaW5zIHRoZSByb3doZWFkZXIgbGFiZWwvbmFtZVxyXG4gICAqIEBwYXJhbSB7U3RyaW5nPX0gW25hbWU9bmFtZUNlbGwudGV4dENvbnRlbnRdIC0gbGFiZWwgb2YgdGhlIHJvd2hlYWRlci5cclxuICAgKiBAcGFyYW0gez9PYmplY3R9IFtibG9jaz1udWxsXSAtIHRoZSBibG9jayB0aGUgcm93IGJlbG9uZ3MgdG9cclxuICAgKiAqL1xyXG4gIGNvbnN0cnVjdG9yKHtyb3csIGlkPW51bGwsIG5hbWVDZWxsLCBuYW1lLCBibG9jaz1udWxsfT17fSl7XHJcbiAgICAvKioqIEBwcm9wZXJ0eSB7SFRNTFRhYmxlUm93RWxlbWVudH0gcm93IC0gcmVmZXJlbmNlIHRvIHRoZSBgPHRyPmAgZWxlbWVudCovXHJcbiAgICB0aGlzLnJvdyA9IHJvdztcclxuICAgIHRoaXMuaWQgPSBpZDtcclxuICAgIHRoaXMubmFtZUNlbGwgPSBuYW1lQ2VsbDtcclxuICAgIHRoaXMubmFtZSA9IG5hbWUgfHwgbmFtZUNlbGwudGV4dENvbnRlbnQudHJpbSgpO1xyXG4gICAgdGhpcy5ibG9jayA9IGJsb2NrO1xyXG4gICAgdGhpcy5maXJzdEluQmxvY2sgPSBibG9jayE9bnVsbCAmJiB0aGlzLnJvdy5yb3dJbmRleCA9PT0gdGhpcy5ibG9jay5jZWxsLnBhcmVudE5vZGUucm93SW5kZXg7XHJcbiAgfVxyXG4gIC8qZ2V0IGZpcnN0SW5CbG9jaygpe1xyXG4gICAgcmV0dXJuIHRoaXMuX2ZpcnN0SW5CbG9jaztcclxuICB9XHJcbiAgc2V0IGZpcnN0SW5CbG9jayh2YWwpe1xyXG4gICAgdGhpcy5fZmlyc3RJbkJsb2NrID0gdmFsO1xyXG4gICAgdmFsP3RoaXMucm93LmNsYXNzTGlzdC5hZGQoJ2ZpcnN0SW5CbG9jaycpOnRoaXMucm93LmNsYXNzTGlzdC5yZW1vdmUoJ2ZpcnN0SW5CbG9jaycpO1xyXG4gIH0qL1xyXG59XHJcbmV4cG9ydCBkZWZhdWx0IEFnZ3JlZ2F0ZWRUYWJsZVJvd01ldGFcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yLWFnZ3JlZ2F0ZWQtdGFibGUvc3JjL2FnZ3JlZ2F0ZWQtdGFibGUtcm93LW1ldGEuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _tableData = __webpack_require__(2);\n\nvar _tableData2 = _interopRequireDefault(_tableData);\n\nvar _rReportalBase = __webpack_require__(1);\n\nvar _rReportalBase2 = _interopRequireDefault(_rReportalBase);\n\nvar _rTableColumns = __webpack_require__(10);\n\nvar _rTableColumns2 = _interopRequireDefault(_rTableColumns);\n\nvar _sortTable = __webpack_require__(8);\n\nvar _sortTable2 = _interopRequireDefault(_sortTable);\n\nvar _tableFloatingHeader = __webpack_require__(12);\n\nvar _tableFloatingHeader2 = _interopRequireDefault(_tableFloatingHeader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by IvanP on 27.09.2016.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar styles = __webpack_require__(16);\nvar aggregatedTableCSS = __webpack_require__(15);\n\n/**\r\n * A base class for aggregated tables. Multidimensional property of data is automatically calculated, thus removed from params.\r\n * @extends TableData\r\n * */\n\nvar AggregatedTable = function (_TableData) {\n  _inherits(AggregatedTable, _TableData);\n\n  /*\r\n   * @param {Object} options - options to configure the way data is stripped off the table\r\n   * @param {HTMLTableElement} options.source - source table that will be an input for data stripping\r\n   * @param {HTMLTableElement} [options.refSource] - a reference to a floating header, if any\r\n   * @param {Number} [options.rowheaderColumnIndex=0] - 0-based index of the column that we need to check against to see if it's a multidimentional table\r\n   * @param {Number|Object=} [options.defaultHeaderRow=-1] - index of the row in `thead` (incremented from 0) that will have sorting enabled for columns. If `-1` then last row.\r\n   * @param {String=} options.dataStripDirection='row' - direction in which data stripping will occur: `row` strips across rows and presents an array where each array item is an array of cell values. `column` strips values verticaly in a column, the resulting array will contain arrays (per column) with values resembling normalized data for cells in the column\r\n   * @param {Boolean=} [options.excludeBlock=true] - if table contains block cells that rowspan across several rows, we might need to exclude those from actual data\r\n   * @param {Array|Number} [options.excludeColumns] - if table contains columns that are not to be in data, then pass a single index or an array of cell indices (0-based). You need to count columns not by headers but by the cells in rows.\r\n   * @param {Array|Number} [options.excludeRows] - if table contains rows that are not to be in data, then pass a single index or an array of row indices (0-based). You need to count only rows that contain data, not the table-header rows.\r\n   * @param {SortTable} options.sorting - sorting options, see {@link SortTable}. If you want to leave all options default but enable sorting, pass an empty object(`.., sorting:{}`), or sorting won't be applied.\r\n   * @param {SortTable} options.floatingHeader - floating header, see {@link SortTable}. If you want to leave all options default but enable sorting, pass an empty object(`.., sorting:{}`), or sorting won't be applied.\r\n   * */\n  function AggregatedTable(options) {\n    _classCallCheck(this, AggregatedTable);\n\n    var source = options.source,\n        rowheaderColumnIndex = options.rowheaderColumnIndex,\n        defaultHeaderRow = options.defaultHeaderRow,\n        dataStripDirection = options.dataStripDirection,\n        excludeBlock = options.excludeBlock,\n        excludeColumns = options.excludeColumns,\n        excludeRows = options.excludeRows,\n        sorting = options.sorting,\n        floatingHeader = options.floatingHeader;\n\n    /**\r\n     *  The source table\r\n     *  @type {HTMLTableElement}\r\n     *  @memberOf AggregatedTable\r\n     *  */\n    var _this = _possibleConstructorReturn(this, (AggregatedTable.__proto__ || Object.getPrototypeOf(AggregatedTable)).call(this));\n\n    _this.source = source;\n    var refSource = void 0;\n    if (floatingHeader && (typeof floatingHeader === \"undefined\" ? \"undefined\" : _typeof(floatingHeader)) == 'object') {\n      _this.floatingHeader = new _tableFloatingHeader2.default(source);\n      /**\r\n       *  The floating header\r\n       *  @type {HTMLTableElement}\r\n       *  @memberOf AggregatedTable\r\n       *  */\n      _this.refSource = refSource = _this.floatingHeader.header;\n    }\n\n    /**\r\n     *  Whether data is monodimensional or multidimensional\r\n     *  @type {Boolean}\r\n     *  @memberOf AggregatedTable\r\n     *  */\n\n    _this.multidimensional = _this.constructor.detectMultidimensional(source);\n\n    /**\r\n     *  data Array\r\n     *  @type {Array.<{cell:HTMLTableCellElement, data:?String|?Number, columnIndex:Number}>}\r\n     *  @memberOf AggregatedTable\r\n     *  */\n    _this.data = _this.constructor.getData({ source: source, refSource: refSource, defaultHeaderRow: defaultHeaderRow, excludeBlock: excludeBlock, excludeColumns: excludeColumns, excludeRows: excludeRows, direction: dataStripDirection, multidimensional: _this.multidimensional });\n\n    if (sorting && (typeof sorting === \"undefined\" ? \"undefined\" : _typeof(sorting)) == 'object') {\n      (function () {\n        var reorderFunction = function reorderFunction(e) {\n          return _this.constructor.reorderRows(_this.data, _this.source, _this.multidimensional);\n        };\n        [source, refSource].forEach(function (target) {\n          if (target) {\n            target.addEventListener('reportal-table-sort', reorderFunction);\n          }\n        });\n\n        sorting.source = source;\n        sorting.refSource = refSource;\n        sorting.defaultHeaderRow = defaultHeaderRow;\n        sorting.data = _this.data;\n        sorting.multidimensional = _this.multidimensional;\n\n        /**\r\n         *  sorting object. See {@link SortTable}\r\n         *  @type {SortTable}\r\n         *  @memberOf AggregatedTable\r\n         *  */\n        _this.sorting = new _sortTable2.default(sorting);\n\n        // add listener to do reordering on sorting\n      })();\n    }\n\n    /**\r\n     * table columns array\r\n     * @type {Array.<{index:Number, title:String, colSpan:Number, cell: HTMLTableCellElement, ?refCell:HTMLTableCellElement}>}\r\n     * @memberOf AggregatedTable\r\n     * */\n    _this.columns = _this.sorting && _this.sorting.columns ? _this.sorting.columns : new _rTableColumns2.default({ source: source, refSource: refSource, defaultHeaderRow: defaultHeaderRow });\n    return _this;\n  }\n\n  /**\r\n   * Extracts data from a given cell. Override in an inherited class if you need to add any metadata to it.\r\n   * @param {HTMLTableCellElement} cell - cell element to have data stripped off it\r\n   * @param {HTMLTableCellElement} rowIndex - index of the row it's in\r\n   * @param {HTMLTableCellElement} columnIndex - index of the column it's in\r\n   * @returns {{cell:HTMLTableCellElement, ?data:String|Number, columnIndex:Number}} Returns an object `{cell:HTMLTableCellElement, data:?String|?Number, columnIndex:Number}` (if data is absent in the cell or its text content boils down to an empty string - i.e. there are no characters in the cell, only HTML tags) it returns null in `data`\r\n   * @override\r\n   * */\n\n\n  _createClass(AggregatedTable, null, [{\n    key: \"prepareDataCell\",\n    value: function prepareDataCell(cell, rowIndex, columnIndex) {\n      return {\n        cell: cell,\n        data: _rReportalBase2.default.isNumber(cell.textContent.trim()),\n        columnIndex: columnIndex,\n        rowIndex: rowIndex\n      };\n    }\n\n    /**\r\n     * This function takes care of repositioning rows in the table to match the `data` array in the way it was sorted and if the data is separated into blocks, then move the block piece to the first row in each data block.\r\n     * @param {Array} data - full sorted dataset. Instance of {@link TableData#getData}\r\n     * @param {HTMLTableElement} source - source table\r\n     * @param {Boolean} multidimensional\r\n     * */\n\n  }, {\n    key: \"reorderRows\",\n    value: function reorderRows(data, source, multidimensional) {\n      var fragment = document.createDocumentFragment();\n      AggregatedTable.dimensionalDataIterator(data, multidimensional, function (dataDimension) {\n        if (multidimensional) {\n          AggregatedTable.repositionBlockCell(dataDimension);\n        } // if multidimensional reposition aggregating block cell to the topmost row in sorted array\n        dataDimension.forEach(function (item) {\n          fragment.appendChild(item[0].cell.parentNode);\n        }); // add row to fragment in the array order, this doesn't account for column stripped data yet\n      });\n      source.querySelector('tbody').appendChild(fragment);\n    }\n\n    /*\r\n     * Repositions the rowspanning block cell from the initial row to the new sorted row\r\n     * @param {Array} items - dimension of data\r\n     * */\n\n  }, {\n    key: \"repositionBlockCell\",\n    value: function repositionBlockCell(items) {\n      var blockRowItem = items.filter(function (item) {\n        return item[0].cell.parentNode.classList.contains('firstInBlock');\n      })[0];\n      var blockRow = blockRowItem[0].cell.parentNode;\n      if (items.indexOf(blockRowItem) != 0) {\n        // if block row isn't first in dimension\n        var newFirstRow = items[0][0].cell.parentNode;\n        newFirstRow.insertBefore(blockRow.querySelector('.blockCell'), newFirstRow.firstElementChild); // move block cell\n        newFirstRow.classList.add('firstInBlock');\n        blockRow.classList.remove('firstInBlock');\n      }\n    }\n\n    /**\r\n     * allows to perform action on data based on its multidimensionality\r\n     * @param {Array} data - full dataset. Instance of {@link TableData#getData}\r\n     * @param {Boolean} multidimensional\r\n     * @param {!Function} callback - a function to be executed on a dimension of data. Callback is called with two attributes: `dimension` - the current iteration of data and `index` (optional) if it's multidimensional\r\n     * */\n\n  }, {\n    key: \"dimensionalDataIterator\",\n    value: function dimensionalDataIterator(data, multidimensional, callback) {\n      if (!callback || typeof callback != 'function') {\n        throw new TypeError('`callback` must be passed and be a function');\n      }\n      if (!multidimensional) {\n        return callback(data);\n      } else {\n        // if array has nested array blocks\n        data.forEach(function (dimension, index) {\n          callback(dimension, index);\n        });\n      }\n    }\n  }]);\n\n  return AggregatedTable;\n}(_tableData2.default);\n\nexports.default = AggregatedTable;\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3ItYWdncmVnYXRlZC10YWJsZS9zcmMvYWdncmVnYXRlZC10YWJsZS5qcz8zMDBiIl0sIm5hbWVzIjpbInN0eWxlcyIsInJlcXVpcmUiLCJhZ2dyZWdhdGVkVGFibGVDU1MiLCJBZ2dyZWdhdGVkVGFibGUiLCJvcHRpb25zIiwic291cmNlIiwicm93aGVhZGVyQ29sdW1uSW5kZXgiLCJkZWZhdWx0SGVhZGVyUm93IiwiZGF0YVN0cmlwRGlyZWN0aW9uIiwiZXhjbHVkZUJsb2NrIiwiZXhjbHVkZUNvbHVtbnMiLCJleGNsdWRlUm93cyIsInNvcnRpbmciLCJmbG9hdGluZ0hlYWRlciIsInJlZlNvdXJjZSIsImhlYWRlciIsIm11bHRpZGltZW5zaW9uYWwiLCJjb25zdHJ1Y3RvciIsImRldGVjdE11bHRpZGltZW5zaW9uYWwiLCJkYXRhIiwiZ2V0RGF0YSIsImRpcmVjdGlvbiIsInJlb3JkZXJGdW5jdGlvbiIsInJlb3JkZXJSb3dzIiwiZm9yRWFjaCIsInRhcmdldCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjb2x1bW5zIiwiY2VsbCIsInJvd0luZGV4IiwiY29sdW1uSW5kZXgiLCJpc051bWJlciIsInRleHRDb250ZW50IiwidHJpbSIsImZyYWdtZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiZGltZW5zaW9uYWxEYXRhSXRlcmF0b3IiLCJkYXRhRGltZW5zaW9uIiwicmVwb3NpdGlvbkJsb2NrQ2VsbCIsImFwcGVuZENoaWxkIiwiaXRlbSIsInBhcmVudE5vZGUiLCJxdWVyeVNlbGVjdG9yIiwiaXRlbXMiLCJibG9ja1Jvd0l0ZW0iLCJmaWx0ZXIiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImJsb2NrUm93IiwiaW5kZXhPZiIsIm5ld0ZpcnN0Um93IiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJhZGQiLCJyZW1vdmUiLCJjYWxsYmFjayIsIlR5cGVFcnJvciIsImRpbWVuc2lvbiIsImluZGV4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBSUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7OzsrZUFSQTs7OztBQVVBLElBQUlBLFNBQVMsbUJBQUFDLENBQVEsRUFBUixDQUFiO0FBQ0EsSUFBSUMscUJBQXFCLG1CQUFBRCxDQUFRLEVBQVIsQ0FBekI7O0FBRUE7Ozs7O0lBSU1FLGU7OztBQUNKOzs7Ozs7Ozs7Ozs7O0FBYUEsMkJBQVlDLE9BQVosRUFBb0I7QUFBQTs7QUFBQSxRQUVoQkMsTUFGZ0IsR0FNZEQsT0FOYyxDQUVoQkMsTUFGZ0I7QUFBQSxRQUdoQkMsb0JBSGdCLEdBTWRGLE9BTmMsQ0FHaEJFLG9CQUhnQjtBQUFBLFFBR0tDLGdCQUhMLEdBTWRILE9BTmMsQ0FHS0csZ0JBSEw7QUFBQSxRQUdzQkMsa0JBSHRCLEdBTWRKLE9BTmMsQ0FHc0JJLGtCQUh0QjtBQUFBLFFBR3lDQyxZQUh6QyxHQU1kTCxPQU5jLENBR3lDSyxZQUh6QztBQUFBLFFBR3NEQyxjQUh0RCxHQU1kTixPQU5jLENBR3NETSxjQUh0RDtBQUFBLFFBR3FFQyxXQUhyRSxHQU1kUCxPQU5jLENBR3FFTyxXQUhyRTtBQUFBLFFBSWhCQyxPQUpnQixHQU1kUixPQU5jLENBSWhCUSxPQUpnQjtBQUFBLFFBS2hCQyxjQUxnQixHQU1kVCxPQU5jLENBS2hCUyxjQUxnQjs7QUFTbEI7Ozs7O0FBVGtCOztBQWNsQixVQUFLUixNQUFMLEdBQWNBLE1BQWQ7QUFDQSxRQUFJUyxrQkFBSjtBQUNBLFFBQUdELGtCQUFrQixRQUFPQSxjQUFQLHlDQUFPQSxjQUFQLE1BQXVCLFFBQTVDLEVBQXFEO0FBQ25ELFlBQUtBLGNBQUwsR0FBc0Isa0NBQXdCUixNQUF4QixDQUF0QjtBQUNBOzs7OztBQUtBLFlBQUtTLFNBQUwsR0FBaUJBLFlBQVksTUFBS0QsY0FBTCxDQUFvQkUsTUFBakQ7QUFDRDs7QUFFRDs7Ozs7O0FBTUEsVUFBS0MsZ0JBQUwsR0FBd0IsTUFBS0MsV0FBTCxDQUFpQkMsc0JBQWpCLENBQXdDYixNQUF4QyxDQUF4Qjs7QUFFQTs7Ozs7QUFLQSxVQUFLYyxJQUFMLEdBQVksTUFBS0YsV0FBTCxDQUFpQkcsT0FBakIsQ0FBeUIsRUFBQ2YsY0FBRCxFQUFRUyxvQkFBUixFQUFrQlAsa0NBQWxCLEVBQW1DRSwwQkFBbkMsRUFBZ0RDLDhCQUFoRCxFQUErREMsd0JBQS9ELEVBQTJFVSxXQUFVYixrQkFBckYsRUFBd0dRLGtCQUFrQixNQUFLQSxnQkFBL0gsRUFBekIsQ0FBWjs7QUFHQSxRQUFHSixXQUFXLFFBQU9BLE9BQVAseUNBQU9BLE9BQVAsTUFBa0IsUUFBaEMsRUFBeUM7QUFBQTtBQUN2QyxZQUFJVSxrQkFBa0IsU0FBbEJBLGVBQWtCLElBQUc7QUFDdkIsaUJBQU8sTUFBS0wsV0FBTCxDQUFpQk0sV0FBakIsQ0FBNkIsTUFBS0osSUFBbEMsRUFBdUMsTUFBS2QsTUFBNUMsRUFBbUQsTUFBS1csZ0JBQXhELENBQVA7QUFDRCxTQUZEO0FBR0EsU0FBQ1gsTUFBRCxFQUFRUyxTQUFSLEVBQW1CVSxPQUFuQixDQUEyQixrQkFBUTtBQUNqQyxjQUFHQyxNQUFILEVBQVU7QUFDUkEsbUJBQU9DLGdCQUFQLENBQXdCLHFCQUF4QixFQUErQ0osZUFBL0M7QUFDRDtBQUNGLFNBSkQ7O0FBTUFWLGdCQUFRUCxNQUFSLEdBQWlCQSxNQUFqQjtBQUNBTyxnQkFBUUUsU0FBUixHQUFvQkEsU0FBcEI7QUFDQUYsZ0JBQVFMLGdCQUFSLEdBQTJCQSxnQkFBM0I7QUFDQUssZ0JBQVFPLElBQVIsR0FBYSxNQUFLQSxJQUFsQjtBQUNBUCxnQkFBUUksZ0JBQVIsR0FBMkIsTUFBS0EsZ0JBQWhDOztBQUVBOzs7OztBQUtBLGNBQUtKLE9BQUwsR0FBZSx3QkFBY0EsT0FBZCxDQUFmOztBQUVBO0FBdkJ1QztBQXdCeEM7O0FBRUQ7Ozs7O0FBS0EsVUFBS2UsT0FBTCxHQUFlLE1BQUtmLE9BQUwsSUFBZ0IsTUFBS0EsT0FBTCxDQUFhZSxPQUE3QixHQUFzQyxNQUFLZixPQUFMLENBQWFlLE9BQW5ELEdBQTZELDRCQUFpQixFQUFDdEIsY0FBRCxFQUFRUyxvQkFBUixFQUFrQlAsa0NBQWxCLEVBQWpCLENBQTVFO0FBekVrQjtBQTBFbkI7O0FBR0Q7Ozs7Ozs7Ozs7OztvQ0FRdUJxQixJLEVBQU1DLFEsRUFBVUMsVyxFQUFZO0FBQ2pELGFBQU87QUFDTEYsa0JBREs7QUFFTFQsY0FBTSx3QkFBYVksUUFBYixDQUFzQkgsS0FBS0ksV0FBTCxDQUFpQkMsSUFBakIsRUFBdEIsQ0FGRDtBQUdMSCxnQ0FISztBQUlMRDtBQUpLLE9BQVA7QUFNRDs7QUFFRDs7Ozs7Ozs7O2dDQU1tQlYsSSxFQUFLZCxNLEVBQU9XLGdCLEVBQWlCO0FBQzlDLFVBQUlrQixXQUFXQyxTQUFTQyxzQkFBVCxFQUFmO0FBQ0FqQyxzQkFBZ0JrQyx1QkFBaEIsQ0FBd0NsQixJQUF4QyxFQUE2Q0gsZ0JBQTdDLEVBQThELFVBQUNzQixhQUFELEVBQWlCO0FBQzdFLFlBQUd0QixnQkFBSCxFQUFvQjtBQUFDYiwwQkFBZ0JvQyxtQkFBaEIsQ0FBb0NELGFBQXBDO0FBQW1ELFNBREssQ0FDSjtBQUN6RUEsc0JBQWNkLE9BQWQsQ0FBc0IsZ0JBQU07QUFBQ1UsbUJBQVNNLFdBQVQsQ0FBcUJDLEtBQUssQ0FBTCxFQUFRYixJQUFSLENBQWFjLFVBQWxDO0FBQThDLFNBQTNFLEVBRjZFLENBRUM7QUFDL0UsT0FIRDtBQUlBckMsYUFBT3NDLGFBQVAsQ0FBcUIsT0FBckIsRUFBOEJILFdBQTlCLENBQTBDTixRQUExQztBQUNEOztBQUVEOzs7Ozs7O3dDQUkyQlUsSyxFQUFNO0FBQy9CLFVBQUlDLGVBQWVELE1BQU1FLE1BQU4sQ0FBYTtBQUFBLGVBQU1MLEtBQUssQ0FBTCxFQUFRYixJQUFSLENBQWFjLFVBQWIsQ0FBd0JLLFNBQXhCLENBQWtDQyxRQUFsQyxDQUEyQyxjQUEzQyxDQUFOO0FBQUEsT0FBYixFQUErRSxDQUEvRSxDQUFuQjtBQUNBLFVBQUlDLFdBQVdKLGFBQWEsQ0FBYixFQUFnQmpCLElBQWhCLENBQXFCYyxVQUFwQztBQUNBLFVBQUdFLE1BQU1NLE9BQU4sQ0FBY0wsWUFBZCxLQUE2QixDQUFoQyxFQUFrQztBQUFDO0FBQ2pDLFlBQUlNLGNBQWNQLE1BQU0sQ0FBTixFQUFTLENBQVQsRUFBWWhCLElBQVosQ0FBaUJjLFVBQW5DO0FBQ0FTLG9CQUFZQyxZQUFaLENBQXlCSCxTQUFTTixhQUFULENBQXVCLFlBQXZCLENBQXpCLEVBQThEUSxZQUFZRSxpQkFBMUUsRUFGZ0MsQ0FFNkQ7QUFDN0ZGLG9CQUFZSixTQUFaLENBQXNCTyxHQUF0QixDQUEwQixjQUExQjtBQUNBTCxpQkFBU0YsU0FBVCxDQUFtQlEsTUFBbkIsQ0FBMEIsY0FBMUI7QUFDRDtBQUNGOztBQUVEOzs7Ozs7Ozs7NENBTStCcEMsSSxFQUFLSCxnQixFQUFpQndDLFEsRUFBUztBQUM1RCxVQUFHLENBQUNBLFFBQUQsSUFBYSxPQUFPQSxRQUFQLElBQW1CLFVBQW5DLEVBQThDO0FBQUMsY0FBTSxJQUFJQyxTQUFKLENBQWMsNkNBQWQsQ0FBTjtBQUFtRTtBQUNsSCxVQUFHLENBQUN6QyxnQkFBSixFQUFxQjtBQUNuQixlQUFPd0MsU0FBU3JDLElBQVQsQ0FBUDtBQUNELE9BRkQsTUFFTztBQUFFO0FBQ1BBLGFBQUtLLE9BQUwsQ0FBYSxVQUFDa0MsU0FBRCxFQUFXQyxLQUFYLEVBQW1CO0FBQzlCSCxtQkFBU0UsU0FBVCxFQUFtQkMsS0FBbkI7QUFDRCxTQUZEO0FBR0Q7QUFDRjs7Ozs7O2tCQUtZeEQsZSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSXZhblAgb24gMjcuMDkuMjAxNi5cclxuICovXHJcblxyXG5pbXBvcnQgVGFibGVEYXRhIGZyb20gJy4vdGFibGUtZGF0YSc7XHJcbmltcG9ydCBSZXBvcnRhbEJhc2UgZnJvbSBcInItcmVwb3J0YWwtYmFzZVwiO1xyXG5pbXBvcnQgVGFibGVDb2x1bW5zIGZyb20gXCJyLXRhYmxlLWNvbHVtbnNcIjtcclxuaW1wb3J0IFNvcnRUYWJsZSBmcm9tIFwici1zb3J0LXRhYmxlL3NyYy9zb3J0LXRhYmxlXCI7XHJcbmltcG9ydCBUYWJsZUZsb2F0aW5nSGVhZGVyIGZyb20gXCJyLXRhYmxlLWZsb2F0aW5nLWhlYWRlci9zcmMvdGFibGUtZmxvYXRpbmctaGVhZGVyXCI7XHJcblxyXG5sZXQgc3R5bGVzID0gcmVxdWlyZSgnci1zb3J0LXRhYmxlL3NyYy9zb3J0LXRhYmxlLXN0eWxlcy5jc3MnKTtcclxubGV0IGFnZ3JlZ2F0ZWRUYWJsZUNTUyA9IHJlcXVpcmUoJy4vYWdncmVnYXRlZC10YWJsZS5jc3MnKTtcclxuXHJcbi8qKlxyXG4gKiBBIGJhc2UgY2xhc3MgZm9yIGFnZ3JlZ2F0ZWQgdGFibGVzLiBNdWx0aWRpbWVuc2lvbmFsIHByb3BlcnR5IG9mIGRhdGEgaXMgYXV0b21hdGljYWxseSBjYWxjdWxhdGVkLCB0aHVzIHJlbW92ZWQgZnJvbSBwYXJhbXMuXHJcbiAqIEBleHRlbmRzIFRhYmxlRGF0YVxyXG4gKiAqL1xyXG5jbGFzcyBBZ2dyZWdhdGVkVGFibGUgZXh0ZW5kcyBUYWJsZURhdGEge1xyXG4gIC8qXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zIHRvIGNvbmZpZ3VyZSB0aGUgd2F5IGRhdGEgaXMgc3RyaXBwZWQgb2ZmIHRoZSB0YWJsZVxyXG4gICAqIEBwYXJhbSB7SFRNTFRhYmxlRWxlbWVudH0gb3B0aW9ucy5zb3VyY2UgLSBzb3VyY2UgdGFibGUgdGhhdCB3aWxsIGJlIGFuIGlucHV0IGZvciBkYXRhIHN0cmlwcGluZ1xyXG4gICAqIEBwYXJhbSB7SFRNTFRhYmxlRWxlbWVudH0gW29wdGlvbnMucmVmU291cmNlXSAtIGEgcmVmZXJlbmNlIHRvIGEgZmxvYXRpbmcgaGVhZGVyLCBpZiBhbnlcclxuICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMucm93aGVhZGVyQ29sdW1uSW5kZXg9MF0gLSAwLWJhc2VkIGluZGV4IG9mIHRoZSBjb2x1bW4gdGhhdCB3ZSBuZWVkIHRvIGNoZWNrIGFnYWluc3QgdG8gc2VlIGlmIGl0J3MgYSBtdWx0aWRpbWVudGlvbmFsIHRhYmxlXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ8T2JqZWN0PX0gW29wdGlvbnMuZGVmYXVsdEhlYWRlclJvdz0tMV0gLSBpbmRleCBvZiB0aGUgcm93IGluIGB0aGVhZGAgKGluY3JlbWVudGVkIGZyb20gMCkgdGhhdCB3aWxsIGhhdmUgc29ydGluZyBlbmFibGVkIGZvciBjb2x1bW5zLiBJZiBgLTFgIHRoZW4gbGFzdCByb3cuXHJcbiAgICogQHBhcmFtIHtTdHJpbmc9fSBvcHRpb25zLmRhdGFTdHJpcERpcmVjdGlvbj0ncm93JyAtIGRpcmVjdGlvbiBpbiB3aGljaCBkYXRhIHN0cmlwcGluZyB3aWxsIG9jY3VyOiBgcm93YCBzdHJpcHMgYWNyb3NzIHJvd3MgYW5kIHByZXNlbnRzIGFuIGFycmF5IHdoZXJlIGVhY2ggYXJyYXkgaXRlbSBpcyBhbiBhcnJheSBvZiBjZWxsIHZhbHVlcy4gYGNvbHVtbmAgc3RyaXBzIHZhbHVlcyB2ZXJ0aWNhbHkgaW4gYSBjb2x1bW4sIHRoZSByZXN1bHRpbmcgYXJyYXkgd2lsbCBjb250YWluIGFycmF5cyAocGVyIGNvbHVtbikgd2l0aCB2YWx1ZXMgcmVzZW1ibGluZyBub3JtYWxpemVkIGRhdGEgZm9yIGNlbGxzIGluIHRoZSBjb2x1bW5cclxuICAgKiBAcGFyYW0ge0Jvb2xlYW49fSBbb3B0aW9ucy5leGNsdWRlQmxvY2s9dHJ1ZV0gLSBpZiB0YWJsZSBjb250YWlucyBibG9jayBjZWxscyB0aGF0IHJvd3NwYW4gYWNyb3NzIHNldmVyYWwgcm93cywgd2UgbWlnaHQgbmVlZCB0byBleGNsdWRlIHRob3NlIGZyb20gYWN0dWFsIGRhdGFcclxuICAgKiBAcGFyYW0ge0FycmF5fE51bWJlcn0gW29wdGlvbnMuZXhjbHVkZUNvbHVtbnNdIC0gaWYgdGFibGUgY29udGFpbnMgY29sdW1ucyB0aGF0IGFyZSBub3QgdG8gYmUgaW4gZGF0YSwgdGhlbiBwYXNzIGEgc2luZ2xlIGluZGV4IG9yIGFuIGFycmF5IG9mIGNlbGwgaW5kaWNlcyAoMC1iYXNlZCkuIFlvdSBuZWVkIHRvIGNvdW50IGNvbHVtbnMgbm90IGJ5IGhlYWRlcnMgYnV0IGJ5IHRoZSBjZWxscyBpbiByb3dzLlxyXG4gICAqIEBwYXJhbSB7QXJyYXl8TnVtYmVyfSBbb3B0aW9ucy5leGNsdWRlUm93c10gLSBpZiB0YWJsZSBjb250YWlucyByb3dzIHRoYXQgYXJlIG5vdCB0byBiZSBpbiBkYXRhLCB0aGVuIHBhc3MgYSBzaW5nbGUgaW5kZXggb3IgYW4gYXJyYXkgb2Ygcm93IGluZGljZXMgKDAtYmFzZWQpLiBZb3UgbmVlZCB0byBjb3VudCBvbmx5IHJvd3MgdGhhdCBjb250YWluIGRhdGEsIG5vdCB0aGUgdGFibGUtaGVhZGVyIHJvd3MuXHJcbiAgICogQHBhcmFtIHtTb3J0VGFibGV9IG9wdGlvbnMuc29ydGluZyAtIHNvcnRpbmcgb3B0aW9ucywgc2VlIHtAbGluayBTb3J0VGFibGV9LiBJZiB5b3Ugd2FudCB0byBsZWF2ZSBhbGwgb3B0aW9ucyBkZWZhdWx0IGJ1dCBlbmFibGUgc29ydGluZywgcGFzcyBhbiBlbXB0eSBvYmplY3QoYC4uLCBzb3J0aW5nOnt9YCksIG9yIHNvcnRpbmcgd29uJ3QgYmUgYXBwbGllZC5cclxuICAgKiBAcGFyYW0ge1NvcnRUYWJsZX0gb3B0aW9ucy5mbG9hdGluZ0hlYWRlciAtIGZsb2F0aW5nIGhlYWRlciwgc2VlIHtAbGluayBTb3J0VGFibGV9LiBJZiB5b3Ugd2FudCB0byBsZWF2ZSBhbGwgb3B0aW9ucyBkZWZhdWx0IGJ1dCBlbmFibGUgc29ydGluZywgcGFzcyBhbiBlbXB0eSBvYmplY3QoYC4uLCBzb3J0aW5nOnt9YCksIG9yIHNvcnRpbmcgd29uJ3QgYmUgYXBwbGllZC5cclxuICAgKiAqL1xyXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpe1xyXG4gICAgbGV0IHtcclxuICAgICAgc291cmNlLFxyXG4gICAgICByb3doZWFkZXJDb2x1bW5JbmRleCxkZWZhdWx0SGVhZGVyUm93LGRhdGFTdHJpcERpcmVjdGlvbixleGNsdWRlQmxvY2ssZXhjbHVkZUNvbHVtbnMsZXhjbHVkZVJvd3MsXHJcbiAgICAgIHNvcnRpbmcsXHJcbiAgICAgIGZsb2F0aW5nSGVhZGVyXHJcbiAgICB9ID0gb3B0aW9ucztcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAgVGhlIHNvdXJjZSB0YWJsZVxyXG4gICAgICogIEB0eXBlIHtIVE1MVGFibGVFbGVtZW50fVxyXG4gICAgICogIEBtZW1iZXJPZiBBZ2dyZWdhdGVkVGFibGVcclxuICAgICAqICAqL1xyXG4gICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XHJcbiAgICBsZXQgcmVmU291cmNlO1xyXG4gICAgaWYoZmxvYXRpbmdIZWFkZXIgJiYgdHlwZW9mIGZsb2F0aW5nSGVhZGVyPT0nb2JqZWN0Jyl7XHJcbiAgICAgIHRoaXMuZmxvYXRpbmdIZWFkZXIgPSBuZXcgVGFibGVGbG9hdGluZ0hlYWRlcihzb3VyY2UpO1xyXG4gICAgICAvKipcclxuICAgICAgICogIFRoZSBmbG9hdGluZyBoZWFkZXJcclxuICAgICAgICogIEB0eXBlIHtIVE1MVGFibGVFbGVtZW50fVxyXG4gICAgICAgKiAgQG1lbWJlck9mIEFnZ3JlZ2F0ZWRUYWJsZVxyXG4gICAgICAgKiAgKi9cclxuICAgICAgdGhpcy5yZWZTb3VyY2UgPSByZWZTb3VyY2UgPSB0aGlzLmZsb2F0aW5nSGVhZGVyLmhlYWRlcjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqICBXaGV0aGVyIGRhdGEgaXMgbW9ub2RpbWVuc2lvbmFsIG9yIG11bHRpZGltZW5zaW9uYWxcclxuICAgICAqICBAdHlwZSB7Qm9vbGVhbn1cclxuICAgICAqICBAbWVtYmVyT2YgQWdncmVnYXRlZFRhYmxlXHJcbiAgICAgKiAgKi9cclxuXHJcbiAgICB0aGlzLm11bHRpZGltZW5zaW9uYWwgPSB0aGlzLmNvbnN0cnVjdG9yLmRldGVjdE11bHRpZGltZW5zaW9uYWwoc291cmNlKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqICBkYXRhIEFycmF5XHJcbiAgICAgKiAgQHR5cGUge0FycmF5Ljx7Y2VsbDpIVE1MVGFibGVDZWxsRWxlbWVudCwgZGF0YTo/U3RyaW5nfD9OdW1iZXIsIGNvbHVtbkluZGV4Ok51bWJlcn0+fVxyXG4gICAgICogIEBtZW1iZXJPZiBBZ2dyZWdhdGVkVGFibGVcclxuICAgICAqICAqL1xyXG4gICAgdGhpcy5kYXRhID0gdGhpcy5jb25zdHJ1Y3Rvci5nZXREYXRhKHtzb3VyY2UscmVmU291cmNlLGRlZmF1bHRIZWFkZXJSb3csZXhjbHVkZUJsb2NrLGV4Y2x1ZGVDb2x1bW5zLGV4Y2x1ZGVSb3dzLGRpcmVjdGlvbjpkYXRhU3RyaXBEaXJlY3Rpb24sbXVsdGlkaW1lbnNpb25hbDogdGhpcy5tdWx0aWRpbWVuc2lvbmFsfSk7XHJcblxyXG5cclxuICAgIGlmKHNvcnRpbmcgJiYgdHlwZW9mIHNvcnRpbmcgPT0gJ29iamVjdCcpe1xyXG4gICAgICBsZXQgcmVvcmRlckZ1bmN0aW9uID0gZT0+e1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnJlb3JkZXJSb3dzKHRoaXMuZGF0YSx0aGlzLnNvdXJjZSx0aGlzLm11bHRpZGltZW5zaW9uYWwpXHJcbiAgICAgIH07XHJcbiAgICAgIFtzb3VyY2UscmVmU291cmNlXS5mb3JFYWNoKHRhcmdldD0+e1xyXG4gICAgICAgIGlmKHRhcmdldCl7XHJcbiAgICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcigncmVwb3J0YWwtdGFibGUtc29ydCcsIHJlb3JkZXJGdW5jdGlvbilcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgc29ydGluZy5zb3VyY2UgPSBzb3VyY2U7XHJcbiAgICAgIHNvcnRpbmcucmVmU291cmNlID0gcmVmU291cmNlO1xyXG4gICAgICBzb3J0aW5nLmRlZmF1bHRIZWFkZXJSb3cgPSBkZWZhdWx0SGVhZGVyUm93O1xyXG4gICAgICBzb3J0aW5nLmRhdGE9dGhpcy5kYXRhO1xyXG4gICAgICBzb3J0aW5nLm11bHRpZGltZW5zaW9uYWwgPSB0aGlzLm11bHRpZGltZW5zaW9uYWw7XHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogIHNvcnRpbmcgb2JqZWN0LiBTZWUge0BsaW5rIFNvcnRUYWJsZX1cclxuICAgICAgICogIEB0eXBlIHtTb3J0VGFibGV9XHJcbiAgICAgICAqICBAbWVtYmVyT2YgQWdncmVnYXRlZFRhYmxlXHJcbiAgICAgICAqICAqL1xyXG4gICAgICB0aGlzLnNvcnRpbmcgPSBuZXcgU29ydFRhYmxlKHNvcnRpbmcpO1xyXG5cclxuICAgICAgLy8gYWRkIGxpc3RlbmVyIHRvIGRvIHJlb3JkZXJpbmcgb24gc29ydGluZ1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogdGFibGUgY29sdW1ucyBhcnJheVxyXG4gICAgICogQHR5cGUge0FycmF5Ljx7aW5kZXg6TnVtYmVyLCB0aXRsZTpTdHJpbmcsIGNvbFNwYW46TnVtYmVyLCBjZWxsOiBIVE1MVGFibGVDZWxsRWxlbWVudCwgP3JlZkNlbGw6SFRNTFRhYmxlQ2VsbEVsZW1lbnR9Pn1cclxuICAgICAqIEBtZW1iZXJPZiBBZ2dyZWdhdGVkVGFibGVcclxuICAgICAqICovXHJcbiAgICB0aGlzLmNvbHVtbnMgPSB0aGlzLnNvcnRpbmcgJiYgdGhpcy5zb3J0aW5nLmNvbHVtbnM/IHRoaXMuc29ydGluZy5jb2x1bW5zIDogbmV3IFRhYmxlQ29sdW1ucyh7c291cmNlLHJlZlNvdXJjZSxkZWZhdWx0SGVhZGVyUm93fSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogRXh0cmFjdHMgZGF0YSBmcm9tIGEgZ2l2ZW4gY2VsbC4gT3ZlcnJpZGUgaW4gYW4gaW5oZXJpdGVkIGNsYXNzIGlmIHlvdSBuZWVkIHRvIGFkZCBhbnkgbWV0YWRhdGEgdG8gaXQuXHJcbiAgICogQHBhcmFtIHtIVE1MVGFibGVDZWxsRWxlbWVudH0gY2VsbCAtIGNlbGwgZWxlbWVudCB0byBoYXZlIGRhdGEgc3RyaXBwZWQgb2ZmIGl0XHJcbiAgICogQHBhcmFtIHtIVE1MVGFibGVDZWxsRWxlbWVudH0gcm93SW5kZXggLSBpbmRleCBvZiB0aGUgcm93IGl0J3MgaW5cclxuICAgKiBAcGFyYW0ge0hUTUxUYWJsZUNlbGxFbGVtZW50fSBjb2x1bW5JbmRleCAtIGluZGV4IG9mIHRoZSBjb2x1bW4gaXQncyBpblxyXG4gICAqIEByZXR1cm5zIHt7Y2VsbDpIVE1MVGFibGVDZWxsRWxlbWVudCwgP2RhdGE6U3RyaW5nfE51bWJlciwgY29sdW1uSW5kZXg6TnVtYmVyfX0gUmV0dXJucyBhbiBvYmplY3QgYHtjZWxsOkhUTUxUYWJsZUNlbGxFbGVtZW50LCBkYXRhOj9TdHJpbmd8P051bWJlciwgY29sdW1uSW5kZXg6TnVtYmVyfWAgKGlmIGRhdGEgaXMgYWJzZW50IGluIHRoZSBjZWxsIG9yIGl0cyB0ZXh0IGNvbnRlbnQgYm9pbHMgZG93biB0byBhbiBlbXB0eSBzdHJpbmcgLSBpLmUuIHRoZXJlIGFyZSBubyBjaGFyYWN0ZXJzIGluIHRoZSBjZWxsLCBvbmx5IEhUTUwgdGFncykgaXQgcmV0dXJucyBudWxsIGluIGBkYXRhYFxyXG4gICAqIEBvdmVycmlkZVxyXG4gICAqICovXHJcbiAgc3RhdGljIHByZXBhcmVEYXRhQ2VsbChjZWxsLCByb3dJbmRleCwgY29sdW1uSW5kZXgpe1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgY2VsbCxcclxuICAgICAgZGF0YTogUmVwb3J0YWxCYXNlLmlzTnVtYmVyKGNlbGwudGV4dENvbnRlbnQudHJpbSgpKSxcclxuICAgICAgY29sdW1uSW5kZXgsXHJcbiAgICAgIHJvd0luZGV4XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIGZ1bmN0aW9uIHRha2VzIGNhcmUgb2YgcmVwb3NpdGlvbmluZyByb3dzIGluIHRoZSB0YWJsZSB0byBtYXRjaCB0aGUgYGRhdGFgIGFycmF5IGluIHRoZSB3YXkgaXQgd2FzIHNvcnRlZCBhbmQgaWYgdGhlIGRhdGEgaXMgc2VwYXJhdGVkIGludG8gYmxvY2tzLCB0aGVuIG1vdmUgdGhlIGJsb2NrIHBpZWNlIHRvIHRoZSBmaXJzdCByb3cgaW4gZWFjaCBkYXRhIGJsb2NrLlxyXG4gICAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgLSBmdWxsIHNvcnRlZCBkYXRhc2V0LiBJbnN0YW5jZSBvZiB7QGxpbmsgVGFibGVEYXRhI2dldERhdGF9XHJcbiAgICogQHBhcmFtIHtIVE1MVGFibGVFbGVtZW50fSBzb3VyY2UgLSBzb3VyY2UgdGFibGVcclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG11bHRpZGltZW5zaW9uYWxcclxuICAgKiAqL1xyXG4gIHN0YXRpYyByZW9yZGVyUm93cyhkYXRhLHNvdXJjZSxtdWx0aWRpbWVuc2lvbmFsKXtcclxuICAgIGxldCBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuICAgIEFnZ3JlZ2F0ZWRUYWJsZS5kaW1lbnNpb25hbERhdGFJdGVyYXRvcihkYXRhLG11bHRpZGltZW5zaW9uYWwsKGRhdGFEaW1lbnNpb24pPT57XHJcbiAgICAgIGlmKG11bHRpZGltZW5zaW9uYWwpe0FnZ3JlZ2F0ZWRUYWJsZS5yZXBvc2l0aW9uQmxvY2tDZWxsKGRhdGFEaW1lbnNpb24pfSAvLyBpZiBtdWx0aWRpbWVuc2lvbmFsIHJlcG9zaXRpb24gYWdncmVnYXRpbmcgYmxvY2sgY2VsbCB0byB0aGUgdG9wbW9zdCByb3cgaW4gc29ydGVkIGFycmF5XHJcbiAgICAgIGRhdGFEaW1lbnNpb24uZm9yRWFjaChpdGVtPT57ZnJhZ21lbnQuYXBwZW5kQ2hpbGQoaXRlbVswXS5jZWxsLnBhcmVudE5vZGUpfSk7IC8vIGFkZCByb3cgdG8gZnJhZ21lbnQgaW4gdGhlIGFycmF5IG9yZGVyLCB0aGlzIGRvZXNuJ3QgYWNjb3VudCBmb3IgY29sdW1uIHN0cmlwcGVkIGRhdGEgeWV0XHJcbiAgICB9KTtcclxuICAgIHNvdXJjZS5xdWVyeVNlbGVjdG9yKCd0Ym9keScpLmFwcGVuZENoaWxkKGZyYWdtZW50KTtcclxuICB9XHJcblxyXG4gIC8qXHJcbiAgICogUmVwb3NpdGlvbnMgdGhlIHJvd3NwYW5uaW5nIGJsb2NrIGNlbGwgZnJvbSB0aGUgaW5pdGlhbCByb3cgdG8gdGhlIG5ldyBzb3J0ZWQgcm93XHJcbiAgICogQHBhcmFtIHtBcnJheX0gaXRlbXMgLSBkaW1lbnNpb24gb2YgZGF0YVxyXG4gICAqICovXHJcbiAgc3RhdGljIHJlcG9zaXRpb25CbG9ja0NlbGwoaXRlbXMpe1xyXG4gICAgbGV0IGJsb2NrUm93SXRlbSA9IGl0ZW1zLmZpbHRlcihpdGVtPT5pdGVtWzBdLmNlbGwucGFyZW50Tm9kZS5jbGFzc0xpc3QuY29udGFpbnMoJ2ZpcnN0SW5CbG9jaycpKVswXTtcclxuICAgIGxldCBibG9ja1JvdyA9IGJsb2NrUm93SXRlbVswXS5jZWxsLnBhcmVudE5vZGU7XHJcbiAgICBpZihpdGVtcy5pbmRleE9mKGJsb2NrUm93SXRlbSkhPTApey8vIGlmIGJsb2NrIHJvdyBpc24ndCBmaXJzdCBpbiBkaW1lbnNpb25cclxuICAgICAgbGV0IG5ld0ZpcnN0Um93ID0gaXRlbXNbMF1bMF0uY2VsbC5wYXJlbnROb2RlO1xyXG4gICAgICBuZXdGaXJzdFJvdy5pbnNlcnRCZWZvcmUoYmxvY2tSb3cucXVlcnlTZWxlY3RvcignLmJsb2NrQ2VsbCcpLG5ld0ZpcnN0Um93LmZpcnN0RWxlbWVudENoaWxkKTsvLyBtb3ZlIGJsb2NrIGNlbGxcclxuICAgICAgbmV3Rmlyc3RSb3cuY2xhc3NMaXN0LmFkZCgnZmlyc3RJbkJsb2NrJyk7XHJcbiAgICAgIGJsb2NrUm93LmNsYXNzTGlzdC5yZW1vdmUoJ2ZpcnN0SW5CbG9jaycpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYWxsb3dzIHRvIHBlcmZvcm0gYWN0aW9uIG9uIGRhdGEgYmFzZWQgb24gaXRzIG11bHRpZGltZW5zaW9uYWxpdHlcclxuICAgKiBAcGFyYW0ge0FycmF5fSBkYXRhIC0gZnVsbCBkYXRhc2V0LiBJbnN0YW5jZSBvZiB7QGxpbmsgVGFibGVEYXRhI2dldERhdGF9XHJcbiAgICogQHBhcmFtIHtCb29sZWFufSBtdWx0aWRpbWVuc2lvbmFsXHJcbiAgICogQHBhcmFtIHshRnVuY3Rpb259IGNhbGxiYWNrIC0gYSBmdW5jdGlvbiB0byBiZSBleGVjdXRlZCBvbiBhIGRpbWVuc2lvbiBvZiBkYXRhLiBDYWxsYmFjayBpcyBjYWxsZWQgd2l0aCB0d28gYXR0cmlidXRlczogYGRpbWVuc2lvbmAgLSB0aGUgY3VycmVudCBpdGVyYXRpb24gb2YgZGF0YSBhbmQgYGluZGV4YCAob3B0aW9uYWwpIGlmIGl0J3MgbXVsdGlkaW1lbnNpb25hbFxyXG4gICAqICovXHJcbiAgc3RhdGljIGRpbWVuc2lvbmFsRGF0YUl0ZXJhdG9yKGRhdGEsbXVsdGlkaW1lbnNpb25hbCxjYWxsYmFjayl7XHJcbiAgICBpZighY2FsbGJhY2sgfHwgdHlwZW9mIGNhbGxiYWNrICE9ICdmdW5jdGlvbicpe3Rocm93IG5ldyBUeXBlRXJyb3IoJ2BjYWxsYmFja2AgbXVzdCBiZSBwYXNzZWQgYW5kIGJlIGEgZnVuY3Rpb24nKX1cclxuICAgIGlmKCFtdWx0aWRpbWVuc2lvbmFsKXtcclxuICAgICAgcmV0dXJuIGNhbGxiYWNrKGRhdGEpXHJcbiAgICB9IGVsc2UgeyAvLyBpZiBhcnJheSBoYXMgbmVzdGVkIGFycmF5IGJsb2Nrc1xyXG4gICAgICBkYXRhLmZvckVhY2goKGRpbWVuc2lvbixpbmRleCk9PntcclxuICAgICAgICBjYWxsYmFjayhkaW1lbnNpb24saW5kZXgpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQWdncmVnYXRlZFRhYmxlXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vci1hZ2dyZWdhdGVkLXRhYmxlL3NyYy9hZ2dyZWdhdGVkLXRhYmxlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _tableData = __webpack_require__(2);\n\nvar _tableData2 = _interopRequireDefault(_tableData);\n\nvar _aggregatedTable = __webpack_require__(4);\n\nvar _aggregatedTable2 = _interopRequireDefault(_aggregatedTable);\n\nvar _rReportalBase = __webpack_require__(1);\n\nvar _rReportalBase2 = _interopRequireDefault(_rReportalBase);\n\nvar _aggregatedTableRowMeta = __webpack_require__(3);\n\nvar _aggregatedTableRowMeta2 = _interopRequireDefault(_aggregatedTableRowMeta);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Created by IvanP on 07.09.2016.\r\n */\n\nwindow.Reportal = window.Reportal || {};\n_rReportalBase2.default.mixin(window.Reportal, {\n  TableData: _tableData2.default,\n  AggregatedTable: _aggregatedTable2.default,\n  AggregatedTableRowMeta: _aggregatedTableRowMeta2.default\n});\n\nexports.default = _aggregatedTable2.default;\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3ItYWdncmVnYXRlZC10YWJsZS9zcmMvbWFpbi5qcz85Nzg2Il0sIm5hbWVzIjpbIndpbmRvdyIsIlJlcG9ydGFsIiwibWl4aW4iLCJUYWJsZURhdGEiLCJBZ2dyZWdhdGVkVGFibGUiLCJBZ2dyZWdhdGVkVGFibGVSb3dNZXRhIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFJQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBUEE7Ozs7QUFVQUEsT0FBT0MsUUFBUCxHQUFrQkQsT0FBT0MsUUFBUCxJQUFtQixFQUFyQztBQUNBLHdCQUFhQyxLQUFiLENBQW1CRixPQUFPQyxRQUExQixFQUFtQztBQUNqQ0UsZ0NBRGlDO0FBRWpDQyw0Q0FGaUM7QUFHakNDO0FBSGlDLENBQW5DIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ3JlYXRlZCBieSBJdmFuUCBvbiAwNy4wOS4yMDE2LlxyXG4gKi9cclxuXHJcbmltcG9ydCBUYWJsZURhdGEgZnJvbSBcIi4vdGFibGUtZGF0YVwiO1xyXG5pbXBvcnQgQWdncmVnYXRlZFRhYmxlIGZyb20gXCIuL2FnZ3JlZ2F0ZWQtdGFibGVcIjtcclxuaW1wb3J0IFJlcG9ydGFsQmFzZSBmcm9tIFwici1yZXBvcnRhbC1iYXNlXCI7XHJcbmltcG9ydCBBZ2dyZWdhdGVkVGFibGVSb3dNZXRhIGZyb20gXCIuL2FnZ3JlZ2F0ZWQtdGFibGUtcm93LW1ldGFcIjtcclxuXHJcblxyXG53aW5kb3cuUmVwb3J0YWwgPSB3aW5kb3cuUmVwb3J0YWwgfHwge307XHJcblJlcG9ydGFsQmFzZS5taXhpbih3aW5kb3cuUmVwb3J0YWwse1xyXG4gIFRhYmxlRGF0YSxcclxuICBBZ2dyZWdhdGVkVGFibGUsXHJcbiAgQWdncmVnYXRlZFRhYmxlUm93TWV0YVxyXG59KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFnZ3JlZ2F0ZWRUYWJsZVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3ItYWdncmVnYXRlZC10YWJsZS9zcmMvbWFpbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\r\nreated by IvanP on 15.12.2016.\r\nn\n\nvar _rReportalBase = __webpack_require__(1);\n\nvar _rReportalBase2 = _interopRequireDefault(_rReportalBase);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * A class that provides utility static methods to load children of a level of hiererachy and a table per a given id\r\n * */\nvar AsyncHierarchyTable = function () {\n  function AsyncHierarchyTable() {\n    _classCallCheck(this, AsyncHierarchyTable);\n  }\n\n  _createClass(AsyncHierarchyTable, null, [{\n    key: 'fetchChildHierarchy',\n\n    /**\r\n     * Queries if each row might contain child rows by quering hierarchy for next level\r\n     * @param {!String} id - rowheader id for current row\r\n     * @param {!Number} hierarchyID - id of Hierarchy in Table Designer\r\n     * @param {!String} hierarchyControlID - id of the Reportal Hierarchy Component instance on the page\r\n     * @param {!String} pageStateID - Reportal state id\r\n     * @param {Number=} languageCode=9 - Language code (according to Confirmit table of language codes) of the language the hierarchy is going to be streamed in at the page load\r\n     * @returns {Array} array of child nodes of the `id` in hierarchy\r\n     * */\n    value: function fetchChildHierarchy(id, hierarchyID, hierarchyControlID, pageStateID) {\n      var languageCode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 9;\n\n      var path = [location.origin, 'reportal', 'Hierarchy', _rReportalBase2.default.getQueryVariable('ReportId'), hierarchyID, languageCode, 'GetChildNodes'];\n\n      var query = ['nodeId=' + id, 'info=' + AsyncHierarchyTable.encode({\n        IsPreview: _rReportalBase2.default.getQueryVariable('Preview') === 'true',\n        HierarchyControlId: hierarchyControlID\n      }), 'isRepBase=false', 'parameter=', 'PageStateId=' + pageStateID];\n\n      var hierarchyItemChildren = _rReportalBase2.default.promiseRequest([path.join('/'), '?', query.join('&')].join(''));\n      return hierarchyItemChildren.then(function (response) {\n        return Promise.resolve(JSON.parse(response));\n      });\n    }\n\n    /**\r\n     * Gets row nodes that are child to the parent row#`id`\r\n     * @param {!String} id - rowheader id for current row\r\n     * @param {?String} parentID - rowheader id for parent row\r\n     * @param {!String} tableID - Reportal Aggregated Table Component id\r\n     * @param {!String} pageStateID - Reportal state id\r\n     * @return {Promise} Returns a thenable promise which result is an `HTMLTableElement` with rows that are children to the row#`id`\r\n     * */\n\n  }, {\n    key: 'fetchChildTable',\n    value: function fetchChildTable(id, parentID, tableID, pageStateID) {\n      parentID = parentID != null ? parentID : id;\n      var path = [location.origin, 'reportal', 'Report', _rReportalBase2.default.getQueryVariable('ReportId'), 'Component', tableID];\n      var query = ['PageId=' + _rReportalBase2.default.getQueryVariable('PageId'), 'Preview=' + _rReportalBase2.default.getQueryVariable('Preview'), 'PageStateId=' + pageStateID, 'pageFilters=' + AsyncHierarchyTable.encode({}), 'customFilters=' + AsyncHierarchyTable.encode({}), 'persNodes=' + AsyncHierarchyTable.encode([{ NodeId: id, Text: null }]), // child node id\n      'origNodes=' + AsyncHierarchyTable.encode([{ NodeId: parentID, Text: null }]) // parent node id\n      ];\n      var tableResult = _rReportalBase2.default.promiseRequest([path.join('/'), '?', query.join('&')].join(''));\n      return tableResult.then(function (response) {\n        var host = document.createElement('span');\n        host.innerHTML = response;\n        return Promise.resolve(host.querySelector('table'));\n      });\n    }\n\n    /**\r\n     * Strips rows from the table received\r\n     * @param {HTMLTableElement} table - Aggregated table element\r\n     * @param {Array} excludedRows - rows excluded from insertion\r\n     * @return {Array} Returns an array of rows {HTMLTableRowElement}\r\n     * */\n\n  }, {\n    key: 'stripRowsFromResponseTable',\n    value: function stripRowsFromResponseTable(table, excludedRows) {\n      var rows = [].slice.call(table.querySelectorAll('tbody>tr'));\n      if (excludedRows && excludedRows.length > 0) {\n        excludedRows.reverse().forEach(function (index) {\n          rows.splice(index, 1);\n        });\n      }\n      return rows;\n    }\n\n    /**\r\n     * Does `JSON.stringify` and `encodeURIComponent` of anything passed to be added to the query string\r\n     * @param {String|Object|Array} toEncode - piece to be URLencoded\r\n     * @returns {String} Returns an encoded string\r\n     * */\n\n  }, {\n    key: 'encode',\n    value: function encode(toEncode) {\n      return encodeURIComponent(JSON.stringify(toEncode));\n    }\n  }]);\n\n  return AsyncHierarchyTable;\n}();\n\nexports.default = AsyncHierarchyTable;\n\n\nwindow.Reportal = window.Reportal || {};\n_rReportalBase2.default.mixin(window.Reportal, {\n  AsyncHierarchyTable: AsyncHierarchyTable\n});\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 7 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SortOrder = function () {\n  /**\r\n   * Creates a `sortOrder` array\r\n   * @param {Object} options - configuration options\r\n   * @param {Object} options.columns - an array of columns from {@link TableColumns}\r\n   * @param {Function} options.sortCallback - function that performs sorting based on the `sortOrder`\r\n   * @param {Object} options.sortCallbackScope - scope in which sort callback needs to be executed\r\n   * @param {Object} [options.defaultSorting] - an array of objects that specify default sorting\r\n   * @param {Number} options.defaultSorting.column - column index\r\n   * @param {String} options.defaultSorting.direction - sort direction (`asc`|`desc`)\r\n   * @return {Array}\r\n   * */\n  function SortOrder(options) {\n    var _this = this;\n\n    _classCallCheck(this, SortOrder);\n\n    var columns = options.columns,\n        sortCallback = options.sortCallback,\n        _options$defaultSorti = options.defaultSorting,\n        defaultSorting = _options$defaultSorti === undefined ? [] : _options$defaultSorti,\n        _options$sortCallback = options.sortCallbackScope,\n        sortCallbackScope = _options$sortCallback === undefined ? this : _options$sortCallback;\n\n\n    this.sortOrder = [];\n    if ((typeof columns === 'undefined' ? 'undefined' : _typeof(columns)) != undefined && columns != null) {\n      this.columns = columns;\n    } else {\n      throw new TypeError('SortOrder: columns must be specified');\n    }\n    this.sort = function () {\n      if (sortCallback && typeof sortCallback === 'function') {\n        sortCallback.call(sortCallbackScope, _this);\n      }\n    };\n    if (defaultSorting.length > 0) {\n      defaultSorting.forEach(function (item) {\n        return _this.add(item);\n      });\n      this.sort();\n    }\n  }\n\n  /**\r\n   * Returns an array containing a `cell` from the table and a reference cell (`refCell`) from the floating header if any\r\n   * @param {!Number} columnIndex - index of the column from the array of columns from {@link TableColumns}\r\n   * @return {{cell:HTMLTableCellElement, refCell:HTMLTableCellElement}}\r\n   * */\n\n\n  _createClass(SortOrder, [{\n    key: 'getCell',\n    value: function getCell(columnIndex) {\n      if (typeof columnIndex != 'undefined' && columnIndex != null) {\n        var cells = [];\n        if (this.columns[columnIndex].cell) {\n          cells.push(this.columns[columnIndex].cell);\n        }\n        if (this.columns[columnIndex].refCell) {\n          cells.push(this.columns[columnIndex].refCell);\n        }\n        return cells;\n      } else {\n        throw new TypeError('columnIndex parameter should not be null');\n      }\n    }\n\n    /**\r\n     * Adds another column to be sorted\r\n     * @param {!Object} obj - object describing sorting\r\n     * @param {Number} obj.column - column index\r\n     * @param {String} obj.direction - sort direction (`asc`|`desc`)\r\n     * */\n\n  }, {\n    key: 'add',\n    value: function add(obj) {\n      this.getCell(obj.column).forEach(function (cell) {\n        //if(!cell.classList.contains('sorted')){ // this column is not sorted, there might be others that are.\n        ['sorted', obj.direction].forEach(function (className) {\n          return cell.classList.add(className);\n        });\n        //} else { //swaps sorting from asc to desc\n        //  ['asc','desc'].forEach(className=>cell.classList.toggle(className));\n        //}\n      });\n      this.sortOrder.push(obj);\n    }\n\n    /**\r\n     * Removes a column from `sortOrder`\r\n     * @param {Number} column - column index as reference to the item to be removed.\r\n     * @param {Number} index - index of item in `sortOrder` array to be removed\r\n     * */\n\n  }, {\n    key: 'remove',\n    value: function remove(column, index) {\n      var _this2 = this;\n\n      ['sorted', 'asc', 'desc'].forEach(function (className) {\n        _this2.getCell(column).forEach(function (cell) {\n          return cell.classList.remove(className);\n        });\n      });\n      this.sortOrder.splice(index, 1);\n    }\n  }, {\n    key: 'replace',\n\n\n    /**\r\n     * Replaces all items in `sortOrder`\r\n     * @param {!Object} obj - object describing sorting\r\n     * @param {Number} obj.column - column index\r\n     * @param {String} obj.direction - sort direction (`asc`|`desc`)\r\n     * */\n    value: function replace(obj) {\n      var _this3 = this;\n\n      if (this.sortOrder.length > 0) {\n        this.sortOrder.forEach(function (item, index) {\n          _this3.remove(item.column, index);\n        });\n      }\n      this.add(obj);\n      this.sort();\n    }\n  }]);\n\n  return SortOrder;\n}();\n\nexports.default = SortOrder;\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _rReportalBase = __webpack_require__(1);\n\nvar _rReportalBase2 = _interopRequireDefault(_rReportalBase);\n\nvar _tableColumns = __webpack_require__(9);\n\nvar _tableColumns2 = _interopRequireDefault(_tableColumns);\n\nvar _sortOrder = __webpack_require__(7);\n\nvar _sortOrder2 = _interopRequireDefault(_sortOrder);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * Event reporting that a table has been sorted\r\n * @event SortTable~reportal-table-sort\r\n */\n\n/**\r\n * Makes a table sortable, gives API for sorting. It sorts `data` array, but doesn't move rows in the `source` table, because of differences in implementation.\r\n *\r\n * > Note: It's important that every Array item that is going to be sortable was either a `String`, a `Number`, a `null`, or an `Object` that contained `data` property (which was of the previously named types)\r\n *\r\n * @param {Object} options - options passed to configure the Sorting\r\n * @param {HTMLTableElement} options.source - source table sorting will be applied to\r\n * @param {HTMLTableElement} [options.refSource] - the floating header if any, will reflect and trigger sorting on header when scrolled.\r\n * @param {Number} [options.defaultHeaderRow=-1] - index of the row in `thead` (incremented from 0) that will have sorting enabled for columns. If `-1` then last row.\r\n * @param {Array} [options.included] - Array of column indices (incremented from 0) that will have sorting enabled. If not specified, all columns will be sortable. Optionally `excluded` can be specified instead as a shorthand to pass only indices of columns to be excluded from sorting, assumning that others will be made sortable. It's important to count the column index in the defaultHeaderRow\r\n * @param {Array} [options.excluded] - Array of column indices (incremented from 0) that will be excluded from sorting. Can be used as a shorthand instead of `included`.\r\n * @param {Object} [options.defaultSorting] - an array of objects that specify default sorting\r\n * @param {Number} options.defaultSorting.column - column index\r\n * @param {String} options.defaultSorting.direction - sort direction (`asc`|`desc`)\r\n * @param {Array} options.data - data with information for rows to be sorted\r\n * @param {Boolean} [options.multidimensional=false] - if `data` is single-dimensional (contains rows with data to be sorted as immediate array items: `data [rowItem...]`), then it is `false`. If it has blocks of data as items (each block containing an array of rows to be sorted: data [block [rowItem...]...]), then set it to `true`. Currently it supports only a two-level aggregation max (data->block->rowItem).\r\n * @prop {HTMLTableElement} source - source table\r\n * @prop {Array} data - data array to be sorted\r\n * @prop {Boolean} multidimensional - if `data` is mono-dimensional (contains rows with data to be sorted as immediate array items: `data [rowItem...]`), then it is `false`. If it has blocks of data as items (each block containing an array of rows to be sorted: data [block [rowItem...]...]), then set it to `true`. Currently it supports only a two-level aggregation max (data->block->rowItem).\r\n * @prop {SortOrder} sortOrder - instance of {@link SortOrder}\r\n * @prop {TableColumns} columns - instance of {@link TableColumns} with a modified prototype (added `sortable:true` and `.sortable` to sortable columns)\r\n * @class SortTable\r\n * */\nvar SortTable = function () {\n  /**\r\n   *\r\n   *\r\n   *  */\n\n  function SortTable(options) {\n    var _ref,\n        _ref$sortOrder,\n        _this = this;\n\n    _classCallCheck(this, SortTable);\n\n    var source = options.source,\n        refSource = options.refSource,\n        _options$defaultHeade = options.defaultHeaderRow,\n        defaultHeaderRow = _options$defaultHeade === undefined ? -1 : _options$defaultHeade,\n        included = options.included,\n        excluded = options.excluded,\n        _options$defaultSorti = options.defaultSorting,\n        defaultSorting = _options$defaultSorti === undefined ? [] : _options$defaultSorti,\n        _options$data = options.data,\n        data = _options$data === undefined ? [] : _options$data,\n        _options$multidimensi = options.multidimensional,\n        multidimensional = _options$multidimensi === undefined ? false : _options$multidimensi;\n\n    this._sortEvent = _rReportalBase2.default.newEvent('reportal-table-sort');\n\n    if (source) {\n      this.source = source;\n    } else {\n      throw new Error('`source` table is not specified for SortTable');\n    }\n    this.data = data;\n    this.multidimensional = multidimensional;\n\n    //let tableColumns= new TableColumns({source, refSource, defaultHeaderRow});\n    var sortableColumns = SortTable.defineSortableColumns(new _tableColumns2.default({ source: source, refSource: refSource, defaultHeaderRow: defaultHeaderRow }), included, excluded);\n    this.columns = sortableColumns;\n    // setup sort order and do initial default sorting\n    this.sortOrder = (_ref = new _sortOrder2.default({ columns: sortableColumns, sortCallback: this.sort, sortCallbackScope: this, defaultSorting: defaultSorting }), _ref$sortOrder = _toArray(_ref.sortOrder), _ref);\n    [source, refSource].forEach(function (src) {\n      if (src) {\n        SortTable.listenForSort(_tableColumns2.default.getHeader(src), sortableColumns, _this.sortOrder);\n      }\n    }); // set up listeners for headers\n  }\n\n  /**\r\n   * Checks the table columns array against the `included`/`excluded` columns arrays and adds a `sortable:true` property and a `.sortable` class to the sortable ones\r\n   * @param {TableColumns} columns - an instance of {@link TableColumns}\r\n   * @param {Array} [included] - array of included columns indices\r\n   * @param {Array} [excluded] - array of excluded columns indices\r\n   * */\n\n\n  _createClass(SortTable, [{\n    key: \"sort\",\n\n\n    /**\r\n     * Performs channeling of sorting based on whether `this.data` is `multidimensional`\r\n     * @param {SortOrder} sortOrder - instance of {@link SortOrder} passed by the {@link SortOrder#sort} on initial sort\r\n     * @fires SortTable~reportal-table-sort\r\n     * */\n    value: function sort(sortOrder) {\n      var _this2 = this;\n\n      var so = sortOrder.sortOrder || this.sortOrder.sortOrder,\n          columns = this.columns;\n      if (so && so.length > 0) {\n        if (!this.multidimensional) {\n          SortTable.sortDimension(this.data, columns, so);\n        } else {\n          // if array has nested array blocks\n          this.data.forEach(function (dimension) {\n            SortTable.sortDimension(dimension, _this2.columns, so);\n          });\n        }\n        columns[so[0].column].cell.dispatchEvent(this._sortEvent);\n      }\n    }\n    /**\r\n     * Splits sorting into one-column or two-column. The precedence of columns in `sortOrder` is the factor defining sort priority\r\n     * @param {Array} data - array containing row items to be sorted\r\n     * @param {TableColumns} columns - array of table columns from {@link SortTable#defineSortableColumns}\r\n     * @param {SortOrder} sortOrder - instance of {@link SortOrder}\r\n     * */\n\n  }], [{\n    key: \"defineSortableColumns\",\n    value: function defineSortableColumns(columns, included, excluded) {\n      var sortableColumns = [].slice.call(columns);\n      sortableColumns.forEach(function (column, index) {\n        var sortable = !included && !excluded || included && included.indexOf(index) != -1 || excluded && excluded.indexOf(index) == -1;\n        if (sortable) {\n          column.cell.classList.add('sortable');\n          if (column.refCell) {\n            column.refCell.classList.add('sortable');\n          }\n          column.sortable = true;\n        }\n      });\n      return sortableColumns;\n    }\n\n    /**\r\n     * sets up listeners for column headers available for click\r\n     * @param {HTMLElement} delegatedTarget - element that will receive clicks and see if they are valid, `thead` is recommended to boil down to header clicks only\r\n     * @param {TableColumns} columns - array of table columns from {@link SortTable#defineSortableColumns}\r\n     * @param {SortOrder} sortOrder - instance of {@link SortOrder}\r\n     * @listens click\r\n     * */\n\n  }, {\n    key: \"listenForSort\",\n    value: function listenForSort(delegatedTarget, columns, sortOrder) {\n      delegatedTarget.addEventListener('click', function (e) {\n        // if it's a table cell, is in columns array and is sortable\n        var clickedColumn = void 0;\n        for (var i = 0; i < columns.length; i++) {\n          if (e.target == columns[i].cell || e.target == columns[i].refCell) {\n            clickedColumn = columns[i];break;\n          }\n        }\n        if ((e.target.tagName == 'TD' || e.target.tagName == 'TH') && clickedColumn.sortable) {\n          sortOrder.replace({ column: columns.indexOf(clickedColumn), direction: e.target.classList.contains('asc') ? 'desc' : 'asc' });\n        }\n      });\n    }\n  }, {\n    key: \"sortDimension\",\n    value: function sortDimension(data, columns, sortOrder) {\n      var getIndex = function getIndex(i) {\n        return columns[sortOrder[i].column].index;\n      };\n      var getDirection = function getDirection(i) {\n        return sortOrder[i].direction === 'desc' ? -1 : 1;\n      };\n      // TODO: add possibility to sort the data that was stripped by column.\n      data.sort(function (a, b) {\n        // sort rows\n        if (sortOrder.length == 1) {\n          //sort one column only\n          return SortTable.sorter(a[getIndex(0)], b[getIndex(0)], getDirection(0));\n        } else {\n          //sort against two columns\n          return SortTable.sorter(a[getIndex(0)], b[getIndex(0)], getDirection(0)) || SortTable.sorter(a[getIndex(1)], b[getIndex(1)], getDirection(1));\n        }\n      });\n    }\n\n    /**\r\n     * Function that performs case insensitive sorting in the array. It can distinguish between numbers, numbers as strings, HTML and plain strings\r\n     * */\n\n  }, {\n    key: \"sorter\",\n    value: function sorter(a, b, lesser) {\n      var regex = /[<>]/g;\n      if (regex.test(a) || regex.test(b)) {\n        // if we need to sort elements that have HTML like links\n        var tempEl1 = document.createElement('span');tempEl1.innerHTML = a;\n        a = tempEl1.textContent.trim();\n        var tempEl2 = document.createElement('span');tempEl2.innerHTML = b;\n        b = tempEl2.textContent.trim();\n      }\n      if ((typeof a === \"undefined\" ? \"undefined\" : _typeof(a)) == 'object' && _typeof(a.data) != undefined) {\n        a = a.data;\n      }\n      if ((typeof b === \"undefined\" ? \"undefined\" : _typeof(b)) == 'object' && _typeof(b.data) != undefined) {\n        b = b.data;\n      }\n      if (!isNaN(a) && !isNaN(b)) {\n        //they might be numbers or null\n        if (a === null) {\n          return 1;\n        } else if (b === null) {\n          return -1;\n        }\n        return a < b ? lesser : a > b ? -lesser : 0;\n      } else if (!isNaN(parseFloat(a)) && !isNaN(parseFloat(b))) {\n        // they might be number strings\n        return parseFloat(a) < parseFloat(b) ? lesser : parseFloat(a) > parseFloat(b) ? -lesser : 0;\n      } else {\n        //they might be simple strings\n        return a.toLowerCase() < b.toLowerCase() ? lesser : a.toLowerCase() > b.toLowerCase() ? -lesser : 0;\n      }\n    }\n  }]);\n\n  return SortTable;\n}();\n\nexports.default = SortTable;\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 9 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * Created by IvanP on 09.09.2016.\r\n */\n\nvar TableColumns = function () {\n  /**\r\n   * Creates an array of objects corresponding to the cells of `defaultHeaderRow`, that contain `sortable` property, denoting the column is sortable,\r\n   * `index` of the column and reference to the `cell`. Adds `.sortable` to a sortable cell\r\n   * @param {Object} options - options passed to configure the Sorting\r\n   * @param {HTMLTableElement} options.source - source table sorting will be applied to\r\n   * @param {HTMLTableElement} options.refSource - floating header if any\r\n   * @param {Number|Object} [options.defaultHeaderRow=-1] - index of the row in `thead` (incremented from 0) that will have sorting enabled for columns. If `-1` then last row.\r\n   * @return {{index:Number, title:String, colSpan:Number, cell: HTMLTableCellElement, ?refCell:HTMLTableCellElement}} - an array of objects that have this structure\r\n   * */\n  function TableColumns(options) {\n    _classCallCheck(this, TableColumns);\n\n    var source = options.source,\n        refSource = options.refSource,\n        _options$defaultHeade = options.defaultHeaderRow,\n        defaultHeaderRow = _options$defaultHeade === undefined ? -1 : _options$defaultHeade;\n\n    var thead = void 0,\n        refThead = void 0;\n    if (source) {\n      thead = TableColumns.getHeader(source);\n    } else {\n      throw new TypeError('`source` table is not specified, cannot create TableColumns');\n    }\n    if (refSource) {\n      refThead = TableColumns.getHeader(refSource);\n    }\n    return TableColumns.computeColumns(thead, refThead, defaultHeaderRow);\n  }\n\n  /**\r\n   * Gets a header\r\n   * @param {HTMLTableElement} source - source table headers are created for\r\n   * */\n\n\n  _createClass(TableColumns, null, [{\n    key: 'getHeader',\n    value: function getHeader(source) {\n      if (source && source.tagName == 'TABLE') {\n        var header = source.querySelector(\"thead\");\n        if (header && header.children.length > 0) {\n          return header;\n        } else {\n          throw new TypeError('`source` table has no header or rows');\n        }\n      } else {\n        throw new TypeError('`source` is not specified or is not a table');\n      }\n    }\n\n    /**\r\n     * Calculates defaultHeaderRow for a passed `thead`\r\n     * @param {!HTMLTableElement} thead - source table header\r\n     * @param {!Number} defaultHeaderRowIndex - index of the row in `thead` (incremented from 0) that will be considered default to have actions executed upon.\r\n     * @return {{index:Number, row: HTMLTableRowElement}}\r\n     * */\n\n  }, {\n    key: 'getDefaultHeaderRow',\n    value: function getDefaultHeaderRow(thead, defaultHeaderRowIndex) {\n      // calculate default header row\n      var headerRows = thead.children,\n          headerRowIndex = defaultHeaderRowIndex == -1 ? headerRows.length + defaultHeaderRowIndex : defaultHeaderRowIndex;\n      return {\n        index: headerRowIndex,\n        row: headerRows.item(headerRowIndex)\n      };\n    }\n\n    /**\r\n     * Gets an array of header cell nodes from default header row\r\n     * @param {?HTMLTableElement} thead - source table header\r\n     * @param {!Number} defaultHeaderRowIndex - index of the row in `thead` (incremented from 0) that will be considered default to have actions executed upon.\r\n     * @return {?Array} Returns an array of header cell nodes or null if `thead` is not specified\r\n     * */\n\n  }, {\n    key: 'getHeaderCells',\n    value: function getHeaderCells(thead, defaultHeaderRowIndex) {\n      if (thead) {\n        if (defaultHeaderRowIndex != null) {\n          var _ret = function () {\n            var defaultHeaderRow = TableColumns.getDefaultHeaderRow(thead, defaultHeaderRowIndex);\n            var headerRows = thead.children;\n            var rowsLength = headerRows.length;\n            var abstr = {};\n\n            var _loop = function _loop(r) {\n              var row = headerRows.item(r);\n              var augmentIndex = 0; // index that will account for colSpan of upper rows' cells\n              [].slice.call(row.children).forEach(function (cell, index) {\n                //iterate through cells\n                for (var rs = 0; rs <= cell.rowSpan - 1; rs++) {\n                  //spread cell across its rowspan\n                  var rowA = abstr[r + rs] = abstr[r + rs] || {}; //create row if not exists\n                  if (!rowA[augmentIndex]) {\n                    //insert cell into slot if not filled\n                    rowA[augmentIndex] = cell;\n                  } else {\n                    //if filled look for the next empty because rowspanned columns fill them in a linear way\n                    var i = 0;\n                    while (true) {\n                      if (!rowA[i]) {\n                        rowA[i] = cell;\n                        augmentIndex = i;\n                        break;\n                      }\n                      i++;\n                    }\n                  }\n                }\n                augmentIndex += cell.colSpan;\n              });\n            };\n\n            for (var r = 0; r < rowsLength; r++) {\n              _loop(r);\n            }\n            return {\n              v: Object.keys(abstr[defaultHeaderRow.index]).map(function (k) {\n                return abstr[defaultHeaderRow.index][k];\n              })\n            };\n          }();\n\n          if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n        } else {\n          throw new TypeError('TableColumns.getHeaderCells: defaultHeaderRowIndex is not specified or is not a Number');\n        }\n      }\n      return null;\n    }\n\n    /**\r\n     * Gets an array of columns from the table\r\n     * @param {!HTMLTableElement} thead - source table header\r\n     * @param {!HTMLTableElement} refThead - reference table header from floating header if any\r\n     * @param {Number} defaultHeaderRowIndex - index of the row in `thead` (incremented from 0) that will be considered default to have actions executed upon.\r\n     * @return {?Array} Returns an array of header cell nodes or null if `thead` is not specified\r\n     * */\n\n  }, {\n    key: 'computeColumns',\n    value: function computeColumns(thead, refThead, defaultHeaderRowIndex) {\n      var theadCells = TableColumns.getHeaderCells(thead, defaultHeaderRowIndex);\n      var refTheadCells = TableColumns.getHeaderCells(refThead, defaultHeaderRowIndex);\n      var realColumnIndex = 0;\n      return theadCells.map(function (cell, index) {\n        var obj = {\n          index: realColumnIndex,\n          title: cell.textContent,\n          cell: cell,\n          colSpan: cell.colSpan\n        };\n        if (refTheadCells != null) {\n          obj.refCell = refTheadCells[index];\n        }\n        // we need to increment the colspan only for columns that follow rowheader because the block is not in data.\n        realColumnIndex = realColumnIndex > 0 ? realColumnIndex + cell.colSpan : realColumnIndex + 1;\n        return obj;\n      });\n    }\n  }]);\n\n  return TableColumns;\n}();\n\nexports.default = TableColumns;\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Itc29ydC10YWJsZS9zcmMvdGFibGUtY29sdW1ucy5qcz9jYWFkIl0sIm5hbWVzIjpbIlRhYmxlQ29sdW1ucyIsIm9wdGlvbnMiLCJzb3VyY2UiLCJyZWZTb3VyY2UiLCJkZWZhdWx0SGVhZGVyUm93IiwidGhlYWQiLCJyZWZUaGVhZCIsImdldEhlYWRlciIsIlR5cGVFcnJvciIsImNvbXB1dGVDb2x1bW5zIiwidGFnTmFtZSIsImhlYWRlciIsInF1ZXJ5U2VsZWN0b3IiLCJjaGlsZHJlbiIsImxlbmd0aCIsImRlZmF1bHRIZWFkZXJSb3dJbmRleCIsImhlYWRlclJvd3MiLCJoZWFkZXJSb3dJbmRleCIsImluZGV4Iiwicm93IiwiaXRlbSIsImdldERlZmF1bHRIZWFkZXJSb3ciLCJyb3dzTGVuZ3RoIiwiYWJzdHIiLCJyIiwiYXVnbWVudEluZGV4Iiwic2xpY2UiLCJjYWxsIiwiZm9yRWFjaCIsImNlbGwiLCJycyIsInJvd1NwYW4iLCJyb3dBIiwiaSIsImNvbFNwYW4iLCJPYmplY3QiLCJrZXlzIiwibWFwIiwiayIsInRoZWFkQ2VsbHMiLCJnZXRIZWFkZXJDZWxscyIsInJlZlRoZWFkQ2VsbHMiLCJyZWFsQ29sdW1uSW5kZXgiLCJvYmoiLCJ0aXRsZSIsInRleHRDb250ZW50IiwicmVmQ2VsbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7SUFJTUEsWTtBQUNKOzs7Ozs7Ozs7QUFTQSx3QkFBWUMsT0FBWixFQUFvQjtBQUFBOztBQUFBLFFBQ2JDLE1BRGEsR0FDMkJELE9BRDNCLENBQ2JDLE1BRGE7QUFBQSxRQUNOQyxTQURNLEdBQzJCRixPQUQzQixDQUNORSxTQURNO0FBQUEsZ0NBQzJCRixPQUQzQixDQUNJRyxnQkFESjtBQUFBLFFBQ0lBLGdCQURKLHlDQUNxQixDQUFDLENBRHRCOztBQUVsQixRQUFJQyxjQUFKO0FBQUEsUUFBVUMsaUJBQVY7QUFDQSxRQUFHSixNQUFILEVBQVU7QUFBQ0csY0FBTUws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aUJBQU9XLE9BQU9DLElBQVAsQ0FBWWIsTUFBTW5CLGlCQUFpQmMsS0FBdkIsQ0FBWixFQUEyQ21CLEdBQTNDLENBQStDO0FBQUEsdUJBQUtkLE1BQU1uQixpQkFBaUJjLEtBQXZCLEVBQThCb0IsQ0FBOUIsQ0FBTDtBQUFBLGVBQS9DO0FBQVA7QUE1QjZCOztBQUFBO0FBNkI5QixTQTdCRCxNQTZCTztBQUNMLGdCQUFNLElBQUk5QixTQUFKLENBQWMsd0ZBQWQsQ0FBTjtBQUNEO0FBQ0Y7QUFDRCxhQUFPLElBQVA7QUFDRDs7QUFFRDs7Ozs7Ozs7OzttQ0FPc0JILEssRUFBTUMsUSxFQUFTUyxxQixFQUFzQjtBQUN6RCxVQUFJd0IsYUFBYXZDLGFBQWF3QyxjQUFiLENBQTRCbkMsS0FBNUIsRUFBa0NVLHFCQUFsQyxDQUFqQjtBQUNBLFVBQUkwQixnQkFBZ0J6QyxhQUFhd0MsY0FBYixDQUE0QmxDLFFBQTVCLEVBQXFDUyxxQkFBckMsQ0FBcEI7QUFDQSxVQUFJMkIsa0JBQWdCLENBQXBCO0FBQ0EsYUFBT0gsV0FBV0YsR0FBWCxDQUFlLFVBQUNSLElBQUQsRUFBTVgsS0FBTixFQUFjO0FBQ2xDLFlBQUl5QixNQUFNO0FBQ1J6QixpQkFBT3dCLGVBREM7QUFFUkUsaUJBQU9mLEtBQUtnQixXQUZKO0FBR1JoQixvQkFIUTtBQUlSSyxtQkFBUUwsS0FBS0s7QUFKTCxTQUFWO0FBTUEsWUFBR08saUJBQWUsSUFBbEIsRUFBdUI7QUFBQ0UsY0FBSUcsT0FBSixHQUFjTCxjQUFjdkIsS0FBZCxDQUFkO0FBQW1DO0FBQzNEO0FBQ0F3QiwwQkFBaUJBLGtCQUFnQixDQUFoQixHQUFtQkEsa0JBQWtCYixLQUFLSyxPQUExQyxHQUFtRFEsa0JBQWdCLENBQXBGO0FBQ0EsZUFBT0MsR0FBUDtBQUNELE9BWE0sQ0FBUDtBQVlEOzs7Ozs7a0JBRVkzQyxZIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ3JlYXRlZCBieSBJdmFuUCBvbiAwOS4wOS4yMDE2LlxyXG4gKi9cclxuXHJcbmNsYXNzIFRhYmxlQ29sdW1uc3tcclxuICAvKipcclxuICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG9iamVjdHMgY29ycmVzcG9uZGluZyB0byB0aGUgY2VsbHMgb2YgYGRlZmF1bHRIZWFkZXJSb3dgLCB0aGF0IGNvbnRhaW4gYHNvcnRhYmxlYCBwcm9wZXJ0eSwgZGVub3RpbmcgdGhlIGNvbHVtbiBpcyBzb3J0YWJsZSxcclxuICAgKiBgaW5kZXhgIG9mIHRoZSBjb2x1bW4gYW5kIHJlZmVyZW5jZSB0byB0aGUgYGNlbGxgLiBBZGRzIGAuc29ydGFibGVgIHRvIGEgc29ydGFibGUgY2VsbFxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9ucyBwYXNzZWQgdG8gY29uZmlndXJlIHRoZSBTb3J0aW5nXHJcbiAgICogQHBhcmFtIHtIVE1MVGFibGVFbGVtZW50fSBvcHRpb25zLnNvdXJjZSAtIHNvdXJjZSB0YWJsZSBzb3J0aW5nIHdpbGwgYmUgYXBwbGllZCB0b1xyXG4gICAqIEBwYXJhbSB7SFRNTFRhYmxlRWxlbWVudH0gb3B0aW9ucy5yZWZTb3VyY2UgLSBmbG9hdGluZyBoZWFkZXIgaWYgYW55XHJcbiAgICogQHBhcmFtIHtOdW1iZXJ8T2JqZWN0fSBbb3B0aW9ucy5kZWZhdWx0SGVhZGVyUm93PS0xXSAtIGluZGV4IG9mIHRoZSByb3cgaW4gYHRoZWFkYCAoaW5jcmVtZW50ZWQgZnJvbSAwKSB0aGF0IHdpbGwgaGF2ZSBzb3J0aW5nIGVuYWJsZWQgZm9yIGNvbHVtbnMuIElmIGAtMWAgdGhlbiBsYXN0IHJvdy5cclxuICAgKiBAcmV0dXJuIHt7aW5kZXg6TnVtYmVyLCB0aXRsZTpTdHJpbmcsIGNvbFNwYW46TnVtYmVyLCBjZWxsOiBIVE1MVGFibGVDZWxsRWxlbWVudCwgP3JlZkNlbGw6SFRNTFRhYmxlQ2VsbEVsZW1lbnR9fSAtIGFuIGFycmF5IG9mIG9iamVjdHMgdGhhdCBoYXZlIHRoaXMgc3RydWN0dXJlXHJcbiAgICogKi9cclxuICBjb25zdHJ1Y3RvcihvcHRpb25zKXtcclxuICAgIGxldCB7c291cmNlLHJlZlNvdXJjZSxkZWZhdWx0SGVhZGVyUm93PS0xfSA9IG9wdGlvbnM7XHJcbiAgICBsZXQgdGhlYWQscmVmVGhlYWQ7XHJcbiAgICBpZihzb3VyY2Upe3RoZWFkPVRhYmxlQ29sdW1ucy5nZXRIZWFkZXIoc291cmNlKX0gZWxzZSB7dGhyb3cgbmV3IFR5cGVFcnJvcignYHNvdXJjZWAgdGFibGUgaXMgbm90IHNwZWNpZmllZCwgY2Fubm90IGNyZWF0ZSBUYWJsZUNvbHVtbnMnKX1cclxuICAgIGlmKHJlZlNvdXJjZSl7cmVmVGhlYWQ9VGFibGVDb2x1bW5zLmdldEhlYWRlcihyZWZTb3VyY2UpfVxyXG4gICAgcmV0dXJuIFRhYmxlQ29sdW1ucy5jb21wdXRlQ29sdW1ucyh0aGVhZCxyZWZUaGVhZCxkZWZhdWx0SGVhZGVyUm93KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgYSBoZWFkZXJcclxuICAgKiBAcGFyYW0ge0hUTUxUYWJsZUVsZW1lbnR9IHNvdXJjZSAtIHNvdXJjZSB0YWJsZSBoZWFkZXJzIGFyZSBjcmVhdGVkIGZvclxyXG4gICAqICovXHJcbiAgc3RhdGljIGdldEhlYWRlcihzb3VyY2Upe1xyXG4gICAgaWYoc291cmNlICYmIHNvdXJjZS50YWdOYW1lID09ICdUQUJMRScpe1xyXG4gICAgICBsZXQgaGVhZGVyID0gc291cmNlLnF1ZXJ5U2VsZWN0b3IoXCJ0aGVhZFwiKTtcclxuICAgICAgaWYoaGVhZGVyICYmIGhlYWRlci5jaGlsZHJlbi5sZW5ndGg+MCkge1xyXG4gICAgICAgIHJldHVybiBoZWFkZXI7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYHNvdXJjZWAgdGFibGUgaGFzIG5vIGhlYWRlciBvciByb3dzJyk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Bzb3VyY2VgIGlzIG5vdCBzcGVjaWZpZWQgb3IgaXMgbm90IGEgdGFibGUnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGN1bGF0ZXMgZGVmYXVsdEhlYWRlclJvdyBmb3IgYSBwYXNzZWQgYHRoZWFkYFxyXG4gICAqIEBwYXJhbSB7IUhUTUxUYWJsZUVsZW1lbnR9IHRoZWFkIC0gc291cmNlIHRhYmxlIGhlYWRlclxyXG4gICAqIEBwYXJhbSB7IU51bWJlcn0gZGVmYXVsdEhlYWRlclJvd0luZGV4IC0gaW5kZXggb2YgdGhlIHJvdyBpbiBgdGhlYWRgIChpbmNyZW1lbnRlZCBmcm9tIDApIHRoYXQgd2lsbCBiZSBjb25zaWRlcmVkIGRlZmF1bHQgdG8gaGF2ZSBhY3Rpb25zIGV4ZWN1dGVkIHVwb24uXHJcbiAgICogQHJldHVybiB7e2luZGV4Ok51bWJlciwgcm93OiBIVE1MVGFibGVSb3dFbGVtZW50fX1cclxuICAgKiAqL1xyXG4gIHN0YXRpYyBnZXREZWZhdWx0SGVhZGVyUm93KHRoZWFkLGRlZmF1bHRIZWFkZXJSb3dJbmRleCl7XHJcbiAgICAvLyBjYWxjdWxhdGUgZGVmYXVsdCBoZWFkZXIgcm93XHJcbiAgICBsZXQgaGVhZGVyUm93cyA9IHRoZWFkLmNoaWxkcmVuLFxyXG4gICAgICBoZWFkZXJSb3dJbmRleCA9IGRlZmF1bHRIZWFkZXJSb3dJbmRleD09LTEgPyBoZWFkZXJSb3dzLmxlbmd0aCArIGRlZmF1bHRIZWFkZXJSb3dJbmRleCA6IGRlZmF1bHRIZWFkZXJSb3dJbmRleDtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGluZGV4OmhlYWRlclJvd0luZGV4LFxyXG4gICAgICByb3c6aGVhZGVyUm93cy5pdGVtKGhlYWRlclJvd0luZGV4KVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgYW4gYXJyYXkgb2YgaGVhZGVyIGNlbGwgbm9kZXMgZnJvbSBkZWZhdWx0IGhlYWRlciByb3dcclxuICAgKiBAcGFyYW0gez9IVE1MVGFibGVFbGVtZW50fSB0aGVhZCAtIHNvdXJjZSB0YWJsZSBoZWFkZXJcclxuICAgKiBAcGFyYW0geyFOdW1iZXJ9IGRlZmF1bHRIZWFkZXJSb3dJbmRleCAtIGluZGV4IG9mIHRoZSByb3cgaW4gYHRoZWFkYCAoaW5jcmVtZW50ZWQgZnJvbSAwKSB0aGF0IHdpbGwgYmUgY29uc2lkZXJlZCBkZWZhdWx0IHRvIGhhdmUgYWN0aW9ucyBleGVjdXRlZCB1cG9uLlxyXG4gICAqIEByZXR1cm4gez9BcnJheX0gUmV0dXJucyBhbiBhcnJheSBvZiBoZWFkZXIgY2VsbCBub2RlcyBvciBudWxsIGlmIGB0aGVhZGAgaXMgbm90IHNwZWNpZmllZFxyXG4gICAqICovXHJcbiAgc3RhdGljIGdldEhlYWRlckNlbGxzKHRoZWFkLGRlZmF1bHRIZWFkZXJSb3dJbmRleCl7XHJcbiAgICBpZih0aGVhZCl7XHJcbiAgICAgIGlmKGRlZmF1bHRIZWFkZXJSb3dJbmRleCE9bnVsbCl7XHJcbiAgICAgICAgbGV0IGRlZmF1bHRIZWFkZXJSb3cgPSBUYWJsZUNvbHVtbnMuZ2V0RGVmYXVsdEhlYWRlclJvdyh0aGVhZCxkZWZhdWx0SGVhZGVyUm93SW5kZXgpO1xyXG4gICAgICAgIGxldCBoZWFkZXJSb3dzID0gdGhlYWQuY2hpbGRyZW47XHJcbiAgICAgICAgbGV0IHJvd3NMZW5ndGggPSBoZWFkZXJSb3dzLmxlbmd0aDtcclxuICAgICAgICBsZXQgYWJzdHIgPSB7fTtcclxuICAgICAgICBmb3IobGV0IHI9MDtyPHJvd3NMZW5ndGg7cisrKXtcclxuICAgICAgICAgIGxldCByb3cgPSBoZWFkZXJSb3dzLml0ZW0ocik7XHJcbiAgICAgICAgICBsZXQgYXVnbWVudEluZGV4PTA7IC8vIGluZGV4IHRoYXQgd2lsbCBhY2NvdW50IGZvciBjb2xTcGFuIG9mIHVwcGVyIHJvd3MnIGNlbGxzXHJcbiAgICAgICAgICBbXS5zbGljZS5jYWxsKHJvdy5jaGlsZHJlbikuZm9yRWFjaCgoY2VsbCxpbmRleCk9PnsgLy9pdGVyYXRlIHRocm91Z2ggY2VsbHNcclxuICAgICAgICAgICAgZm9yKGxldCBycz0wOyByczw9Y2VsbC5yb3dTcGFuLTE7cnMrKyl7IC8vc3ByZWFkIGNlbGwgYWNyb3NzIGl0cyByb3dzcGFuXHJcbiAgICAgICAgICAgICAgbGV0IHJvd0EgPSBhYnN0cltyK3JzXSA9IGFic3RyW3IrcnNdIHx8IHt9OyAvL2NyZWF0ZSByb3cgaWYgbm90IGV4aXN0c1xyXG4gICAgICAgICAgICAgIGlmKCFyb3dBW2F1Z21lbnRJbmRleF0peyAvL2luc2VydCBjZWxsIGludG8gc2xvdCBpZiBub3QgZmlsbGVkXHJcbiAgICAgICAgICAgICAgICByb3dBW2F1Z21lbnRJbmRleF09Y2VsbDtcclxuICAgICAgICAgICAgICB9IGVsc2UgeyAvL2lmIGZpbGxlZCBsb29rIGZvciB0aGUgbmV4dCBlbXB0eSBiZWNhdXNlIHJvd3NwYW5uZWQgY29sdW1ucyBmaWxsIHRoZW0gaW4gYSBsaW5lYXIgd2F5XHJcbiAgICAgICAgICAgICAgICBsZXQgaT0wO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUodHJ1ZSl7XHJcbiAgICAgICAgICAgICAgICAgIGlmKCFyb3dBW2ldKXtcclxuICAgICAgICAgICAgICAgICAgICByb3dBW2ldPWNlbGw7XHJcbiAgICAgICAgICAgICAgICAgICAgYXVnbWVudEluZGV4PWk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhdWdtZW50SW5kZXgrPWNlbGwuY29sU3BhbjtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhYnN0cltkZWZhdWx0SGVhZGVyUm93LmluZGV4XSkubWFwKGsgPT4gYWJzdHJbZGVmYXVsdEhlYWRlclJvdy5pbmRleF1ba10pXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGFibGVDb2x1bW5zLmdldEhlYWRlckNlbGxzOiBkZWZhdWx0SGVhZGVyUm93SW5kZXggaXMgbm90IHNwZWNpZmllZCBvciBpcyBub3QgYSBOdW1iZXInKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbFxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyBhbiBhcnJheSBvZiBjb2x1bW5zIGZyb20gdGhlIHRhYmxlXHJcbiAgICogQHBhcmFtIHshSFRNTFRhYmxlRWxlbWVudH0gdGhlYWQgLSBzb3VyY2UgdGFibGUgaGVhZGVyXHJcbiAgICogQHBhcmFtIHshSFRNTFRhYmxlRWxlbWVudH0gcmVmVGhlYWQgLSByZWZlcmVuY2UgdGFibGUgaGVhZGVyIGZyb20gZmxvYXRpbmcgaGVhZGVyIGlmIGFueVxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBkZWZhdWx0SGVhZGVyUm93SW5kZXggLSBpbmRleCBvZiB0aGUgcm93IGluIGB0aGVhZGAgKGluY3JlbWVudGVkIGZyb20gMCkgdGhhdCB3aWxsIGJlIGNvbnNpZGVyZWQgZGVmYXVsdCB0byBoYXZlIGFjdGlvbnMgZXhlY3V0ZWQgdXBvbi5cclxuICAgKiBAcmV0dXJuIHs/QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgaGVhZGVyIGNlbGwgbm9kZXMgb3IgbnVsbCBpZiBgdGhlYWRgIGlzIG5vdCBzcGVjaWZpZWRcclxuICAgKiAqL1xyXG4gIHN0YXRpYyBjb21wdXRlQ29sdW1ucyh0aGVhZCxyZWZUaGVhZCxkZWZhdWx0SGVhZGVyUm93SW5kZXgpe1xyXG4gICAgbGV0IHRoZWFkQ2VsbHMgPSBUYWJsZUNvbHVtbnMuZ2V0SGVhZGVyQ2VsbHModGhlYWQsZGVmYXVsdEhlYWRlclJvd0luZGV4KTtcclxuICAgIGxldCByZWZUaGVhZENlbGxzID0gVGFibGVDb2x1bW5zLmdldEhlYWRlckNlbGxzKHJlZlRoZWFkLGRlZmF1bHRIZWFkZXJSb3dJbmRleCk7XHJcbiAgICBsZXQgcmVhbENvbHVtbkluZGV4PTA7XHJcbiAgICByZXR1cm4gdGhlYWRDZWxscy5tYXAoKGNlbGwsaW5kZXgpPT57XHJcbiAgICAgIGxldCBvYmogPSB7XHJcbiAgICAgICAgaW5kZXg6IHJlYWxDb2x1bW5JbmRleCxcclxuICAgICAgICB0aXRsZTogY2VsbC50ZXh0Q29udGVudCxcclxuICAgICAgICBjZWxsLFxyXG4gICAgICAgIGNvbFNwYW46Y2VsbC5jb2xTcGFuXHJcbiAgICAgIH07XHJcbiAgICAgIGlmKHJlZlRoZWFkQ2VsbHMhPW51bGwpe29iai5yZWZDZWxsID0gcmVmVGhlYWRDZWxsc1tpbmRleF19XHJcbiAgICAgIC8vIHdlIG5lZWQgdG8gaW5jcmVtZW50IHRoZSBjb2xzcGFuIG9ubHkgZm9yIGNvbHVtbnMgdGhhdCBmb2xsb3cgcm93aGVhZGVyIGJlY2F1c2UgdGhlIGJsb2NrIGlzIG5vdCBpbiBkYXRhLlxyXG4gICAgICByZWFsQ29sdW1uSW5kZXg9IHJlYWxDb2x1bW5JbmRleD4wPyhyZWFsQ29sdW1uSW5kZXggKyBjZWxsLmNvbFNwYW4pOnJlYWxDb2x1bW5JbmRleCsxO1xyXG4gICAgICByZXR1cm4gb2JqO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IFRhYmxlQ29sdW1ucztcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yLXNvcnQtdGFibGUvc3JjL3RhYmxlLWNvbHVtbnMuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _tableColumns = __webpack_require__(11);\n\nvar _tableColumns2 = _interopRequireDefault(_tableColumns);\n\nvar _rReportalBase = __webpack_require__(1);\n\nvar _rReportalBase2 = _interopRequireDefault(_rReportalBase);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Created by IvanP on 07.09.2016.\r\n */\nwindow.Reportal = window.Reportal || {};\n_rReportalBase2.default.mixin(window.Reportal, {\n  TableColumns: _tableColumns2.default\n});\n\nexports.default = _tableColumns2.default;\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3ItdGFibGUtY29sdW1ucy9zcmMvbWFpbi5qcz8xZjg4Il0sIm5hbWVzIjpbIndpbmRvdyIsIlJlcG9ydGFsIiwibWl4aW4iLCJUYWJsZUNvbHVtbnMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUdBOzs7O0FBQ0E7Ozs7OztBQUpBOzs7QUFNQUEsT0FBT0MsUUFBUCxHQUFrQkQsT0FBT0MsUUFBUCxJQUFtQixFQUFyQztBQUNBLHdCQUFhQyxLQUFiLENBQW1CRixPQUFPQyxRQUExQixFQUFtQztBQUNqQ0U7QUFEaUMsQ0FBbkMiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ3JlYXRlZCBieSBJdmFuUCBvbiAwNy4wOS4yMDE2LlxyXG4gKi9cclxuaW1wb3J0IFRhYmxlQ29sdW1ucyBmcm9tIFwiLi90YWJsZS1jb2x1bW5zXCI7XHJcbmltcG9ydCBSZXBvcnRhbEJhc2UgZnJvbSBcInItcmVwb3J0YWwtYmFzZVwiO1xyXG5cclxud2luZG93LlJlcG9ydGFsID0gd2luZG93LlJlcG9ydGFsIHx8IHt9O1xyXG5SZXBvcnRhbEJhc2UubWl4aW4od2luZG93LlJlcG9ydGFsLHtcclxuICBUYWJsZUNvbHVtbnMsXHJcbn0pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVGFibGVDb2x1bW5zO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3ItdGFibGUtY29sdW1ucy9zcmMvbWFpbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 11 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * Created by IvanP on 09.09.2016.\r\n */\n\nvar TableColumns = function () {\n  /**\r\n   * Creates an array of objects corresponding to the cells of `defaultHeaderRow`.\r\n   * @param {Object} options - options passed to configure the Sorting\r\n   * @param {HTMLTableElement} options.source - source table sorting will be applied to\r\n   * @param {HTMLTableElement} options.refSource - floating header if any\r\n   * @param {Number|Object} [options.defaultHeaderRow=-1] - index of the row in `thead` (incremented from 0) that will have sorting enabled for columns. If `-1` then last row.\r\n   * @return {{index:Number, title:String, colSpan:Number, cell: HTMLTableCellElement, ?refCell:HTMLTableCellElement}} - an array of objects that have this structure\r\n   * */\n  function TableColumns(options) {\n    _classCallCheck(this, TableColumns);\n\n    var source = options.source,\n        refSource = options.refSource,\n        _options$defaultHeade = options.defaultHeaderRow,\n        defaultHeaderRow = _options$defaultHeade === undefined ? -1 : _options$defaultHeade;\n\n    var thead = void 0,\n        refThead = void 0;\n    if (source) {\n      thead = TableColumns.getHeader(source);\n    } else {\n      throw new TypeError('`source` table is not specified, cannot create TableColumns');\n    }\n    if (refSource) {\n      refThead = TableColumns.getHeader(refSource);\n    }\n    return TableColumns.computeColumns(thead, refThead, defaultHeaderRow);\n  }\n\n  /**\r\n   * Gets a header\r\n   * @param {HTMLTableElement} source - source table headers are created for\r\n   * */\n\n\n  _createClass(TableColumns, null, [{\n    key: 'getHeader',\n    value: function getHeader(source) {\n      if (source && source.tagName == 'TABLE') {\n        var header = source.querySelector(\"thead\");\n        if (header && header.children.length > 0) {\n          return header;\n        } else {\n          throw new TypeError('`source` table has no header or rows');\n        }\n      } else {\n        throw new TypeError('`source` is not specified or is not a table');\n      }\n    }\n\n    /**\r\n     * Calculates defaultHeaderRow for a passed `thead`\r\n     * @param {!HTMLTableElement} thead - source table header\r\n     * @param {!Number} defaultHeaderRowIndex - index of the row in `thead` (incremented from 0) that will be considered default to have actions executed upon.\r\n     * @return {{index:Number, row: HTMLTableRowElement}}\r\n     * */\n\n  }, {\n    key: 'getDefaultHeaderRow',\n    value: function getDefaultHeaderRow(thead, defaultHeaderRowIndex) {\n      // calculate default header row\n      var headerRows = thead.children,\n          headerRowIndex = defaultHeaderRowIndex == -1 ? headerRows.length + defaultHeaderRowIndex : defaultHeaderRowIndex;\n      return {\n        index: headerRowIndex,\n        row: headerRows.item(headerRowIndex)\n      };\n    }\n\n    /**\r\n     * Gets an array of header cell nodes from default header row\r\n     * @param {?HTMLTableElement} thead - source table header\r\n     * @param {!Number} defaultHeaderRowIndex - index of the row in `thead` (incremented from 0) that will be considered default to have actions executed upon.\r\n     * @return {?Array} Returns an array of header cell nodes or null if `thead` is not specified\r\n     * */\n\n  }, {\n    key: 'getHeaderCells',\n    value: function getHeaderCells(thead, defaultHeaderRowIndex) {\n      if (thead) {\n        if (defaultHeaderRowIndex != null) {\n          var _ret = function () {\n            var defaultHeaderRow = TableColumns.getDefaultHeaderRow(thead, defaultHeaderRowIndex);\n            var headerRows = thead.children;\n            var rowsLength = headerRows.length;\n            var abstr = {};\n\n            var _loop = function _loop(r) {\n              var row = headerRows.item(r);\n              var augmentIndex = 0; // index that will account for colSpan of upper rows' cells\n              [].slice.call(row.children).forEach(function (cell, index) {\n                //iterate through cells\n                for (var rs = 0; rs <= cell.rowSpan - 1; rs++) {\n                  //spread cell across its rowspan\n                  var rowA = abstr[r + rs] = abstr[r + rs] || {}; //create row if not exists\n                  if (!rowA[augmentIndex]) {\n                    //insert cell into slot if not filled\n                    rowA[augmentIndex] = cell;\n                  } else {\n                    //if filled look for the next empty because rowspanned columns fill them in a linear way\n                    var i = 0;\n                    while (true) {\n                      if (!rowA[i]) {\n                        rowA[i] = cell;\n                        augmentIndex = i;\n                        break;\n                      }\n                      i++;\n                    }\n                  }\n                }\n                augmentIndex += cell.colSpan;\n              });\n            };\n\n            for (var r = 0; r < rowsLength; r++) {\n              _loop(r);\n            }\n            return {\n              v: Object.keys(abstr[defaultHeaderRow.index]).map(function (k) {\n                return abstr[defaultHeaderRow.index][k];\n              })\n            };\n          }();\n\n          if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n        } else {\n          throw new TypeError('TableColumns.getHeaderCells: defaultHeaderRowIndex is not specified or is not a Number');\n        }\n      }\n      return null;\n    }\n\n    /**\r\n     * Gets an array of columns from the table\r\n     * @param {!HTMLTableElement} thead - source table header\r\n     * @param {!HTMLTableElement} refThead - reference table header from floating header if any\r\n     * @param {Number} defaultHeaderRowIndex - index of the row in `thead` (incremented from 0) that will be considered default to have actions executed upon.\r\n     * @return {?Array} Returns an array of header cell nodes or null if `thead` is not specified\r\n     * */\n\n  }, {\n    key: 'computeColumns',\n    value: function computeColumns(thead, refThead, defaultHeaderRowIndex) {\n      var theadCells = TableColumns.getHeaderCells(thead, defaultHeaderRowIndex);\n      var refTheadCells = TableColumns.getHeaderCells(refThead, defaultHeaderRowIndex);\n      var realColumnIndex = 0;\n      return theadCells.map(function (cell, index) {\n        var obj = {\n          index: realColumnIndex,\n          title: cell.textContent,\n          cell: cell,\n          colSpan: cell.colSpan\n        };\n        if (refTheadCells != null) {\n          obj.refCell = refTheadCells[index];\n        }\n        // we need to increment the colspan only for columns that follow rowheader because the block is not in data.\n        realColumnIndex = realColumnIndex > 0 ? realColumnIndex + cell.colSpan : realColumnIndex + 1;\n        return obj;\n      });\n    }\n  }]);\n\n  return TableColumns;\n}();\n\nexports.default = TableColumns;\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3ItdGFibGUtY29sdW1ucy9zcmMvdGFibGUtY29sdW1ucy5qcz9kMjk4Il0sIm5hbWVzIjpbIlRhYmxlQ29sdW1ucyIsIm9wdGlvbnMiLCJzb3VyY2UiLCJyZWZTb3VyY2UiLCJkZWZhdWx0SGVhZGVyUm93IiwidGhlYWQiLCJyZWZUaGVhZCIsImdldEhlYWRlciIsIlR5cGVFcnJvciIsImNvbXB1dGVDb2x1bW5zIiwidGFnTmFtZSIsImhlYWRlciIsInF1ZXJ5U2VsZWN0b3IiLCJjaGlsZHJlbiIsImxlbmd0aCIsImRlZmF1bHRIZWFkZXJSb3dJbmRleCIsImhlYWRlclJvd3MiLCJoZWFkZXJSb3dJbmRleCIsImluZGV4Iiwicm93IiwiaXRlbSIsImdldERlZmF1bHRIZWFkZXJSb3ciLCJyb3dzTGVuZ3RoIiwiYWJzdHIiLCJyIiwiYXVnbWVudEluZGV4Iiwic2xpY2UiLCJjYWxsIiwiZm9yRWFjaCIsImNlbGwiLCJycyIsInJvd1NwYW4iLCJyb3dBIiwiaSIsImNvbFNwYW4iLCJPYmplY3QiLCJrZXlzIiwibWFwIiwiayIsInRoZWFkQ2VsbHMiLCJnZXRIZWFkZXJDZWxscyIsInJlZlRoZWFkQ2VsbHMiLCJyZWFsQ29sdW1uSW5kZXgiLCJvYmoiLCJ0aXRsZSIsInRleHRDb250ZW50IiwicmVmQ2VsbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7SUFJTUEsWTtBQUNKOzs7Ozs7OztBQVFBLHdCQUFZQyxPQUFaLEVBQW9CO0FBQUE7O0FBQUEsUUFDYkMsTUFEYSxHQUMyQkQsT0FEM0IsQ0FDYkMsTUFEYTtBQUFBLFFBQ05DLFNBRE0sR0FDMkJGLE9BRDNCLENBQ05FLFNBRE07QUFBQSxnQ0FDMkJGLE9BRDNCLENBQ0lHLGdCQURKO0FBQUEsUUFDSUEsZ0JBREoseUNBQ3FCLENBQUMsQ0FEdEI7O0FBRWxCLFFBQUlDLGNBQUo7QUFBQSxRQUFVQyxpQkFBVjtBQUNBLFFBQUdKLE1BQUgsRUFBVTtBQUFDRyxjQUFNTCxhQUFhTyxTQUFiLENBQXVCTCxNQUF2QixDQUFOO0FBQXFDLEtBQWhELE1BQXNEO0FBQUMsWUFBTSxJQUFJTSxTQUFKLENBQWMsNkRBQWQsQ0FBTjtBQUFtRjtBQUMxSSxRQUFHTCxTQUFILEVBQWE7QUFBQ0csaUJBQVNOLGFBQWFPLFNBQWIsQ0FBdUJKLFNBQXZCLENBQVQ7QUFBMkM7QUFDekQsV0FBT0gsYUFBYVMsY0FBYixDQUE0QkosS0FBNUIsRUFBa0NDLFFBQWxDLEVBQTJDRixnQkFBM0MsQ0FBUDtBQUNEOztBQUVEOzs7Ozs7Ozs4QkFJaUJGLE0sRUFBTztBQUN0QixVQUFHQSxVQUFVQSxPQUFPUSxPQUFQLElBQWtCLE9BQS9CLEVBQXVDO0FBQ3JDLFlBQUlDLFNBQVNULE9BQU9VLGFBQVAsQ0FBcUIsT0FBckIsQ0FBYjtBQUNBLFlBQUdELFVBQVVBLE9BQU9FLFFBQVAsQ0FBZ0JDLE1BQWhCLEdBQXVCLENBQXBDLEVBQXVDO0FBQ3JDLGlCQUFPSCxNQUFQO0FBQ0QsU0FGRCxNQUVPO0FBQ0wsZ0JBQU0sSUFBSUgsU0FBSixDQUFjLHNDQUFkLENBQU47QUFDRDtBQUNGLE9BUEQsTUFPTztBQUNMLGNBQU0sSUFBSUEsU0FBSixDQUFjLDZDQUFkLENBQU47QUFDRDtBQUNGOztBQUVEOzs7Ozs7Ozs7d0NBTTJCSCxLLEVBQU1VLHFCLEVBQXNCO0FBQ3JEO0FBQ0EsVUFBSUMsYUFBYVgsTUFBTVEsUUFBdkI7QUFBQSxVQUNFSSxpQkFBaUJGLHlCQUF1QixDQUFDLENBQXhCLEdBQTRCQyxXQUFXRixNQUFYLEdBQW9CQyxxQkFBaEQsR0FBd0VBLHFCQUQzRjtBQUVBLGFBQU87QUFDTEcsZUFBTUQsY0FERDtBQUVMRSxhQUFJSCxXQUFXSSxJQUFYLENBQWdCSCxjQUFoQjtBQUZDLE9BQVA7QUFJRDs7QUFFRDs7Ozs7Ozs7O21DQU1zQlosSyxFQUFNVSxxQixFQUFzQjtBQUNoRCxVQUFHVixLQUFILEVBQVM7QUFDUCxZQUFHVSx5QkFBdUIsSUFBMUIsRUFBK0I7QUFBQTtBQUM3QixnQkFBSVgsbUJBQW1CSixhQUFhcUIsbUJBQWIsQ0FBaUNoQixLQUFqQyxFQUF1Q1UscUJBQXZDLENBQXZCO0FBQ0EsZ0JBQUlDLGFBQWFYLE1BQU1RLFFBQXZCO0FBQ0EsZ0JBQUlTLGFBQWFOLFdBQVdGLE1BQTVCO0FBQ0EsZ0JBQUlTLFFBQVEsRUFBWjs7QUFKNkIsdUNBS3JCQyxDQUxxQjtBQU0zQixrQkFBSUwsTUFBTUgsV0FBV0ksSUFBWCxDQUFnQkksQ0FBaEIsQ0FBVjtBQUNBLGtCQUFJQyxlQUFhLENBQWpCLENBUDJCLENBT1A7QUFDcEIsaUJBQUdDLEtBQUgsQ0FBU0MsSUFBVCxDQUFjUixJQUFJTixRQUFsQixFQUE0QmUsT0FBNUIsQ0FBb0MsVUFBQ0MsSUFBRCxFQUFNWCxLQUFOLEVBQWM7QUFBRTtBQUNsRCxxQkFBSSxJQUFJWSxLQUFHLENBQVgsRUFBY0EsTUFBSUQsS0FBS0UsT0FBTCxHQUFhLENBQS9CLEVBQWlDRCxJQUFqQyxFQUFzQztBQUFFO0FBQ3RDLHNCQUFJRSxPQUFPVCxNQUFNQyxJQUFFTSxFQUFSLElBQWNQLE1BQU1DLElBQUVNLEVBQVIsS0FBZSxFQUF4QyxDQURvQyxDQUNRO0FBQzVDLHNCQUFHLENBQUNFLEtBQUtQLFlBQUwsQ0FBSixFQUF1QjtBQUFFO0FBQ3ZCTyx5QkFBS1AsWUFBTCxJQUFtQkksSUFBbkI7QUFDRCxtQkFGRCxNQUVPO0FBQUU7QUFDUCx3QkFBSUksSUFBRSxDQUFOO0FBQ0EsMkJBQU0sSUFBTixFQUFXO0FBQ1QsMEJBQUcsQ0FBQ0QsS0FBS0MsQ0FBTCxDQUFKLEVBQVk7QUFDVkQsNkJBQUtDLENBQUwsSUFBUUosSUFBUjtBQUNBSix1Q0FBYVEsQ0FBYjtBQUNBO0FBQ0Q7QUFDREE7QUFDRDtBQUNGO0FBQ0Y7QUFDRFIsZ0NBQWNJLEtBQUtLLE9BQW5CO0FBQ0QsZUFsQkQ7QUFSMkI7O0FBSzdCLGlCQUFJLElBQUlWLElBQUUsQ0FBVixFQUFZQSxJQUFFRixVQUFkLEVBQXlCRSxHQUF6QixFQUE2QjtBQUFBLG9CQUFyQkEsQ0FBcUI7QUFzQjVCO0FBQ0Q7QUFBQSxpQkFBT1csT0FBT0MsSUFBUCxDQUFZYixNQUFNbkIsaUJBQWlCYyxLQUF2QixDQUFaLEVBQTJDbUIsR0FBM0MsQ0FBK0M7QUFBQSx1QkFBS2QsTUFBTW5CLGlCQUFpQmMsS0FBdkIsRUFBOEJvQixDQUE5QixDQUFMO0FBQUEsZUFBL0M7QUFBUDtBQTVCNkI7O0FBQUE7QUE2QjlCLFNBN0JELE1BNkJPO0FBQ0wsZ0JBQU0sSUFBSTlCLFNBQUosQ0FBYyx3RkFBZCxDQUFOO0FBQ0Q7QUFDRjtBQUNELGFBQU8sSUFBUDtBQUNEOztBQUVEOzs7Ozs7Ozs7O21DQU9zQkgsSyxFQUFNQyxRLEVBQVNTLHFCLEVBQXNCO0FBQ3pELFVBQUl3QixhQUFhdkMsYUFBYXdDLGNBQWIsQ0FBNEJuQyxLQUE1QixFQUFrQ1UscUJBQWxDLENBQWpCO0FBQ0EsVUFBSTBCLGdCQUFnQnpDLGFBQWF3QyxjQUFiLENBQTRCbEMsUUFBNUIsRUFBcUNTLHFCQUFyQyxDQUFwQjtBQUNBLFVBQUkyQixrQkFBZ0IsQ0FBcEI7QUFDQSxhQUFPSCxXQUFXRixHQUFYLENBQWUsVUFBQ1IsSUFBRCxFQUFNWCxLQUFOLEVBQWM7QUFDbEMsWUFBSXlCLE1BQU07QUFDUnpCLGlCQUFPd0IsZUFEQztBQUVSRSxpQkFBT2YsS0FBS2dCLFdBRko7QUFHUmhCLG9CQUhRO0FBSVJLLG1CQUFRTCxLQUFLSztBQUpMLFNBQVY7QUFNQSxZQUFHTyxpQkFBZSxJQUFsQixFQUF1QjtBQUFDRSxjQUFJRyxPQUFKLEdBQWNMLGNBQWN2QixLQUFkLENBQWQ7QUFBbUM7QUFDM0Q7QUFDQXdCLDBCQUFpQkEsa0JBQWdCLENBQWhCLEdBQW1CQSxrQkFBa0JiLEtBQUtLLE9BQTFDLEdBQW1EUSxrQkFBZ0IsQ0FBcEY7QUFDQSxlQUFPQyxHQUFQO0FBQ0QsT0FYTSxDQUFQO0FBWUQ7Ozs7OztrQkFFWTNDLFkiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ3JlYXRlZCBieSBJdmFuUCBvbiAwOS4wOS4yMDE2LlxyXG4gKi9cclxuXHJcbmNsYXNzIFRhYmxlQ29sdW1uc3tcclxuICAvKipcclxuICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG9iamVjdHMgY29ycmVzcG9uZGluZyB0byB0aGUgY2VsbHMgb2YgYGRlZmF1bHRIZWFkZXJSb3dgLlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9ucyBwYXNzZWQgdG8gY29uZmlndXJlIHRoZSBTb3J0aW5nXHJcbiAgICogQHBhcmFtIHtIVE1MVGFibGVFbGVtZW50fSBvcHRpb25zLnNvdXJjZSAtIHNvdXJjZSB0YWJsZSBzb3J0aW5nIHdpbGwgYmUgYXBwbGllZCB0b1xyXG4gICAqIEBwYXJhbSB7SFRNTFRhYmxlRWxlbWVudH0gb3B0aW9ucy5yZWZTb3VyY2UgLSBmbG9hdGluZyBoZWFkZXIgaWYgYW55XHJcbiAgICogQHBhcmFtIHtOdW1iZXJ8T2JqZWN0fSBbb3B0aW9ucy5kZWZhdWx0SGVhZGVyUm93PS0xXSAtIGluZGV4IG9mIHRoZSByb3cgaW4gYHRoZWFkYCAoaW5jcmVtZW50ZWQgZnJvbSAwKSB0aGF0IHdpbGwgaGF2ZSBzb3J0aW5nIGVuYWJsZWQgZm9yIGNvbHVtbnMuIElmIGAtMWAgdGhlbiBsYXN0IHJvdy5cclxuICAgKiBAcmV0dXJuIHt7aW5kZXg6TnVtYmVyLCB0aXRsZTpTdHJpbmcsIGNvbFNwYW46TnVtYmVyLCBjZWxsOiBIVE1MVGFibGVDZWxsRWxlbWVudCwgP3JlZkNlbGw6SFRNTFRhYmxlQ2VsbEVsZW1lbnR9fSAtIGFuIGFycmF5IG9mIG9iamVjdHMgdGhhdCBoYXZlIHRoaXMgc3RydWN0dXJlXHJcbiAgICogKi9cclxuICBjb25zdHJ1Y3RvcihvcHRpb25zKXtcclxuICAgIGxldCB7c291cmNlLHJlZlNvdXJjZSxkZWZhdWx0SGVhZGVyUm93PS0xfSA9IG9wdGlvbnM7XHJcbiAgICBsZXQgdGhlYWQscmVmVGhlYWQ7XHJcbiAgICBpZihzb3VyY2Upe3RoZWFkPVRhYmxlQ29sdW1ucy5nZXRIZWFkZXIoc291cmNlKX0gZWxzZSB7dGhyb3cgbmV3IFR5cGVFcnJvcignYHNvdXJjZWAgdGFibGUgaXMgbm90IHNwZWNpZmllZCwgY2Fubm90IGNyZWF0ZSBUYWJsZUNvbHVtbnMnKX1cclxuICAgIGlmKHJlZlNvdXJjZSl7cmVmVGhlYWQ9VGFibGVDb2x1bW5zLmdldEhlYWRlcihyZWZTb3VyY2UpfVxyXG4gICAgcmV0dXJuIFRhYmxlQ29sdW1ucy5jb21wdXRlQ29sdW1ucyh0aGVhZCxyZWZUaGVhZCxkZWZhdWx0SGVhZGVyUm93KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgYSBoZWFkZXJcclxuICAgKiBAcGFyYW0ge0hUTUxUYWJsZUVsZW1lbnR9IHNvdXJjZSAtIHNvdXJjZSB0YWJsZSBoZWFkZXJzIGFyZSBjcmVhdGVkIGZvclxyXG4gICAqICovXHJcbiAgc3RhdGljIGdldEhlYWRlcihzb3VyY2Upe1xyXG4gICAgaWYoc291cmNlICYmIHNvdXJjZS50YWdOYW1lID09ICdUQUJMRScpe1xyXG4gICAgICBsZXQgaGVhZGVyID0gc291cmNlLnF1ZXJ5U2VsZWN0b3IoXCJ0aGVhZFwiKTtcclxuICAgICAgaWYoaGVhZGVyICYmIGhlYWRlci5jaGlsZHJlbi5sZW5ndGg+MCkge1xyXG4gICAgICAgIHJldHVybiBoZWFkZXI7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYHNvdXJjZWAgdGFibGUgaGFzIG5vIGhlYWRlciBvciByb3dzJyk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Bzb3VyY2VgIGlzIG5vdCBzcGVjaWZpZWQgb3IgaXMgbm90IGEgdGFibGUnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGN1bGF0ZXMgZGVmYXVsdEhlYWRlclJvdyBmb3IgYSBwYXNzZWQgYHRoZWFkYFxyXG4gICAqIEBwYXJhbSB7IUhUTUxUYWJsZUVsZW1lbnR9IHRoZWFkIC0gc291cmNlIHRhYmxlIGhlYWRlclxyXG4gICAqIEBwYXJhbSB7IU51bWJlcn0gZGVmYXVsdEhlYWRlclJvd0luZGV4IC0gaW5kZXggb2YgdGhlIHJvdyBpbiBgdGhlYWRgIChpbmNyZW1lbnRlZCBmcm9tIDApIHRoYXQgd2lsbCBiZSBjb25zaWRlcmVkIGRlZmF1bHQgdG8gaGF2ZSBhY3Rpb25zIGV4ZWN1dGVkIHVwb24uXHJcbiAgICogQHJldHVybiB7e2luZGV4Ok51bWJlciwgcm93OiBIVE1MVGFibGVSb3dFbGVtZW50fX1cclxuICAgKiAqL1xyXG4gIHN0YXRpYyBnZXREZWZhdWx0SGVhZGVyUm93KHRoZWFkLGRlZmF1bHRIZWFkZXJSb3dJbmRleCl7XHJcbiAgICAvLyBjYWxjdWxhdGUgZGVmYXVsdCBoZWFkZXIgcm93XHJcbiAgICBsZXQgaGVhZGVyUm93cyA9IHRoZWFkLmNoaWxkcmVuLFxyXG4gICAgICBoZWFkZXJSb3dJbmRleCA9IGRlZmF1bHRIZWFkZXJSb3dJbmRleD09LTEgPyBoZWFkZXJSb3dzLmxlbmd0aCArIGRlZmF1bHRIZWFkZXJSb3dJbmRleCA6IGRlZmF1bHRIZWFkZXJSb3dJbmRleDtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGluZGV4OmhlYWRlclJvd0luZGV4LFxyXG4gICAgICByb3c6aGVhZGVyUm93cy5pdGVtKGhlYWRlclJvd0luZGV4KVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgYW4gYXJyYXkgb2YgaGVhZGVyIGNlbGwgbm9kZXMgZnJvbSBkZWZhdWx0IGhlYWRlciByb3dcclxuICAgKiBAcGFyYW0gez9IVE1MVGFibGVFbGVtZW50fSB0aGVhZCAtIHNvdXJjZSB0YWJsZSBoZWFkZXJcclxuICAgKiBAcGFyYW0geyFOdW1iZXJ9IGRlZmF1bHRIZWFkZXJSb3dJbmRleCAtIGluZGV4IG9mIHRoZSByb3cgaW4gYHRoZWFkYCAoaW5jcmVtZW50ZWQgZnJvbSAwKSB0aGF0IHdpbGwgYmUgY29uc2lkZXJlZCBkZWZhdWx0IHRvIGhhdmUgYWN0aW9ucyBleGVjdXRlZCB1cG9uLlxyXG4gICAqIEByZXR1cm4gez9BcnJheX0gUmV0dXJucyBhbiBhcnJheSBvZiBoZWFkZXIgY2VsbCBub2RlcyBvciBudWxsIGlmIGB0aGVhZGAgaXMgbm90IHNwZWNpZmllZFxyXG4gICAqICovXHJcbiAgc3RhdGljIGdldEhlYWRlckNlbGxzKHRoZWFkLGRlZmF1bHRIZWFkZXJSb3dJbmRleCl7XHJcbiAgICBpZih0aGVhZCl7XHJcbiAgICAgIGlmKGRlZmF1bHRIZWFkZXJSb3dJbmRleCE9bnVsbCl7XHJcbiAgICAgICAgbGV0IGRlZmF1bHRIZWFkZXJSb3cgPSBUYWJsZUNvbHVtbnMuZ2V0RGVmYXVsdEhlYWRlclJvdyh0aGVhZCxkZWZhdWx0SGVhZGVyUm93SW5kZXgpO1xyXG4gICAgICAgIGxldCBoZWFkZXJSb3dzID0gdGhlYWQuY2hpbGRyZW47XHJcbiAgICAgICAgbGV0IHJvd3NMZW5ndGggPSBoZWFkZXJSb3dzLmxlbmd0aDtcclxuICAgICAgICBsZXQgYWJzdHIgPSB7fTtcclxuICAgICAgICBmb3IobGV0IHI9MDtyPHJvd3NMZW5ndGg7cisrKXtcclxuICAgICAgICAgIGxldCByb3cgPSBoZWFkZXJSb3dzLml0ZW0ocik7XHJcbiAgICAgICAgICBsZXQgYXVnbWVudEluZGV4PTA7IC8vIGluZGV4IHRoYXQgd2lsbCBhY2NvdW50IGZvciBjb2xTcGFuIG9mIHVwcGVyIHJvd3MnIGNlbGxzXHJcbiAgICAgICAgICBbXS5zbGljZS5jYWxsKHJvdy5jaGlsZHJlbikuZm9yRWFjaCgoY2VsbCxpbmRleCk9PnsgLy9pdGVyYXRlIHRocm91Z2ggY2VsbHNcclxuICAgICAgICAgICAgZm9yKGxldCBycz0wOyByczw9Y2VsbC5yb3dTcGFuLTE7cnMrKyl7IC8vc3ByZWFkIGNlbGwgYWNyb3NzIGl0cyByb3dzcGFuXHJcbiAgICAgICAgICAgICAgbGV0IHJvd0EgPSBhYnN0cltyK3JzXSA9IGFic3RyW3IrcnNdIHx8IHt9OyAvL2NyZWF0ZSByb3cgaWYgbm90IGV4aXN0c1xyXG4gICAgICAgICAgICAgIGlmKCFyb3dBW2F1Z21lbnRJbmRleF0peyAvL2luc2VydCBjZWxsIGludG8gc2xvdCBpZiBub3QgZmlsbGVkXHJcbiAgICAgICAgICAgICAgICByb3dBW2F1Z21lbnRJbmRleF09Y2VsbDtcclxuICAgICAgICAgICAgICB9IGVsc2UgeyAvL2lmIGZpbGxlZCBsb29rIGZvciB0aGUgbmV4dCBlbXB0eSBiZWNhdXNlIHJvd3NwYW5uZWQgY29sdW1ucyBmaWxsIHRoZW0gaW4gYSBsaW5lYXIgd2F5XHJcbiAgICAgICAgICAgICAgICBsZXQgaT0wO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUodHJ1ZSl7XHJcbiAgICAgICAgICAgICAgICAgIGlmKCFyb3dBW2ldKXtcclxuICAgICAgICAgICAgICAgICAgICByb3dBW2ldPWNlbGw7XHJcbiAgICAgICAgICAgICAgICAgICAgYXVnbWVudEluZGV4PWk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhdWdtZW50SW5kZXgrPWNlbGwuY29sU3BhbjtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhYnN0cltkZWZhdWx0SGVhZGVyUm93LmluZGV4XSkubWFwKGsgPT4gYWJzdHJbZGVmYXVsdEhlYWRlclJvdy5pbmRleF1ba10pXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGFibGVDb2x1bW5zLmdldEhlYWRlckNlbGxzOiBkZWZhdWx0SGVhZGVyUm93SW5kZXggaXMgbm90IHNwZWNpZmllZCBvciBpcyBub3QgYSBOdW1iZXInKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbFxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyBhbiBhcnJheSBvZiBjb2x1bW5zIGZyb20gdGhlIHRhYmxlXHJcbiAgICogQHBhcmFtIHshSFRNTFRhYmxlRWxlbWVudH0gdGhlYWQgLSBzb3VyY2UgdGFibGUgaGVhZGVyXHJcbiAgICogQHBhcmFtIHshSFRNTFRhYmxlRWxlbWVudH0gcmVmVGhlYWQgLSByZWZlcmVuY2UgdGFibGUgaGVhZGVyIGZyb20gZmxvYXRpbmcgaGVhZGVyIGlmIGFueVxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBkZWZhdWx0SGVhZGVyUm93SW5kZXggLSBpbmRleCBvZiB0aGUgcm93IGluIGB0aGVhZGAgKGluY3JlbWVudGVkIGZyb20gMCkgdGhhdCB3aWxsIGJlIGNvbnNpZGVyZWQgZGVmYXVsdCB0byBoYXZlIGFjdGlvbnMgZXhlY3V0ZWQgdXBvbi5cclxuICAgKiBAcmV0dXJuIHs/QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgaGVhZGVyIGNlbGwgbm9kZXMgb3IgbnVsbCBpZiBgdGhlYWRgIGlzIG5vdCBzcGVjaWZpZWRcclxuICAgKiAqL1xyXG4gIHN0YXRpYyBjb21wdXRlQ29sdW1ucyh0aGVhZCxyZWZUaGVhZCxkZWZhdWx0SGVhZGVyUm93SW5kZXgpe1xyXG4gICAgbGV0IHRoZWFkQ2VsbHMgPSBUYWJsZUNvbHVtbnMuZ2V0SGVhZGVyQ2VsbHModGhlYWQsZGVmYXVsdEhlYWRlclJvd0luZGV4KTtcclxuICAgIGxldCByZWZUaGVhZENlbGxzID0gVGFibGVDb2x1bW5zLmdldEhlYWRlckNlbGxzKHJlZlRoZWFkLGRlZmF1bHRIZWFkZXJSb3dJbmRleCk7XHJcbiAgICBsZXQgcmVhbENvbHVtbkluZGV4PTA7XHJcbiAgICByZXR1cm4gdGhlYWRDZWxscy5tYXAoKGNlbGwsaW5kZXgpPT57XHJcbiAgICAgIGxldCBvYmogPSB7XHJcbiAgICAgICAgaW5kZXg6IHJlYWxDb2x1bW5JbmRleCxcclxuICAgICAgICB0aXRsZTogY2VsbC50ZXh0Q29udGVudCxcclxuICAgICAgICBjZWxsLFxyXG4gICAgICAgIGNvbFNwYW46Y2VsbC5jb2xTcGFuXHJcbiAgICAgIH07XHJcbiAgICAgIGlmKHJlZlRoZWFkQ2VsbHMhPW51bGwpe29iai5yZWZDZWxsID0gcmVmVGhlYWRDZWxsc1tpbmRleF19XHJcbiAgICAgIC8vIHdlIG5lZWQgdG8gaW5jcmVtZW50IHRoZSBjb2xzcGFuIG9ubHkgZm9yIGNvbHVtbnMgdGhhdCBmb2xsb3cgcm93aGVhZGVyIGJlY2F1c2UgdGhlIGJsb2NrIGlzIG5vdCBpbiBkYXRhLlxyXG4gICAgICByZWFsQ29sdW1uSW5kZXg9IHJlYWxDb2x1bW5JbmRleD4wPyhyZWFsQ29sdW1uSW5kZXggKyBjZWxsLmNvbFNwYW4pOnJlYWxDb2x1bW5JbmRleCsxO1xyXG4gICAgICByZXR1cm4gb2JqO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IFRhYmxlQ29sdW1ucztcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yLXRhYmxlLWNvbHVtbnMvc3JjL3RhYmxlLWNvbHVtbnMuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _rReportalBase = __webpack_require__(1);\n\nvar _rReportalBase2 = _interopRequireDefault(_rReportalBase);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TableFloatingHeaderStyle = __webpack_require__(17);\n\n/**\r\n * FixedHeader class enables a fixed header appear on tables that have `.reportal-fixed-header` class when the table header is scrolled under address bar.\r\n */\n\nvar TableFloatingHeader = function () {\n  /**\r\n   * @param {HTMLTableElement} source - source table that needs a cloned header\r\n   * */\n  function TableFloatingHeader(source) {\n    var _this = this;\n\n    _classCallCheck(this, TableFloatingHeader);\n\n    if ((typeof source === 'undefined' ? 'undefined' : _typeof(source)) == undefined || source.tagName != 'TABLE') {\n      throw new TypeError('`source` must be defined and must be a table');\n    }\n\n    TableFloatingHeader.wrapTable(source);\n\n    /**\r\n     *  The cloned floating header without TBODY\r\n     *  @type {HTMLTableElement}\r\n     *  @memberOf TableFloatingHeader\r\n     *  */\n    this.header = TableFloatingHeader.cloneHeader(source);\n\n    /**\r\n     *  The source table\r\n     *  @type {HTMLTableElement}\r\n     *  @memberOf TableFloatingHeader\r\n     *  */\n    this.source = source;\n    /**\r\n     *  Visibility status of the table\r\n     *  @type {Boolean}\r\n     *  @memberOf TableFloatingHeader\r\n     *  */\n    this.visible = false;\n\n    this._meta = {\n      lastScrollY: 0,\n      sourceTHEAD: source.querySelector('thead'),\n      ticking: false\n    };\n\n    window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\n    this.resizeFixed();\n\n    window.addEventListener(\"resize\", function () {\n      return _this.resizeFixed.call(_this);\n    }, false); // attach a resize listener to resize the header\n    window.addEventListener(\"scroll\", function () {\n      return _this.scrollFixed.call(_this);\n    }, false); // attach a resize listener to resize the header\n  }\n\n  /**\r\n   * calculates offset height of the table\r\n   * @param {HTMLTableElement} source - source table\r\n   * */\n\n\n  _createClass(TableFloatingHeader, [{\n    key: 'requestTick',\n\n\n    /**\r\n     * function that polls the callback\r\n     * @param {Function} callback - function that's going to be passed to `requestAnimationFrame` for execution\r\n     * */\n    value: function requestTick(callback) {\n      if (!this._meta.ticking) {\n        requestAnimationFrame(callback);\n        this._meta.ticking = true;\n      }\n    }\n  }, {\n    key: 'resizeFixed',\n\n\n    /**\r\n     * Calculates widths for all columns in the fixed header based on the `source`\r\n     * */\n    value: function resizeFixed() {\n      this.requestTick(TableFloatingHeader._resizeCallback.bind(this));\n    }\n  }, {\n    key: 'scrollFixed',\n\n\n    /**\r\n     * Displays a fixed header when the table header is scrolled off the screen\r\n     * */\n    value: function scrollFixed() {\n      this._meta.lastScrollY = window.pageYOffset;\n      this.requestTick(TableFloatingHeader._scrollCallback.bind(this));\n    }\n  }], [{\n    key: 'calcOffsetHeight',\n    value: function calcOffsetHeight(source) {\n      this._meta.tableOffsetTop = source.parentNode.offsetTop;\n      this._meta.tableOffsetBottom = source.parentNode.offsetTop + source.offsetHeight - this._meta.sourceTHEAD.offsetHeight;\n    }\n\n    /**\r\n     * Event reporting that a header is visible\r\n     * @event TableFloatingHeader~reportal-fixed-header-visible\r\n     */\n\n    /**\r\n     * Event reporting that a header is hidden\r\n     * @event TableFloatingHeader~reportal-fixed-header-hidden\r\n     */\n\n    /**\r\n     * sets visibility of the table\r\n     * @param {HTMLTableElement} source - source table\r\n     * @param {HTMLTableElement} header - cloned table with header only\r\n     * @param {Boolean} visible - visibility status\r\n     * @fires TableFloatingHeader~reportal-fixed-header-visible\r\n     * @fires TableFloatingHeader~reportal-fixed-header-visible\r\n     * */\n\n  }, {\n    key: 'setVisibility',\n    value: function setVisibility(source, header, visible) {\n      if (visible) {\n        header.style.display = 'table';\n        source.dispatchEvent(_rReportalBase2.default.newEvent('reportal-fixed-header-visible'));\n      } else {\n        header.style.display = 'none';\n        source.dispatchEvent(_rReportalBase2.default.newEvent('reportal-fixed-header-hidden'));\n      }\n    }\n\n    /**\r\n     * wraps the `source` table into a `div.aggregatedTableContainer`\r\n     * */\n\n  }, {\n    key: 'wrapTable',\n    value: function wrapTable(source) {\n      var wrapper = document.createElement('div');\n      wrapper.classList.add('aggregatedTableContainer');\n      source.parentNode.appendChild(wrapper);\n      wrapper.appendChild(source);\n    }\n\n    /**\r\n     * clones header of `source` table and appends to wrapper\r\n     * */\n\n  }, {\n    key: 'cloneHeader',\n    value: function cloneHeader(source) {\n      var header = source.cloneNode(true);\n      header.classList.add('fixed');\n      source.parentNode.appendChild(header);\n      [].slice.call(header.children).forEach(function (child) {\n        if (child.nodeName == 'TBODY') {\n          header.removeChild(child);\n        }\n      });\n      return header;\n    }\n  }, {\n    key: '_resizeCallback',\n    value: function _resizeCallback() {\n      var initialHeader = this._meta.sourceTHEAD.querySelectorAll('tr>*'),\n          clonedHeader = this.header.querySelectorAll('thead>tr>*'),\n          headerWidth = this.source.offsetWidth + 'px',\n          widths = [];\n      // do reflow\n      for (var i = 0; i < initialHeader.length; i++) {\n        widths.push(initialHeader[i].offsetWidth);\n      }\n      //do repaint\n      for (var c = 0; c < clonedHeader.length; c++) {\n        clonedHeader[c].style.width = widths[c] + 'px';\n      }\n      this.header.style.width = headerWidth;\n\n      TableFloatingHeader.calcOffsetHeight.call(this, this.source); //recalc height of the table after reflow\n      this._meta.ticking = false;\n      this.scrollFixed(); // to compensate top offset in case after resize the table is less in height and top has changed\n    }\n  }, {\n    key: '_scrollCallback',\n    value: function _scrollCallback() {\n      var offset = this._meta.lastScrollY,\n          tableOffsetTop = this._meta.tableOffsetTop,\n          tableOffsetBottom = this._meta.tableOffsetBottom;\n      if ((offset < tableOffsetTop || offset > tableOffsetBottom) && this.visible) {\n        this.visible = false;\n        TableFloatingHeader.setVisibility(this.source, this.header, false);\n      } else if (offset >= tableOffsetTop && offset <= tableOffsetBottom) {\n        this.header.style.top = offset - tableOffsetTop + 'px';\n        if (!this.visible) {\n          this.visible = true;\n          TableFloatingHeader.setVisibility(this.source, this.header, true);\n        }\n      }\n      this._meta.ticking = false;\n    }\n  }]);\n\n  return TableFloatingHeader;\n}();\n\nexports.default = TableFloatingHeader;\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _rReportalBase = __webpack_require__(1);\n\nvar _rReportalBase2 = _interopRequireDefault(_rReportalBase);\n\nvar _rAsyncHierarchyTable = __webpack_require__(6);\n\nvar _rAsyncHierarchyTable2 = _interopRequireDefault(_rAsyncHierarchyTable);\n\nvar _mapHierarchy = __webpack_require__(14);\n\nvar _mapHierarchy2 = _interopRequireDefault(_mapHierarchy);\n\nvar _rAggregatedTable = __webpack_require__(5);\n\nvar _rAggregatedTable2 = _interopRequireDefault(_rAggregatedTable);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n__webpack_require__(19);\n\nvar DrilldownMap = function (_MapHierarchy) {\n  _inherits(DrilldownMap, _MapHierarchy);\n\n  /**\n   * Creates a drilldown map. It uses a color function `colorFn` that allows colorcode countries\n   * `colorFn` accepts two attributes: `value` and `target` and must return a color string based on those two attributes.\n   * Make sure hierarchy has `target` loaded from DBDesigner table into each hierarchy level, otherwise a default config `dataClasses` takes precedence on value\n   * Example:\n   *\n   *\n   *    {\n   *    //some constructor configuration above\n   *      colorFn: function(value,target){\n   *        return (value!=null && target!=null)? (value - target >= 0) ? \"#18BC9C\" : ((value >= 0.9*target) ? \"#FF4900\" : \"#E45335\") : undefined;\n   *      }\n   *     //some constructor configuration below\n   *    }\n   *\n    * @param {HTMLTableElement} source - a source drilldown table that contains the initial set of data(with reference group enabled and 1 child level)\n   * @param {String} tableID - id of the `source` table that is the initial source of data (from reportal backend)\n   * @param {Array} rowheaders - a rowheaders array for the loaded table\n   * @param {Object} hierarchy - a hierarchical object for a map to be built upon\n   * @param {String} [initMap=\"custom/world-highres2\"] - the initial map object that's going to be loaded to initialise the map\n   * @param {String} containerID - id of the container the map will be drawn to\n   * @param {Function} mappointCallback - executed when a mappoint (city) is clicked\n   * @param {Function} colorFn - A function that allows custom color coding computation based on value and target.\n   * @param {Number} [valueColumn=1] - Zero-based column index that contains primary value which will be used for map coloring.\n   * @param {Boolean} [fullParentLevelInfo=true] - Display full info of the parent level in right part of the map, rather than the parent level name and the primary value\n   * @param {String} [pageStateId=document.querySelector('#PageStateId').value] - PageStateId\n   * @param {Object} normals - an object where the keys are the names of columns taken from DBDesignerTable and values - their string types: `string`, `number`, `boolean`, `stringArray`, `numberArray`\n   * @param {String} [normalsSeparator=','] - delimiter between values in `stringArray` (`us-ca, us-tx, us-wy`) and `numberArray` (`-31.86,16.38`). They are served as a delimiter-separated string and the delimiter is `,` by default. If you use another one, make sure you specify it here\n   * @param {Object} [options={}] - options passed to HighMap to restyle/reconfigure it\n   * */\n  function DrilldownMap() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        source = _ref.source,\n        rowheaders = _ref.rowheaders,\n        hierarchy = _ref.hierarchy,\n        _ref$initMap = _ref.initMap,\n        initMap = _ref$initMap === undefined ? \"custom/world-highres2\" : _ref$initMap,\n        containerID = _ref.containerID,\n        mappointCallback = _ref.mappointCallback,\n        excludeColumns = _ref.excludeColumns,\n        excludeRows = _ref.excludeRows,\n        _ref$valueColumn = _ref.valueColumn,\n        valueColumn = _ref$valueColumn === undefined ? 1 : _ref$valueColumn,\n        _ref$fullParentLevelI = _ref.fullParentLevelInfo,\n        fullParentLevelInfo = _ref$fullParentLevelI === undefined ? true : _ref$fullParentLevelI,\n        _ref$colorFn = _ref.colorFn,\n        colorFn = _ref$colorFn === undefined ? function (value, target) {\n      return value != null ? value >= 80 ? \"#4caf50\" : value < 80 && value >= 60 ? \"#ffc107\" : \"#ff5722\" : \"blue\";\n    } : _ref$colorFn,\n        _ref$pageStateId = _ref.pageStateId,\n        pageStateId = _ref$pageStateId === undefined ? document.querySelector('#PageStateId') ? document.querySelector('#PageStateId').value : null : _ref$pageStateId,\n        tableID = _ref.tableID,\n        normals = _ref.normals,\n        _ref$normalsSeparator = _ref.normalsSeparator,\n        normalsSeparator = _ref$normalsSeparator === undefined ? \",\" : _ref$normalsSeparator,\n        _ref$options = _ref.options,\n        options = _ref$options === undefined ? {} : _ref$options;\n\n    _classCallCheck(this, DrilldownMap);\n\n    var _this = _possibleConstructorReturn(this, (DrilldownMap.__proto__ || Object.getPrototypeOf(DrilldownMap)).call(this, hierarchy, normals, normalsSeparator));\n\n    _this.constructor.parseTableData({ source: source, excludeRows: excludeRows, excludeColumns: excludeColumns, rowheaders: rowheaders.map(function (rh) {\n        return rh[0];\n      }), flatHierarchy: _this.flatHierarchy });\n    if (colorFn && typeof colorFn == \"function\") {\n      _this.colorFn = colorFn;\n    }\n    _this.valueColumn = valueColumn;\n    _this.pageStateId = pageStateId;\n    _this.tableID = tableID;\n    _this.fullParentLevelInfo = fullParentLevelInfo;\n\n    if (mappointCallback && mappointCallback != null) {\n      if (typeof mappointCallback == 'function') {\n        _this.mappointCallback = mappointCallback;\n      } else {\n        throw new TypeError(\"mappointCallback must be a function\");\n      }\n    }\n    var config = _this.config = _rReportalBase2.default.mixin(options, {/*colorAxis:{dataClasses}*/});\n    if ((typeof Highcharts === \"undefined\" ? \"undefined\" : _typeof(Highcharts)) == undefined) {\n      throw new Error('Highcharts must be declared. Probably they are missing');\n    }\n    if (_typeof(Highcharts.maps) == undefined) {\n      throw new Error('HighMaps must be loaded. Probably they are missing');\n    }\n    //\n    //this.drawMap(rowheaders, containerID, initMap, config);\n    return _this;\n  }\n\n  /**\n   * Parses table passed to it and adds data to `._data` in `hierarchy`\n   * @param {HTMLTableElement} source - source table for data\n   * @param {Number|Array} excludeRows - rows to be excluded from parsing\n   * @param {Array} rowheaders - array of `source` rowheaders\n   * @param {Object} flatHierarchy - flat hierarchy object\n   * */\n\n\n  _createClass(DrilldownMap, [{\n    key: \"initMap\",\n\n\n    /**\n     * Get series for the first time map initialization\n     * @param {Object} curLVL - current level in hierarchy\n     * @param {Array} [series=[]] - series\n     * @returns {Array}\n     * */\n    value: function initMap(curLVL) {\n      var _this2 = this;\n\n      var series = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n      curLVL.subcells.forEach(function (subcell) {\n        if (subcell.mapID) {\n          var seriesItem = _this2.composeSeries(subcell);\n          series.push(seriesItem);\n        }\n      });\n      return series;\n    }\n\n    /**\n     * Load map from HighMaps map collection\n     * @param {String} source\n     * @returns {Promise}\n     * */\n\n  }, {\n    key: \"getSeriesData\",\n\n\n    /**\n     * Creates a single series data for HighMap series option\n     * @param {Object} level - a level in hierarchy\n     * @returns {Object}\n     * */\n    value: function getSeriesData(level) {\n      var _this3 = this;\n\n      var drilldown = level.subcells ? level.text : null;\n      if (typeof level.mapID === 'string') {\n        return [{\n          drilldown: drilldown,\n          code: level.mapID,\n          value: DrilldownMap.getPrimaryValue(level, this.valueColumn),\n          data: level._data\n        }];\n      } else if (Array.isArray(level.mapID)) {\n        return level.mapID.map(function (mapID) {\n\n          return {\n            drilldown: drilldown,\n            code: mapID,\n            value: DrilldownMap.getPrimaryValue(level, _this3.valueColumn),\n            data: level._data\n          };\n        });\n      } else {\n        throw new Error(\"Data element is corrupted\");\n      }\n    }\n\n    /**\n     * Executes `colorFn` passed by user to compute color by passing `value` and `target` to it\n     * @param {Function} colorFn - color function\n     * @param {Number} value - value to test\n     * @param {Number} target - target for the level\n     * */\n\n  }, {\n    key: \"getCoordinateSeries\",\n\n\n    /**\n     * Create a single mappoint series\n     * @param {Object} subcell - a single hierarchy element\n     * @param {Object} mapData\n     * @param {Object} chart - reference to chart object\n     * @returns {Object} series for map points\n     * */\n    value: function getCoordinateSeries(subcell, mapData, chart) {\n      var _this4 = this;\n\n      chart.mapTransforms = mapData ? mapData[\"hc-transform\"] : Highcharts.maps[\"custom/world-highres2\"][\"hc-transform\"];\n      var pos = chart.fromLatLonToPoint({ lat: subcell.coordinates[0], lon: subcell.coordinates[1] });\n      var config = {\n        type: \"mappoint\",\n        name: subcell.text,\n        marker: {\n          lineColor: \"black\",\n          lineWidth: 1,\n          radius: 4,\n          symbol: \"circle\"\n        },\n        data: [{\n          color: DrilldownMap.computeColor(this.colorFn, DrilldownMap.getPrimaryValue(subcell, this.valueColumn), subcell.target),\n          name: subcell.text,\n          value: subcell.value,\n          x: pos.x,\n          y: pos.y\n        }]\n      };\n      if (this.mappointCallback) {\n        (function () {\n          var self = _this4;\n          config.events = {\n            click: function click(e) {\n              self.mappointCallback.call(this, e);\n            }\n          };\n        })();\n      }\n      return config;\n    }\n\n    /**\n     * Creates a single series item for Highmaps series option\n     * @param {Object} subcell - a subcell\n     * @param {Object} mapData\n     * @param {Object} chart - reference to chart object\n     * @returns {Object} Returns series\n     * */\n\n  }, {\n    key: \"composeSeries\",\n    value: function composeSeries(subcell, mapData, chart) {\n      if (!subcell.coordinates) {\n        mapData = mapData ? Highcharts.geojson(DrilldownMap.createCustomGeoJSON(mapData, subcell.mapID, subcell.text)) : Highcharts.geojson(DrilldownMap.createCustomGeoJSON(Highcharts.maps['custom/world-highres2'], subcell.mapID, subcell.text));\n        if (subcell.mapID) {\n          var target = subcell.target;\n          if (!target || target == null) {\n            target = this.hierarchy[0].target;\n          }\n          return {\n            name: subcell.text,\n            dataLabels: {\n              enabled: true,\n              formatter: function formatter() {\n                if (this.series.data[0][\"hc-key\"] == this.point[\"hc-key\"]) return this.series.name;\n              }\n            },\n            /*tooltip: {\n             pointFormat: 'NPS : {point.value}'\n             },*/\n            color: DrilldownMap.computeColor(this.colorFn, DrilldownMap.getPrimaryValue(subcell, this.valueColumn), target),\n            allAreas: false,\n            parent: subcell.parent.text,\n            mapData: mapData,\n            joinBy: ['hc-key', 'code'],\n            data: this.getSeriesData(subcell)\n          };\n        }\n      } else {\n        return this.getCoordinateSeries(subcell, mapData, chart);\n      }\n    }\n\n    /**\n     * get subcell by text rather than by id\n     * @param {Object} curLVL - current level\n     * @param {String} name - name of the subcell we're looking for\n     * @returns {Object} Returns a subcell which has that name\n     * */\n\n  }, {\n    key: \"updateMap\",\n\n\n    /**\n     * Updates your map view after drilldown click\n     * @param {Object} curLVL\n     * @param {Object} chart\n     * @param {Object} e - drilldown event object\n     * @returns {Object} Returns curLVL\n     * */\n    value: function updateMap(curLVL, chart, e) {\n      var _this5 = this;\n\n      if (curLVL && curLVL.mapName) {\n        // if we have another map to load\n        var map = DrilldownMap.loadMap(curLVL.mapName);\n        map.then(function (mapData) {\n          _this5.addSeries(curLVL, chart, e, mapData);\n        });\n      } else if (curLVL && !curLVL.mapName) {\n        this.addSeries(curLVL, chart, e);\n      }\n    }\n\n    /**\n     * Composes a series for your HighMaps options config\n     * @param {Object} curLVL\n     * @param {Object} chart\n     * @param {Object} e - drilldown event object\n     * @param {Object} mapData - mapData geoJSON\n     * */\n\n  }, {\n    key: \"addSeries\",\n    value: function addSeries(curLVL, chart, e, mapData) {\n      var _this6 = this;\n\n      if (curLVL.subcells) {\n        // if it's an end point\n        if (curLVL.subcells[0].coordinates) {\n          var seriesItem = this.composeSeries(curLVL, mapData, chart);\n          seriesItem.data.forEach(function (dataItem) {\n            dataItem.drilldown = null;\n            dataItem.value = null;\n          });\n          chart.addSingleSeriesAsDrilldown(e.point, seriesItem);\n        }\n        curLVL.subcells.forEach(function (subcell) {\n          if (!subcell.mapID && !subcell.coordinates) return;\n          var seriesItem = _this6.composeSeries(subcell, mapData, chart);\n          chart.addSingleSeriesAsDrilldown(e.point, seriesItem);\n        });\n        chart.applyDrilldown();\n      } else {\n        var _seriesItem = this.composeSeries(curLVL, mapData, chart);\n        _seriesItem.data.map(function (dataItem) {\n          dataItem.drilldown = null;\n          dataItem.value = null;\n        });\n        chart.addSeriesAsDrilldown(e.point, _seriesItem);\n      }\n    }\n\n    /**\n     * Generates chart subtitle returning region and main value of full info based on `fullParentLevelInfo`\n     * */\n\n  }, {\n    key: \"getTooltip\",\n\n\n    /**\n     * Generates a serialized dataset for a tooltip\n     * */\n    value: function getTooltip() {\n      var data = this.curLVL._data;\n      return data.map(function (item, index) {\n        return \"<span class=\\\"tooltip-level-label\\\">\" + item.title + \":</span><span class=\\\"tooltip-level-value\\\"> {point.data.\" + index + \".value}</span>\";\n      }).join(\"<br />\");\n    }\n\n    /**\n     * @param {Array} rowheaders - a rowheaders array\n     * @param {String} containerID - id of the container to render map to\n     * @param {String} initMap - the initial map object that's going to be loaded to initialise the map\n     * @param {Object} options - options passed to HighMap to restyle/reconfigure it\n     * */\n\n  }, {\n    key: \"drawMap\",\n    value: function drawMap(rowheaders, containerID, initMap, options) {\n      this.curLVL = this.flatHierarchy[rowheaders[0]];\n      var self = this;\n      var config = {\n        lang: {\n          drillUpText: '< to {series.parent}'\n        },\n        tooltip: {\n          pointFormat: self.getTooltip()\n        },\n        title: {\n          text: ''\n        },\n        legend: {\n          enabled: true\n        },\n        plotOptions: {\n          series: {\n            states: {\n              normal: {\n                animation: false\n              }\n            },\n            point: {\n              events: {\n                mouseOver: function mouseOver(e) {\n                  this.series.data.forEach(function (el) {\n                    return el.setState(\"hover\");\n                  });\n                },\n                mouseOut: function mouseOut(e) {\n                  this.series.data.forEach(function (el) {\n                    return el.setState();\n                  });\n                }\n              }\n            }\n          }\n        },\n        mapNavigation: {\n          enabled: true,\n          buttons: {\n            zoomIn: {\n              verticalAlign: \"bottom\"\n            },\n            zoomOut: {\n              verticalAlign: \"bottom\"\n            }\n          }\n        },\n        subtitle: {\n          align: 'right',\n          text: self.subtitle,\n          floating: true\n        },\n        drilldown: {\n          drillUpButton: {\n            position: {\n              align: \"left\",\n              y: 0\n            },\n            relativeTo: 'spacingBox'\n          }\n        },\n        chart: {\n          events: {\n            drilldown: function drilldown(e) {\n              //this == chart reference;\n              //console.log(CircularJSON.parse(CircularJSON.stringify(e.point)));\n              var chart = e.target;\n              self.curLVL = DrilldownMap.getLevelByName(self.curLVL, e.point.series.name);\n              var curLVL = self.curLVL;\n              if (curLVL) {\n                chart.showLoading('fetching data');\n                var table = _rAsyncHierarchyTable2.default.fetchChildTable(curLVL.id, curLVL.parent ? curLVL.parent.id : null, self.tableID, self.pageStateId).then(function (table) {\n                  // parse data loaded from table\n                  DrilldownMap.parseTableData({\n                    source: table,\n                    excludeRows: 0,\n                    rowheaders: curLVL.subcells.map(function (lvl) {\n                      return lvl.id;\n                    }),\n                    flatHierarchy: self.flatHierarchy\n                  });\n                  self.updateMap(curLVL, chart, e);\n                  chart.subtitle.update({ text: self.subtitle });\n                  chart.hideLoading();\n                });\n              }\n            },\n            drillupall: function drillupall(e) {\n              self.curLVL = self.curLVL.parent;\n              if (self.curLVL) {\n                e.target.subtitle.update({ text: self.subtitle });\n              }\n            }\n          }\n        },\n        series: self.initMap(self.curLVL, [{\n          showInLegend: false,\n          mapData: Highcharts.maps[initMap]\n        }])\n      };\n\n      Highcharts.mapChart(containerID, _rReportalBase2.default.mixin(config, options));\n    }\n  }, {\n    key: \"subtitle\",\n    get: function get() {\n      if (this.fullParentLevelInfo) {\n        return this.curLVL._data.map(function (item) {\n          return \"<span class=\\\"tooltip-level-label\\\">\" + item.title + \":</span><span class=\\\"tooltip-level-value\\\"> \" + item.value + \"</span>\";\n        }).join(\"<br />\");\n      } else {\n        return this.curLVL._data[0].title + \": \" + this.curLVL._data[0].value + \"<br> \" + this.curLVL._data[this.valueColumn].title + \": \" + this.curLVL._data[this.valueColumn].value;\n      }\n    }\n  }], [{\n    key: \"parseTableData\",\n    value: function parseTableData() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          source = _ref2.source,\n          excludeRows = _ref2.excludeRows,\n          rowheaders = _ref2.rowheaders,\n          flatHierarchy = _ref2.flatHierarchy,\n          excludeColumns = _ref2.excludeColumns;\n\n      var AT = new _rAggregatedTable2.default({\n        source: source,\n        excludeColumns: excludeColumns, excludeRows: excludeRows\n      });\n      if (rowheaders && rowheaders != null && rowheaders.length > 0) {\n        rowheaders.forEach(function (rh, i) {\n          if (!flatHierarchy[rh]._data) {\n            flatHierarchy[rh]._data = AT.data[i].map(function (dataItem, index) {\n              return {\n                value: dataItem.data,\n                title: index != 0 ? AT.columns[index].title : \"Region\"\n              };\n            });\n          }\n        });\n      } else {\n        throw new Error('rowheaders must be present to parse data');\n      }\n    }\n\n    /**\n     * Creates custom geoJSON file\n     * @param {Object} mapData - initial map\n     * @param {Array}countriesList - list of countries IDs\n     * @param {String} mapName\n     * @returns {Object}\n     * */\n\n  }, {\n    key: \"createCustomGeoJSON\",\n    value: function createCustomGeoJSON(mapData, countriesList, mapName) {\n      var geojson = {\n        title: \"\",\n        version: \"0.1.0\",\n        type: \"FeatureCollection\",\n        copyright: \"Copyright (c) 2015 Highsoft AS, Based on data from Natural Earth\",\n        copyrightShort: \"Natural Earth\",\n        copyrightUrl: \"http://www.naturalearthdata.com\",\n        crs: {\n          type: \"name\",\n          properties: {\n            name: \"urn:ogc:def:crs:EPSG:54003\"\n          }\n        },\n        \"hc-transform\": {\n          default: {\n            crs: \"+proj=mill +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 +R_A +datum=WGS84 +units=m +no_defs\",\n            scale: 1.72182781654e-05,\n            jsonres: 15.5,\n            jsonmarginX: -999,\n            jsonmarginY: 9851.0,\n            xoffset: -19495356.3693,\n            yoffset: 12635908.1982\n          }\n        },\n        features: DrilldownMap.getFeatures(countriesList, mapData)\n      };\n\n      geojson.title = mapName;\n      return geojson;\n    }\n\n    /**\n     * Get array of features from geoJSON file\n     * @param {Array|String} countriesList - countries IDs\n     * @param {Object} mapData - your initial map\n     * @param {String} key for geojson features comparing\n     * @returns {Array} features list\n     * */\n\n  }, {\n    key: \"getFeatures\",\n    value: function getFeatures(countriesList, mapData) {\n      var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"hc-key\";\n\n      if (typeof countriesList === 'string') {\n        return mapData.features.filter(function (feature) {\n          return feature.properties[key] === countriesList;\n        });\n      } else if (Array.isArray(countriesList)) {\n        return mapData.features.filter(function (feature) {\n          return countriesList.indexOf(feature.properties[key]) != -1;\n        });\n      }\n    }\n  }, {\n    key: \"loadMap\",\n    value: function loadMap(source) {\n      return new Promise(function (resolve, reject) {\n        jQuery.getScript('https://code.highcharts.com/mapdata/' + source + '.js', function () {\n          resolve(Highcharts.maps[source]);\n        });\n      });\n    }\n\n    /**\n     * Gets the main value that the chart is built on\n     * @param {Object} level - level under examination\n     * @param {Number} valueColumn - Zero-based column index that contains primary value which will be used for map coloring\n     * @returns {Number} Returns primary value\n     * */\n\n  }, {\n    key: \"getPrimaryValue\",\n    value: function getPrimaryValue(level, valueColumn) {\n      return level._data[valueColumn].value;\n    }\n  }, {\n    key: \"computeColor\",\n    value: function computeColor(colorFn, value, target) {\n      if (colorFn) {\n        return colorFn(value, target);\n      } else {\n        return undefined;\n      }\n    }\n  }, {\n    key: \"getLevelByName\",\n    value: function getLevelByName(curLVL, name) {\n      return curLVL.subcells.filter(function (el) {\n        return el.text == name;\n      })[0];\n    }\n  }]);\n\n  return DrilldownMap;\n}(_mapHierarchy2.default);\n\nexports.default = DrilldownMap;\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 14 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by IvanP on 26.12.2016.\n */\nvar MapHierarchy = function () {\n  function MapHierarchy(hierarchy, normals, normalsSeparator) {\n    _classCallCheck(this, MapHierarchy);\n\n    this.flatHierarchy = hierarchy;\n    this.hierarchy = this.constructor.processHierarchy(this.flatHierarchy, normals, normalsSeparator);\n    this.constructor.addMapIDsToHierarchyLevel(this.hierarchy);\n  }\n\n  /**\n   * Processes hierarchy array by assigning parent-child relations and returning those that don't have a parent\n   * @param {Object} flatHierarchy - a flat hierarchy object with ids as keys\n   * @param {Object} [normals={}] - an object where keys myst coincide with column ids (thus be identical to keys in `item`). `normals` doesn't require for all keys from `item` to be present, only those that need to be normalised to a different type\n   * @param {String} [separator=','] - a separator array items are serialized with, by default it's a comma (`,`)\n   * */\n\n\n  _createClass(MapHierarchy, null, [{\n    key: 'processHierarchy',\n    value: function processHierarchy(flatHierarchy) {\n      var normals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var separator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ',';\n\n      var orphans = [],\n          toNormalize = Object.keys(normals).length > 0;\n      for (var key in flatHierarchy) {\n        var item = flatHierarchy[key];\n        if (toNormalize) MapHierarchy.normalize(item, normals);\n\n        // map item to parent\n        if (item.parent && item.parent != null && item.parent.length > 0) {\n          item.parent = flatHierarchy[item.parent];\n          item.parent.subcells = item.parent.subcells || [];\n          item.parent.subcells.push(item);\n        } else {\n          orphans.push(item);\n        }\n      }\n      return orphans;\n    }\n  }, {\n    key: 'composeFlatHierarchy',\n    value: function composeFlatHierarchy(hierarchy, normals) {\n      var o = {};\n      var toNormalize = normals.keys().length > 0;\n      hierarchy.forEach(function (item) {\n        if (toNormalize) MapHierarchy.normalize(item, normals);\n        o[item.id] = item;\n      });\n      return o;\n    }\n\n    /**\n     * normalizes a string value to a certain format.\n     * - `arrayString` - normalizes comma-separated items to an Array of Strings, i.e \"haha\", \"lala\" would be [\"haha\", \"lala\"]\n     * - `arrayNumber` - normalizes comma-separated items to an Array of Floats, i.e \"-13.41\", \"48.66\" would be [-13.41, 48.66]\n     * - `string` - returns the string as is\n     * - `number` - parses the string as a Float\n     * - `boolean` - parses the string as a Boolean, case insensitive\n     *\n     * @param {Object} item - item to match contents against `normals`\n     * @param {Object} [normals={}] - an object where keys myst coincide with column ids (thus be identical to keys in `item`). `normals` doesn't require for all keys from `item` to be present, only those that need to be normalised to a different type\n     * @param {String} [separator=','] - a separator array items are serialized with, by default it's a comma (`,`)\n     * */\n\n  }, {\n    key: 'normalize',\n    value: function normalize(item) {\n      var normals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var separator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ',';\n\n      var parser = {\n        stringArray: function stringArray(val) {\n          return val.split(separator);\n        },\n        numberArray: function numberArray(val) {\n          return val.split(separator).map(function (i) {\n            return parseFloat(i);\n          });\n        },\n        string: function string(val) {\n          return val.trim();\n        },\n        number: function number(val) {\n          return val != null && !isNaN(parseFloat(val)) ? parseFloat(val) : null;\n        },\n        boolean: function boolean(val) {\n          return val.toLowerCase() == \"true\" || val == \"1\";\n        }\n      };\n      for (var normal in normals) {\n        if (item[normal]) {\n          // property exists in object\n          if (item[normal].length > 0) {\n            item[normal] = parser[normals[normal]](item[normal]);\n          } else {\n            delete item[normal];\n          }\n        }\n      }\n    }\n\n    /**\n     * Updates initial hierarchy\n     * @param hierarchy\n     * @param parent - hierarchy level parent\n     */\n\n  }, {\n    key: 'addMapIDsToHierarchyLevel',\n    value: function addMapIDsToHierarchyLevel(hierarchy) {\n      var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      hierarchy.forEach(function (subcell) {\n        if (subcell.parent && subcell.parent != null && subcell.parent.mapName) {\n          subcell.mapName = subcell.parent.mapName;\n        }\n        if (subcell.subcells) {\n          MapHierarchy.addMapIDsToHierarchyLevel(subcell.subcells, subcell);\n        }\n        if (subcell.parent && subcell.mapID && !subcell.parent.mapName) {\n          if (!subcell.parent.mapID) subcell.parent.mapID = [];\n          subcell.parent.mapID = subcell.parent.mapID.concat(subcell.mapID);\n        }\n      });\n    }\n  }]);\n\n  return MapHierarchy;\n}();\n\nexports.default = MapHierarchy;\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 15 */
/***/ function(module, exports) {

	eval("// removed by extract-text-webpack-plugin//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3ItYWdncmVnYXRlZC10YWJsZS9zcmMvYWdncmVnYXRlZC10YWJsZS5jc3M/Y2QxNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3ItYWdncmVnYXRlZC10YWJsZS9zcmMvYWdncmVnYXRlZC10YWJsZS5jc3Ncbi8vIG1vZHVsZSBpZCA9IDE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 16 */
/***/ function(module, exports) {

	eval("// removed by extract-text-webpack-plugin//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Itc29ydC10YWJsZS9zcmMvc29ydC10YWJsZS1zdHlsZXMuY3NzP2JmYzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yLXNvcnQtdGFibGUvc3JjL3NvcnQtdGFibGUtc3R5bGVzLmNzc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 17 */
/***/ function(module, exports) {

	eval("// removed by extract-text-webpack-plugin//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3ItdGFibGUtZmxvYXRpbmctaGVhZGVyL3NyYy90YWJsZS1mbG9hdGluZy1oZWFkZXItc3R5bGVzLmNzcz8zNWE3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjE3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vci10YWJsZS1mbG9hdGluZy1oZWFkZXIvc3JjL3RhYmxlLWZsb2F0aW5nLWhlYWRlci1zdHlsZXMuY3NzXG4vLyBtb2R1bGUgaWQgPSAxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 18 */,
/* 19 */
/***/ function(module, exports) {

	eval("// removed by extract-text-webpack-plugin//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZHJpbGxkb3duLW1hcC5jc3M/ZjM4YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvZHJpbGxkb3duLW1hcC5jc3Ncbi8vIG1vZHVsZSBpZCA9IDE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }
/******/ ]);