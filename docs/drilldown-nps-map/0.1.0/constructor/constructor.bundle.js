/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _rReportalBase = __webpack_require__(1);\n\nvar _rReportalBase2 = _interopRequireDefault(_rReportalBase);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by IvanP on 30.12.2016.\n */\n__webpack_require__(18);\n\nvar MapsConstructor = function () {\n  function MapsConstructor() {\n    var _this = this;\n\n    _classCallCheck(this, MapsConstructor);\n\n    return _rReportalBase2.default.promiseRequest(\"maps.json\").then(function (cfg) {\n      _this.config = JSON.parse(cfg);\n      _this.hm = _this.constructor.stubHighcharts();\n      _this.mapsSelector = document.querySelector(\"#mapsSectionSelector\");\n      _this.mapsList = document.querySelector(\"#mapsList\");\n      _this.countriesList = document.querySelector(\"#countriesList\");\n      _this.countriesFilter = document.querySelector(\"#countriesFilter\");\n      _this.mapsFilter = document.querySelector(\"#mapsFilter\");\n      _this.processMap = _this.processMap.bind(_this);\n\n      _this.createMapSwitcher();\n      _this.initFiltering();\n    });\n  }\n\n  _createClass(MapsConstructor, [{\n    key: \"initFiltering\",\n\n\n    /**\n     * Sets up simple filtering matching all matches on keystroke and clear\n     * */\n    value: function initFiltering() {\n      var filters = [this.countriesFilter, this.mapsFilter];\n      var targets = [this.countriesList, this.mapsList];\n      filters.forEach(function (filter, index) {\n        filter.addEventListener('input', function (e) {\n          var value = e.target.value;\n          var target = targets[index];\n          if (target.nodeName == \"TABLE\") {\n            [].slice.call(target.querySelectorAll(\"tbody>tr>td:nth-child(1)\")).forEach(function (el) {\n              var parent = el.parentNode;\n              if (el.textContent.toLowerCase().indexOf(value) > -1) {\n                parent.style.display = \"table-row\";\n              } else {\n                parent.style.display = \"none\";\n              }\n            });\n          }\n          if (target.nodeName == \"UL\") {\n            [].slice.call(target.querySelectorAll(\"li\")).forEach(function (el) {\n              if (el.textContent.toLowerCase().indexOf(value) > -1) {\n                el.style.display = \"block\";\n              } else {\n                el.style.display = \"none\";\n              }\n            });\n          }\n        });\n      });\n    }\n  }, {\n    key: \"createMapSwitcher\",\n\n\n    /**\n     * creates a dropdown that switches maps\n     *\n     */\n    value: function createMapSwitcher() {\n      var _this2 = this;\n\n      var select = document.querySelector(\"#mapsSectionSelector\");\n      this.config.forEach(function (section, index) {\n        var option = document.createElement('option');\n        option.value = index;\n        option.textContent = section.title;\n        _this2.mapsSelector.appendChild(option);\n      });\n      this.mapsSelector.addEventListener('change', function (e) {\n        _this2.loadMapsSection(select.value);\n      });\n      this.loadMapsSection(0);\n    }\n\n    /**\n     * loads a map section\n     * */\n\n  }, {\n    key: \"loadMapsSection\",\n    value: function loadMapsSection(sectionIndex) {\n      var _this3 = this;\n\n      this.currentSection = this.config[sectionIndex];\n      this.clearMapsList();\n      this.currentSection.maps.forEach(function (map, i) {\n        var li = MapsConstructor.createElement('li');\n        li.appendChild(_this3.createRadio(i, map.title));\n        li.appendChild(_this3.createLink(i, 'demo'));\n        _this3.mapsList.appendChild(li);\n      });\n    }\n  }, {\n    key: \"createRadio\",\n    value: function createRadio(index, label) {\n      var radio = document.createElement('input');\n      radio.type = \"radio\";\n      radio.name = \"map\";\n      radio.value = index;\n      var l = this.constructor.createElement('label', label);\n      l.insertBefore(radio, l.firstChild);\n      radio.addEventListener('change', this.processMap);\n      return l;\n    }\n  }, {\n    key: \"createLink\",\n    value: function createLink(index, property) {\n      var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"_blank\";\n\n      var prop = this.currentSection.maps[index][property],\n          link = MapsConstructor.createElement('a', prop.title);\n      link.href = prop.href;\n      link.target = target;\n      return link;\n    }\n  }, {\n    key: \"processMap\",\n    value: function processMap(e) {\n      var _this4 = this;\n\n      var map = this.currentSection.maps[e.target.value];\n      var oMap = this.fakeXHR(map.js.href);\n      oMap.then(function (mapJSON) {\n        _this4.clearCountriesList();\n        _this4.constructor.updateCodebox(_this4.constructor.getMapID(map.js.href));\n        _this4.buildCountriesList(mapJSON);\n      });\n    }\n  }, {\n    key: \"buildCountriesList\",\n    value: function buildCountriesList(map) {\n      var df = document.createDocumentFragment();\n\n      map.features.forEach(function (feature) {\n        var p = feature.properties,\n            row = MapsConstructor.createElement('tr');\n        df.appendChild(row);\n        row.appendChild(MapsConstructor.createElement('td', p['name']));\n        row.appendChild(MapsConstructor.createElement('td', p['hc-key']));\n        row.appendChild(MapsConstructor.createElement('td', p['subregion']));\n        row.appendChild(MapsConstructor.createElement('td', p['region-wb']));\n      });\n      this.countriesList.querySelector('tbody').appendChild(df);\n    }\n  }, {\n    key: \"clearCountriesList\",\n    value: function clearCountriesList() {\n      this.countriesList.querySelector('tbody').innerHTML = '';\n    }\n  }, {\n    key: \"fakeXHR\",\n    value: function fakeXHR(url) {\n      var _this5 = this;\n\n      var mapID = this.constructor.getMapID(url),\n          hm = this.hm;\n      return new Promise(function (resolve, reject) {\n        if (!_this5.hm[mapID]) {\n          (function () {\n            var getContents = function getContents(e) {\n              script.removeEventListener('load', getContents);\n              head.removeChild(script);\n              resolve(hm[mapID]);\n            };\n\n            var script = document.createElement('script'),\n                head = document.querySelector('head');\n            script.addEventListener('load', getContents);\n\n            script.src = url;\n            head.appendChild(script);\n          })();\n        } else {\n          resolve(hm[mapID]);\n        }\n      });\n    }\n  }, {\n    key: \"clearMapsList\",\n    value: function clearMapsList() {\n      var _this6 = this;\n\n      if (this.mapsList.children.length > 0) {\n        [].slice.call(this.mapsList.querySelectorAll('input[type=radio]')).forEach(function (cb) {\n          return cb.removeEventListener('change', _this6.processMap);\n        });\n        this.mapsList.innerHTML = '';\n      }\n    }\n  }], [{\n    key: \"stubHighcharts\",\n    value: function stubHighcharts() {\n      if (!window.Highcharts) {\n        window.Highcharts = { maps: {} };\n      } else if (!window.Highcharts.maps) {\n        window.Highcharts.maps = {};\n      }\n      return window.Highcharts.maps;\n    }\n  }, {\n    key: \"updateCodebox\",\n    value: function updateCodebox(mapID) {\n      document.querySelector('.codebox').innerHTML = \"mapID: \" + mapID;\n    }\n  }, {\n    key: \"createElement\",\n    value: function createElement(tag, text) {\n      var el = document.createElement(tag);\n      if (text) {\n        el.textContent = text;\n      }\n      return el;\n    }\n  }, {\n    key: \"getMapID\",\n    value: function getMapID(href) {\n      return href.split(\"mapdata/\")[1].split('.')[0];\n    }\n  }]);\n\n  return MapsConstructor;\n}();\n\nexports.default = MapsConstructor;\n\n\nwindow.Reportal = window.Reportal || {};\n_rReportalBase2.default.mixin(window.Reportal, {\n  MapsConstructor: MapsConstructor\n});\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 1:
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ReportalBase = function () {\n  function ReportalBase() {\n    _classCallCheck(this, ReportalBase);\n  }\n\n  _createClass(ReportalBase, null, [{\n    key: 'mixin',\n\n\n    /**\n     * Copies props from a source object to a target object.\n     *\n     * Note, this method uses a simple `for...in` strategy for enumerating\n     * properties.  To ensure only `ownProperties` are copied from source\n     * to target and that accessor implementations are copied, use `extend`.\n     *\n     * @method mixin\n     * @param {Object} target Target object to copy properties to.\n     * @param {Object} source Source object to copy properties from.\n     * @return {Object} Target object that was passed as first argument.\n     */\n    value: function mixin(target, source) {\n      for (var i in source) {\n        target[i] = source[i];\n      }\n      return target;\n    }\n  }, {\n    key: '_logger',\n    value: function _logger(level, args) {\n      // accept ['foo', 'bar'] and [['foo', 'bar']]\n      if (args.length === 1 && Array.isArray(args[0])) {\n        args = args[0];\n      }\n      // only accept logging functions\n      switch (level) {\n        case 'log':\n        case 'warn':\n        case 'error':\n          console[level].apply(console, args);\n          break;\n      }\n    }\n  }, {\n    key: '_log',\n    value: function _log() {\n      var args = Array.prototype.slice.call(arguments, 0);\n      this._logger('log', args);\n    }\n  }, {\n    key: '_warn',\n    value: function _warn() {\n      var args = Array.prototype.slice.call(arguments, 0);\n      this._logger('warn', args);\n    }\n  }, {\n    key: '_error',\n    value: function _error() {\n      var args = Array.prototype.slice.call(arguments, 0);\n      this._logger('error', args);\n    }\n\n    /**\n     * Creates a named event with `name`\n     * @param {String} name - name of the event\n     * @return {Event} Returns a created event\n     * */\n\n  }, {\n    key: 'newEvent',\n    value: function newEvent(name) {\n      var event = document.createEvent('Event');\n      event.initEvent(name, true, true);\n      return event;\n    }\n\n    /**\n     * Inspects if the current string might be converted to number and renders it as number. If string length is 0, returns `null`. If none applies returns the string as is.\n     * @param {String} str - value of the cell if not HTML contents\n     * @return {Number|null|String}\n     * */\n\n  }, {\n    key: 'isNumber',\n    value: function isNumber(str) {\n      if (!isNaN(parseFloat(str))) {\n        str = str.replace(/,/i, ''); // remove unnecessary comma as a delimiter for thousands from data.\n        return parseFloat(str);\n      } else if (str.length == 0) {\n        return null;\n      } else {\n        return str;\n      }\n    }\n\n    /**\n     * Creates an XHR wrapped in a Promise\n     * @param {!String} URL - url to send a `GET` request to\n     * @return {Promise} Returns a then-able promise with `XMLHttpRequest.responseText`\n     * */\n\n  }, {\n    key: 'promiseRequest',\n    value: function promiseRequest(URL) {\n      return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', URL, true);\n        xhr.onload = function (e) {\n          xhr.status == 200 ? resolve(xhr.responseText) : reject(Error(xhr.status + ': ' + xhr.statusText));\n        };\n        xhr.onerror = function (e) {\n          reject(e);\n        };\n        xhr.send();\n      });\n    }\n\n    /**\n     * Gets a variable listed in query string\n     * @param {!String} variable - variable name to get value for\n     * @param {String=} [query=window.location.search.substring(1)] - the query string to search variable for in\n     * @return {String} Returns value for the variable\n     * */\n\n  }, {\n    key: 'getQueryVariable',\n    value: function getQueryVariable(variable) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.location.search.substring(1);\n\n      var vars = query.split(\"&\");\n      for (var i = 0; i < vars.length; i++) {\n        var pair = vars[i].split(\"=\");\n        if (pair[0].toLowerCase() == variable.toLowerCase()) {\n          return pair[1];\n        }\n      }\n      return null;\n    }\n  }]);\n\n  return ReportalBase;\n}();\n\nexports.default = ReportalBase;\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 18:
/***/ function(module, exports) {

	eval("// removed by extract-text-webpack-plugin//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29uc3RydWN0b3Ivc3R5bGVzLmNzcz85ZWY4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjE4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb25zdHJ1Y3Rvci9zdHlsZXMuY3NzXG4vLyBtb2R1bGUgaWQgPSAxOFxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }

/******/ });