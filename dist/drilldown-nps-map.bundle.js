/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _DrilldownMap = __webpack_require__(2);\n\nvar _DrilldownMap2 = _interopRequireDefault(_DrilldownMap);\n\nvar _rReportalBase = __webpack_require__(1);\n\nvar _rReportalBase2 = _interopRequireDefault(_rReportalBase);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nwindow.Reportal = window.Reportal || {};\n_rReportalBase2.default.mixin(window.Reportal, {\n  DrilldownMap: _DrilldownMap2.default\n});\n\nexports.default = Reportal;\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcz8zNDc5Il0sIm5hbWVzIjpbIndpbmRvdyIsIlJlcG9ydGFsIiwibWl4aW4iLCJEcmlsbGRvd25NYXAiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBQSxPQUFPQyxRQUFQLEdBQWtCRCxPQUFPQyxRQUFQLElBQW1CLEVBQXJDO0FBQ0Esd0JBQWFDLEtBQWIsQ0FBbUJGLE9BQU9DLFFBQTFCLEVBQW1DO0FBQ2pDRTtBQURpQyxDQUFuQzs7a0JBSWVGLFEiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IERyaWxsZG93bk1hcCBmcm9tIFwiLi9EcmlsbGRvd25NYXBcIjtcbmltcG9ydCBSZXBvcnRhbEJhc2UgZnJvbSBcInItcmVwb3J0YWwtYmFzZVwiO1xuXG53aW5kb3cuUmVwb3J0YWwgPSB3aW5kb3cuUmVwb3J0YWwgfHwge31cblJlcG9ydGFsQmFzZS5taXhpbih3aW5kb3cuUmVwb3J0YWwse1xuICBEcmlsbGRvd25NYXBcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBSZXBvcnRhbFxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21haW4uanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 1 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ReportalBase = function () {\n  function ReportalBase() {\n    _classCallCheck(this, ReportalBase);\n  }\n\n  _createClass(ReportalBase, null, [{\n    key: 'mixin',\n\n\n    /**\r\n     * Copies props from a source object to a target object.\r\n     *\r\n     * Note, this method uses a simple `for...in` strategy for enumerating\r\n     * properties.  To ensure only `ownProperties` are copied from source\r\n     * to target and that accessor implementations are copied, use `extend`.\r\n     *\r\n     * @method mixin\r\n     * @param {Object} target Target object to copy properties to.\r\n     * @param {Object} source Source object to copy properties from.\r\n     * @return {Object} Target object that was passed as first argument.\r\n     */\n    value: function mixin(target, source) {\n      for (var i in source) {\n        target[i] = source[i];\n      }\n      return target;\n    }\n  }, {\n    key: '_logger',\n    value: function _logger(level, args) {\n      // accept ['foo', 'bar'] and [['foo', 'bar']]\n      if (args.length === 1 && Array.isArray(args[0])) {\n        args = args[0];\n      }\n      // only accept logging functions\n      switch (level) {\n        case 'log':\n        case 'warn':\n        case 'error':\n          console[level].apply(console, args);\n          break;\n      }\n    }\n  }, {\n    key: '_log',\n    value: function _log() {\n      var args = Array.prototype.slice.call(arguments, 0);\n      this._logger('log', args);\n    }\n  }, {\n    key: '_warn',\n    value: function _warn() {\n      var args = Array.prototype.slice.call(arguments, 0);\n      this._logger('warn', args);\n    }\n  }, {\n    key: '_error',\n    value: function _error() {\n      var args = Array.prototype.slice.call(arguments, 0);\n      this._logger('error', args);\n    }\n\n    /**\r\n     * Creates a named event with `name`\r\n     * @param {String} name - name of the event\r\n     * @return {Event} Returns a created event\r\n     * */\n\n  }, {\n    key: 'newEvent',\n    value: function newEvent(name) {\n      var event = document.createEvent('Event');\n      event.initEvent(name, true, true);\n      return event;\n    }\n\n    /**\r\n     * Inspects if the current string might be converted to number and renders it as number. If string length is 0, returns `null`. If none applies returns the string as is.\r\n     * @param {String} str - value of the cell if not HTML contents\r\n     * @return {Number|null|String}\r\n     * */\n\n  }, {\n    key: 'isNumber',\n    value: function isNumber(str) {\n      if (!isNaN(parseFloat(str))) {\n        str = str.replace(/,/i, ''); // remove unnecessary comma as a delimiter for thousands from data.\n        return parseFloat(str);\n      } else if (str.length == 0) {\n        return null;\n      } else {\n        return str;\n      }\n    }\n\n    /**\r\n     * Creates an XHR wrapped in a Promise\r\n     * @param {!String} URL - url to send a `GET` request to\r\n     * @return {Promise} Returns a then-able promise with `XMLHttpRequest.responseText`\r\n     * */\n\n  }, {\n    key: 'promiseRequest',\n    value: function promiseRequest(URL) {\n      return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', URL, true);\n        xhr.onload = function () {\n          xhr.status == 200 ? resolve(xhr.responseText) : reject(Error(xhr.status + ': ' + xhr.statusText));\n        };\n        xhr.onerror = function () {\n          reject(Error(\"Network Error\"));\n        };\n        xhr.send();\n      });\n    }\n\n    /**\r\n     * Gets a variable listed in query string\r\n     * @param {!String} variable - variable name to get value for\r\n     * @param {String=} [query=window.location.search.substring(1)] - the query string to search variable for in\r\n     * @return {String} Returns value for the variable\r\n     * */\n\n  }, {\n    key: 'getQueryVariable',\n    value: function getQueryVariable(variable) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.location.search.substring(1);\n\n      var vars = query.split(\"&\");\n      for (var i = 0; i < vars.length; i++) {\n        var pair = vars[i].split(\"=\");\n        if (pair[0].toLowerCase() == variable.toLowerCase()) {\n          return pair[1];\n        }\n      }\n      return null;\n    }\n  }]);\n\n  return ReportalBase;\n}();\n\nexports.default = ReportalBase;\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 2 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar DrilldownMap = function () {\n  function DrilldownMap() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        hierarchy = _ref.hierarchy,\n        containerID = _ref.containerID,\n        _ref$dataClasses = _ref.dataClasses,\n        dataClasses = _ref$dataClasses === undefined ? [{\n      from: 80,\n      to: 100,\n      color: '#8bc34a',\n      name: 'Promoter'\n    }, {\n      from: 60,\n      to: 80,\n      color: '#ffc107',\n      name: 'Passive'\n    }, {\n      from: 0,\n      to: 60,\n      color: '#f44336',\n      name: 'Detractor'\n    }] : _ref$dataClasses,\n        options = _ref.options;\n\n    _classCallCheck(this, DrilldownMap);\n\n    if ((typeof Highcharts === 'undefined' ? 'undefined' : _typeof(Highcharts)) == undefined) {\n      throw new Error('Highcharts must be declared. Probably they are missing');\n    };\n    if (_typeof(Highcharts.maps) == undefined) {\n      throw new Error('HighMaps must be loaded. Probably they are missing');\n    };\n    this.constructor.addMapIDsToHierarchyLevel(hierarchy);\n    this.constructor.drawMap(hierarchy, containerID, dataClasses);\n  }\n\n  _createClass(DrilldownMap, null, [{\n    key: 'createCustomGeoJSON',\n    value: function createCustomGeoJSON(sourceMap, countriesList, mapName) {\n      var geojson = {\n        title: \"\",\n        version: \"0.1.0\",\n        type: \"FeatureCollection\",\n        copyright: \"Copyright (c) 2015 Highsoft AS, Based on data from Natural Earth\",\n        copyrightShort: \"Natural Earth\",\n        copyrightUrl: \"http://www.naturalearthdata.com\",\n        crs: {\n          type: \"name\",\n          properties: {\n            name: \"urn:ogc:def:crs:EPSG:54003\"\n          }\n        },\n        \"hc-transform\": {\n          default: {\n            crs: \"+proj=mill +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 +R_A +datum=WGS84 +units=m +no_defs\",\n            scale: 1.72182781654e-05,\n            jsonres: 15.5,\n            jsonmarginX: -999,\n            jsonmarginY: 9851.0,\n            xoffset: -19495356.3693,\n            yoffset: 12635908.1982\n          }\n        },\n        features: []\n      };\n      geojson.title = mapName;\n      if (typeof countriesList === 'string') {\n        sourceMap.features.forEach(function (feature) {\n          if (feature.id === countriesList) {\n            geojson.features.push(feature);\n          }\n        });\n      } else if (Array.isArray(countriesList)) {\n        countriesList.forEach(function (id) {\n          sourceMap.features.forEach(function (feature) {\n            if (feature.id === id) {\n              geojson.features.push(feature);\n            }\n          });\n        });\n      } else {\n        console.log(typeof countriesID === 'undefined' ? 'undefined' : _typeof(countriesID));\n        throw new Error(\"Countries list probably missing or has corrupted data\");\n      }\n      return geojson;\n    }\n  }, {\n    key: 'addMapIDsToHierarchyLevel',\n    value: function addMapIDsToHierarchyLevel(hierarchy) {\n      var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      hierarchy.forEach(function (el) {\n        el.parent = parent;\n        if (el.subcells) {\n          DrilldownMap.addMapIDsToHierarchyLevel(el.subcells, el);\n        }\n        if (el.parent && el.mapID) {\n          if (!el.parent.mapID) el.parent.mapID = [];\n          el.parent.mapID = el.parent.mapID.concat(el.mapID);\n        }\n      });\n    }\n  }, {\n    key: 'loadMap',\n    value: function loadMap(source) {\n      var map = new Promise(function (resolve, reject) {\n        $.getScript('https://code.highcharts.com/mapdata/' + source + '.js', function () {\n          resolve(Highcharts.geojson(Highcharts.maps[source]));\n        });\n      });\n      return map;\n    }\n  }, {\n    key: 'getSeriesData',\n    value: function getSeriesData(el) {\n      var drilldown = el.text;\n      if (typeof el.mapID === 'string') {\n        return [{\n          'code': el.mapID,\n          'value': 65\n        }];\n      } else if (Array.isArray(el.mapID)) {\n        return el.mapID.map(function (id) {\n          return {\n            'drilldown': drilldown,\n            'code': id,\n            'value': 81\n          };\n        });\n      } else {\n        throw new Error(\"Data element is corrupted\");\n      }\n    }\n  }, {\n    key: 'initMap',\n    value: function initMap(obj) {\n      var series = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n      obj.subcells.forEach(function (el) {\n        if (el.mapID) {\n          series.push(DrilldownMap.composeSeries(el));\n        }\n      });\n      return series;\n    }\n  }, {\n    key: 'composeSeries',\n    value: function composeSeries(el, mapData) {\n      mapData = mapData || Highcharts.geojson(DrilldownMap.createCustomGeoJSON(Highcharts.maps['custom/world'], el.mapID, el.text));\n      if (el.mapID) {\n        var s = {\n          name: el.text,\n          tooltip: {\n            pointFormat: 'NPS : {point.value}'\n          },\n          parent: el.parent.text,\n          mapData: mapData,\n          joinBy: ['hc-a2', 'code'],\n          data: DrilldownMap.getSeriesData(el)\n        };\n        return s;\n      }\n    }\n  }, {\n    key: 'updateMap',\n    value: function updateMap(curLVL, chart, e) {\n      curLVL = curLVL.subcells.filter(function (el) {\n        return el.text == e.point.series.name;\n      })[0];\n      if (curLVL && curLVL.map) {\n        // if we have another map to load\n        var map = DrilldownMap.loadMap(curLVL.map);\n        map.then(function (mapData) {\n          DrilldownMap.addSeries(curLVL, chart, e, mapData);\n        });\n      } else if (curLVL && !curLVL.map) {\n        DrilldownMap.addSeries(curLVL, chart, e);\n      }\n      return curLVL;\n    }\n  }, {\n    key: 'addSeries',\n    value: function addSeries(curLVL, chart, e, mapData) {\n      if (curLVL.map) {\n        var a = DrilldownMap.composeSeries(curLVL, mapData);\n\n        a.joinBy = 'hc-key';\n        a.data = [{\n          \"hc-key\": \"us-ma\",\n          \"value\": 0\n        }, {\n          \"hc-key\": \"us-wa\",\n          \"value\": 1\n        }, {\n          \"hc-key\": \"us-ca\",\n          \"value\": 2\n        }, {\n          \"hc-key\": \"us-or\",\n          \"value\": 3\n        }, {\n          \"hc-key\": \"us-wi\",\n          \"value\": 4\n        }, {\n          \"hc-key\": \"us-me\",\n          \"value\": 5\n        }, {\n          \"hc-key\": \"us-mi\",\n          \"value\": 6\n        }, {\n          \"hc-key\": \"us-nv\",\n          \"value\": 7\n        }, {\n          \"hc-key\": \"us-nm\",\n          \"value\": 8\n        }, {\n          \"hc-key\": \"us-co\",\n          \"value\": 9\n        }, {\n          \"hc-key\": \"us-wy\",\n          \"value\": 10\n        }, {\n          \"hc-key\": \"us-ks\",\n          \"value\": 11\n        }, {\n          \"hc-key\": \"us-ne\",\n          \"value\": 12\n        }, {\n          \"hc-key\": \"us-ok\",\n          \"value\": 13\n        }, {\n          \"hc-key\": \"us-mo\",\n          \"value\": 14\n        }, {\n          \"hc-key\": \"us-il\",\n          \"value\": 15\n        }, {\n          \"hc-key\": \"us-in\",\n          \"value\": 16\n        }, {\n          \"hc-key\": \"us-vt\",\n          \"value\": 17\n        }, {\n          \"hc-key\": \"us-ar\",\n          \"value\": 18\n        }, {\n          \"hc-key\": \"us-tx\",\n          \"value\": 19\n        }, {\n          \"hc-key\": \"us-ri\",\n          \"value\": 20\n        }, {\n          \"hc-key\": \"us-al\",\n          \"value\": 21\n        }, {\n          \"hc-key\": \"us-ms\",\n          \"value\": 22\n        }, {\n          \"hc-key\": \"us-nc\",\n          \"value\": 23\n        }, {\n          \"hc-key\": \"us-va\",\n          \"value\": 24\n        }, {\n          \"hc-key\": \"us-ia\",\n          \"value\": 25\n        }, {\n          \"hc-key\": \"us-md\",\n          \"value\": 26\n        }, {\n          \"hc-key\": \"us-de\",\n          \"value\": 27\n        }, {\n          \"hc-key\": \"us-pa\",\n          \"value\": 28\n        }, {\n          \"hc-key\": \"us-nj\",\n          \"value\": 29\n        }, {\n          \"hc-key\": \"us-ny\",\n          \"value\": 30\n        }, {\n          \"hc-key\": \"us-id\",\n          \"value\": 31\n        }, {\n          \"hc-key\": \"us-sd\",\n          \"value\": 32\n        }, {\n          \"hc-key\": \"us-ct\",\n          \"value\": 33\n        }, {\n          \"hc-key\": \"us-nh\",\n          \"value\": 34\n        }, {\n          \"hc-key\": \"us-ky\",\n          \"value\": 35\n        }, {\n          \"hc-key\": \"us-oh\",\n          \"value\": 36\n        }, {\n          \"hc-key\": \"us-tn\",\n          \"value\": 37\n        }, {\n          \"hc-key\": \"us-wv\",\n          \"value\": 38\n        }, {\n          \"hc-key\": \"us-dc\",\n          \"value\": 39\n        }, {\n          \"hc-key\": \"us-la\",\n          \"value\": 40\n        }, {\n          \"hc-key\": \"us-fl\",\n          \"value\": 41\n        }, {\n          \"hc-key\": \"us-ga\",\n          \"value\": 42\n        }, {\n          \"hc-key\": \"us-sc\",\n          \"value\": 43\n        }, {\n          \"hc-key\": \"us-mn\",\n          \"value\": 44\n        }, {\n          \"hc-key\": \"us-mt\",\n          \"value\": 45\n        }, {\n          \"hc-key\": \"us-nd\",\n          \"value\": 46\n        }, {\n          \"hc-key\": \"us-az\",\n          \"value\": 47\n        }, {\n          \"hc-key\": \"us-ut\",\n          \"value\": 48\n        }, {\n          \"hc-key\": \"us-hi\",\n          \"value\": 49\n        }, {\n          \"hc-key\": \"us-ak\",\n          \"value\": 50\n        }, {\n          \"value\": 51\n        }];\n        chart.addSeriesAsDrilldown(e.point, a);\n        return;\n      }\n      if (curLVL.subcells) {\n        curLVL.subcells.forEach(function (el) {\n          var a = DrilldownMap.composeSeries(el, mapData);\n          chart.addSingleSeriesAsDrilldown(e.point, a);\n        });\n        chart.applyDrilldown();\n      } else {\n        var _a = DrilldownMap.composeSeries(curLVL, mapData);\n        chart.addSeriesAsDrilldown(e.point, _a);\n      }\n    }\n  }, {\n    key: 'drawMap',\n    value: function drawMap(hierarchy, containerID, dataClasses) {\n      var curLVL = hierarchy[0];\n      Highcharts.mapChart(containerID, {\n        lang: {\n          drillUpText: 'Back to {series.parent}'\n        },\n        tooltip: {\n          pointFormat: 'NPS : {point.value}'\n        },\n        title: {\n          text: 'Drilldown map'\n        },\n        legend: {\n          enabled: false\n        },\n        colorAxis: {\n          dataClasses: dataClasses\n        },\n        mapNavigation: {\n          enabled: true\n        },\n        chart: {\n          events: {\n            drilldown: function drilldown(e) {\n              var chart = this;\n              curLVL = DrilldownMap.updateMap(curLVL, chart, e);\n            },\n            drillupall: function drillupall(e) {\n              curLVL = curLVL.parent;\n            }\n          }\n        },\n        series: DrilldownMap.initMap(curLVL, [{\n          mapData: Highcharts.maps[\"custom/world\"]\n        }])\n      });\n    }\n  }]);\n\n  return DrilldownMap;\n}();\n\nexports.default = DrilldownMap;\nmodule.exports = exports['default'];//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }
/******/ ]);